<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2024-03-09T18:41:34+00:00</updated><id>/feed.xml</id><title type="html">Spark NLP</title><subtitle>High Performance NLP with Apache Spark
</subtitle><author><name>{&quot;type&quot;=&gt;nil, &quot;name&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;avatar&quot;=&gt;nil, &quot;bio&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;facebook&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;weibo&quot;=&gt;nil, &quot;googleplus&quot;=&gt;nil, &quot;telegram&quot;=&gt;nil, &quot;medium&quot;=&gt;nil, &quot;zhihu&quot;=&gt;nil, &quot;douban&quot;=&gt;nil, &quot;linkedin&quot;=&gt;nil, &quot;github&quot;=&gt;nil, &quot;npm&quot;=&gt;nil}</name></author><entry><title type="html">Biomarker Text Matcher</title><link href="/2024/03/06/biomarker_matcher_en.html" rel="alternate" type="text/html" title="Biomarker Text Matcher" /><published>2024-03-06T00:00:00+00:00</published><updated>2024-03-06T00:00:00+00:00</updated><id>/2024/03/06/biomarker_matcher_en</id><content type="html" xml:base="/2024/03/06/biomarker_matcher_en.html">## Description

Extracts biomarker entities using rule based `TextMatcherInternal` annotator.

## Predicted Entities

`Biomarker`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/biomarker_matcher_en_5.3.0_3.0_1709748724355.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/biomarker_matcher_en_5.3.0_3.0_1709748724355.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
	
```python
documentAssembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

tokenizer = Tokenizer()\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;token&quot;)

text_matcher = TextMatcherInternalModel.pretrained(&quot;biomarker_matcher&quot;,&quot;en&quot;,&quot;clinical/models&quot;) \
    .setInputCols([&quot;document&quot;, &quot;token&quot;])\
    .setOutputCol(&quot;matched_text&quot;)\

mathcer_pipeline = Pipeline().setStages([
                  documentAssembler,
                  tokenizer,
                  text_matcher])

data = spark.createDataFrame([[&quot;In the bone- marrow (BM) aspiration, blasts accounted for 88.1% of ANCs, which were positive for CD20, CD34, CD38, CD58, CD66c, CD123, HLA-DR, cCD79a, and TdT on flow cytometry. Measurements of serum tumor markers showed elevated level of cytokeratin 19 fragment (Cyfra21-1: 4.77 ng/mL), neuron-specific enolase (NSE: 19.60 ng/mL), and squamous cell carcinoma antigen (SCCA: 2.58 ng/mL).&quot;]]).toDF(&quot;text&quot;)

matcher_model = mathcer_pipeline.fit(data)
result = matcher_model.transform(data)
```
```scala
val documentAssembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
	
val tokenizer = new Tokenizer()
    .setInputCols(Array(&quot;document&quot;))
    .setOutputCol(&quot;token&quot;)
	
val text_matcher = TextMatcherInternalModel.pretrained(&quot;biomarker_matcher&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(Array(&quot;document&quot;,&quot;token&quot;))
    .setOutputCol(&quot;matched_text&quot;)
	
val mathcer_pipeline = new Pipeline()
    .setStages(Array(documentAssembler,
	             tokenizer,
 	             text_matcher))
	
val data = Seq(&quot;In the bone- marrow (BM) aspiration, blasts accounted for 88.1% of ANCs, which were positive for CD20, CD34, CD38, CD58, CD66c, CD123, HLA-DR, cCD79a, and TdT on flow cytometry. Measurements of serum tumor markers showed elevated level of cytokeratin 19 fragment (Cyfra21-1: 4.77 ng/mL), neuron-specific enolase (NSE: 19.60 ng/mL), and squamous cell carcinoma antigen (SCCA: 2.58 ng/mL).&quot;) .toDF(&quot;text&quot;)
	
val matcher_model = mathcer_pipeline.fit(data)
val result = matcher_model.transform(data)
```
&lt;/div&gt;

## Results

```bash
+-------------------------------+-----+---+---------+
|                          chunk|begin|end|    label|
+-------------------------------+-----+---+---------+
|                           CD20|   97|100|Biomarker|
|                           CD34|  103|106|Biomarker|
|                           CD38|  109|112|Biomarker|
|                           CD58|  115|118|Biomarker|
|                          CD66c|  121|125|Biomarker|
|                          CD123|  128|132|Biomarker|
|                         HLA-DR|  135|140|Biomarker|
|                         cCD79a|  143|148|Biomarker|
|                            TdT|  155|157|Biomarker|
|        cytokeratin 19 fragment|  239|261|Biomarker|
|                      Cyfra21-1|  264|272|Biomarker|
|        neuron-specific enolase|  288|310|Biomarker|
|                            NSE|  313|315|Biomarker|
|squamous cell carcinoma antigen|  336|366|Biomarker|
|                           SCCA|  369|372|Biomarker|
+-------------------------------+-----+---+---------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|biomarker_matcher|
|Compatibility:|Healthcare NLP 5.3.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[document, token]|
|Output Labels:|[matched_text]|
|Language:|en|
|Size:|26.2 KB|
|Case sensitive:|false|</content><author><name>John Snow Labs</name></author><category term="en" /><category term="licensed" /><category term="biomarker" /><category term="textmatcher" /><summary type="html">Description Extracts biomarker entities using rule based TextMatcherInternal annotator. Predicted Entities Biomarker Live Demo Open in Colab Download Copy S3 URI How to use PythonJSLScalaNLU documentAssembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) tokenizer = Tokenizer()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;token&quot;) text_matcher = TextMatcherInternalModel.pretrained(&quot;biomarker_matcher&quot;,&quot;en&quot;,&quot;clinical/models&quot;) \ .setInputCols([&quot;document&quot;, &quot;token&quot;])\ .setOutputCol(&quot;matched_text&quot;)\ mathcer_pipeline = Pipeline().setStages([ documentAssembler, tokenizer, text_matcher]) data = spark.createDataFrame([[&quot;In the bone- marrow (BM) aspiration, blasts accounted for 88.1% of ANCs, which were positive for CD20, CD34, CD38, CD58, CD66c, CD123, HLA-DR, cCD79a, and TdT on flow cytometry. Measurements of serum tumor markers showed elevated level of cytokeratin 19 fragment (Cyfra21-1: 4.77 ng/mL), neuron-specific enolase (NSE: 19.60 ng/mL), and squamous cell carcinoma antigen (SCCA: 2.58 ng/mL).&quot;]]).toDF(&quot;text&quot;) matcher_model = mathcer_pipeline.fit(data) result = matcher_model.transform(data) val documentAssembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val tokenizer = new Tokenizer() .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;token&quot;) val text_matcher = TextMatcherInternalModel.pretrained(&quot;biomarker_matcher&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(Array(&quot;document&quot;,&quot;token&quot;)) .setOutputCol(&quot;matched_text&quot;) val mathcer_pipeline = new Pipeline() .setStages(Array(documentAssembler, tokenizer, text_matcher)) val data = Seq(&quot;In the bone- marrow (BM) aspiration, blasts accounted for 88.1% of ANCs, which were positive for CD20, CD34, CD38, CD58, CD66c, CD123, HLA-DR, cCD79a, and TdT on flow cytometry. Measurements of serum tumor markers showed elevated level of cytokeratin 19 fragment (Cyfra21-1: 4.77 ng/mL), neuron-specific enolase (NSE: 19.60 ng/mL), and squamous cell carcinoma antigen (SCCA: 2.58 ng/mL).&quot;) .toDF(&quot;text&quot;) val matcher_model = mathcer_pipeline.fit(data) val result = matcher_model.transform(data) Results +-------------------------------+-----+---+---------+ | chunk|begin|end| label| +-------------------------------+-----+---+---------+ | CD20| 97|100|Biomarker| | CD34| 103|106|Biomarker| | CD38| 109|112|Biomarker| | CD58| 115|118|Biomarker| | CD66c| 121|125|Biomarker| | CD123| 128|132|Biomarker| | HLA-DR| 135|140|Biomarker| | cCD79a| 143|148|Biomarker| | TdT| 155|157|Biomarker| | cytokeratin 19 fragment| 239|261|Biomarker| | Cyfra21-1| 264|272|Biomarker| | neuron-specific enolase| 288|310|Biomarker| | NSE| 313|315|Biomarker| |squamous cell carcinoma antigen| 336|366|Biomarker| | SCCA| 369|372|Biomarker| +-------------------------------+-----+---+---------+ Model Information Model Name: biomarker_matcher Compatibility: Healthcare NLP 5.3.0+ License: Licensed Edition: Official Input Labels: [document, token] Output Labels: [matched_text] Language: en Size: 26.2 KB Case sensitive: false</summary></entry><entry><title type="html">Drug Text Matcher</title><link href="/2024/03/06/drug_matcher_en.html" rel="alternate" type="text/html" title="Drug Text Matcher" /><published>2024-03-06T00:00:00+00:00</published><updated>2024-03-06T00:00:00+00:00</updated><id>/2024/03/06/drug_matcher_en</id><content type="html" xml:base="/2024/03/06/drug_matcher_en.html">## Description

This model extracts medication entities in clinical notes using rule-based `TextMatcherInternal` annotator.

## Predicted Entities

`DRUG`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/drug_matcher_en_5.3.0_3.0_1709745277221.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/drug_matcher_en_5.3.0_3.0_1709745277221.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
	
```python
documentAssembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

tokenizer = Tokenizer()\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;token&quot;)

text_matcher = TextMatcherInternalModel.pretrained(&quot;drug_matcher&quot;,&quot;en&quot;,&quot;clinical/models&quot;) \
    .setInputCols([&quot;document&quot;, &quot;token&quot;])\
    .setOutputCol(&quot;matched_text&quot;)\
    .setCaseSensitive(False)\
    .setDelimiter(&quot;#&quot;)

mathcer_pipeline = Pipeline().setStages([
                  documentAssembler,
                  tokenizer,
                  text_matcher])

data = spark.createDataFrame([[&quot;John's doctor prescribed aspirin for his heart condition, along with paracetamol for his fever and headache, amoxicillin for his tonsilitis and lansoprazole for his GORD on 2023-12-01.&quot;]]).toDF(&quot;text&quot;)

matcher_model = mathcer_pipeline.fit(data)
result = matcher_model.transform(data)
```
```scala
val documentAssembler = new DocumentAssembler()
	.setInputCol(&quot;text&quot;)
	.setOutputCol(&quot;document&quot;)
	
val tokenizer = new Tokenizer()
	.setInputCols(Array(&quot;document&quot;))
	.setOutputCol(&quot;token&quot;)
	
val text_matcher = TextMatcherInternalModel.pretrained(&quot;drug_matcher&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
	.setInputCols(Array(&quot;document&quot;,&quot;token&quot;))
	.setOutputCol(&quot;matched_text&quot;)
	
val mathcer_pipeline = new Pipeline()
	.setStages(Array( documentAssembler,
			  tokenizer,
    			  text_matcher))
	
val data = Seq(&quot;John's doctor prescribed aspirin for his heart condition, along with paracetamol for his fever and headache, amoxicillin for his tonsilitis and lansoprazole for his GORD on 2023-12-01.&quot;) .toDF(&quot;text&quot;)
	
val matcher_model = mathcer_pipeline.fit(data)
val result = matcher_model.transform(data)
```
&lt;/div&gt;

## Results

```bash
+------------+-----+---+-----+
|       chunk|begin|end|label|
+------------+-----+---+-----+
|     aspirin|   25| 31| DRUG|
| paracetamol|   69| 79| DRUG|
| amoxicillin|  109|119| DRUG|
|lansoprazole|  144|155| DRUG|
+------------+-----+---+-----+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|drug_matcher|
|Compatibility:|Healthcare NLP 5.3.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[document, token]|
|Output Labels:|[matched_text]|
|Language:|en|
|Size:|3.7 MB|
|Case sensitive:|false|</content><author><name>John Snow Labs</name></author><category term="en" /><category term="licensed" /><category term="drug" /><category term="textmatcher" /><category term="clinical" /><summary type="html">Description This model extracts medication entities in clinical notes using rule-based TextMatcherInternal annotator. Predicted Entities DRUG Live Demo Open in Colab Download Copy S3 URI How to use PythonJSLScalaNLU documentAssembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) tokenizer = Tokenizer()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;token&quot;) text_matcher = TextMatcherInternalModel.pretrained(&quot;drug_matcher&quot;,&quot;en&quot;,&quot;clinical/models&quot;) \ .setInputCols([&quot;document&quot;, &quot;token&quot;])\ .setOutputCol(&quot;matched_text&quot;)\ .setCaseSensitive(False)\ .setDelimiter(&quot;#&quot;) mathcer_pipeline = Pipeline().setStages([ documentAssembler, tokenizer, text_matcher]) data = spark.createDataFrame([[&quot;John's doctor prescribed aspirin for his heart condition, along with paracetamol for his fever and headache, amoxicillin for his tonsilitis and lansoprazole for his GORD on 2023-12-01.&quot;]]).toDF(&quot;text&quot;) matcher_model = mathcer_pipeline.fit(data) result = matcher_model.transform(data) val documentAssembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val tokenizer = new Tokenizer() .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;token&quot;) val text_matcher = TextMatcherInternalModel.pretrained(&quot;drug_matcher&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(Array(&quot;document&quot;,&quot;token&quot;)) .setOutputCol(&quot;matched_text&quot;) val mathcer_pipeline = new Pipeline() .setStages(Array( documentAssembler, tokenizer, text_matcher)) val data = Seq(&quot;John's doctor prescribed aspirin for his heart condition, along with paracetamol for his fever and headache, amoxicillin for his tonsilitis and lansoprazole for his GORD on 2023-12-01.&quot;) .toDF(&quot;text&quot;) val matcher_model = mathcer_pipeline.fit(data) val result = matcher_model.transform(data) Results +------------+-----+---+-----+ | chunk|begin|end|label| +------------+-----+---+-----+ | aspirin| 25| 31| DRUG| | paracetamol| 69| 79| DRUG| | amoxicillin| 109|119| DRUG| |lansoprazole| 144|155| DRUG| +------------+-----+---+-----+ Model Information Model Name: drug_matcher Compatibility: Healthcare NLP 5.3.0+ License: Licensed Edition: Official Input Labels: [document, token] Output Labels: [matched_text] Language: en Size: 3.7 MB Case sensitive: false</summary></entry><entry><title type="html">Sentence Entity Resolver for SNOMED (sbiobertresolve_snomed_drug)</title><link href="/2024/03/06/sbiobertresolve_snomed_drug_en.html" rel="alternate" type="text/html" title="Sentence Entity Resolver for SNOMED (sbiobertresolve_snomed_drug)" /><published>2024-03-06T00:00:00+00:00</published><updated>2024-03-06T00:00:00+00:00</updated><id>/2024/03/06/sbiobertresolve_snomed_drug_en</id><content type="html" xml:base="/2024/03/06/sbiobertresolve_snomed_drug_en.html">## Description

This model maps detected drug entities to SNOMED codes using `sbiobert_base_cased_mli` Sentence Bert Embeddings.

## Predicted Entities



{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/sbiobertresolve_snomed_drug_en_5.3.0_3.0_1709717736012.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/sbiobertresolve_snomed_drug_en_5.3.0_3.0_1709717736012.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
  .setInputCol(&quot;text&quot;)\
  .setOutputCol(&quot;document&quot;)

sentenceDetectorDL = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, 'clinical/models') \
  .setInputCols([&quot;document&quot;]) \
  .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer()\
  .setInputCols([&quot;sentence&quot;])\
  .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
  .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
  .setOutputCol(&quot;word_embeddings&quot;)

clinical_ner = MedicalNerModel.pretrained(&quot;ner_posology&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
  .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;word_embeddings&quot;]) \
  .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverterInternal() \
  .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \
  .setOutputCol(&quot;ner_chunk&quot;)\
  .setWhiteList(['DRUG'])

c2doc = Chunk2Doc()\
  .setInputCols(&quot;ner_chunk&quot;)\
  .setOutputCol(&quot;ner_chunk_doc&quot;)

sentence_chunk_embeddings = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
  .setInputCols([&quot;ner_chunk_doc&quot;])\
  .setOutputCol(&quot;sentence_embeddings&quot;)


snomed_resolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_snomed_drug&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
  .setInputCols([&quot;sentence_embeddings&quot;]) \
  .setOutputCol(&quot;snomed_code&quot;)\
  .setDistanceFunction(&quot;EUCLIDEAN&quot;)\


resolver_pipeline = Pipeline(
    stages = [
          document_assembler,
          sentenceDetectorDL,
          tokenizer,
          word_embeddings,
          clinical_ner,
          ner_converter,
          c2doc,
          sentence_chunk_embeddings,
          snomed_resolver
          ])

model = resolver_pipeline.fit(spark.createDataFrame([[&quot;&quot;]]).toDF(&quot;text&quot;))
result = model.transform(spark.createDataFrame([[&quot;John's doctor prescribed aspirin for his heart condition, along with paracetamol for his fever and headache, amoxicillin for his tonsilitis and lansoprazole for his GORD on 2023-12-01.&quot;]]).toDF(&quot;text&quot;))
```
```scala
val document_assembler = DocumentAssembler()
  .setInputCol(&quot;text&quot;)
  .setOutputCol(&quot;document&quot;)

val sentenceDetectorDL = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
  .setInputCols(Array(&quot;document&quot;))
  .setOutputCol(&quot;sentence&quot;)

val tokenizer = Tokenizer()
  .setInputCols(Array(&quot;sentence&quot;))
  .setOutputCol(&quot;token&quot;)

val word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
  .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
  .setOutputCol(&quot;word_embeddings&quot;)

val clinical_ner = MedicalNerModel.pretrained(&quot;ner_posology&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
  .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;word_embeddings&quot;))
  .setOutputCol(&quot;ner&quot;)

val ner_converter = NerConverterInternal()
  .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
  .setOutputCol(&quot;ner_chunk&quot;)
  .setWhiteList(Array(&quot;DRUG&quot;))

val c2doc = Chunk2Doc()
  .setInputCols(&quot;ner_chunk&quot;)
  .setOutputCol(&quot;ner_chunk_doc&quot;)

val sentence_chunk_embeddings = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
  .setInputCols(Array(&quot;ner_chunk_doc&quot;))
  .setOutputCol(&quot;sentence_embeddings&quot;)


val snomed_resolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_snomed_drug&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
  .setInputCols(Array(&quot;sentence_embeddings&quot;))
  .setOutputCol(&quot;snomed_code&quot;)
  .setDistanceFunction(&quot;EUCLIDEAN&quot;)


resolver_pipeline = new Pipeline().setStages(
    document_assembler,
    sentenceDetectorDL,
    tokenizer,
    word_embeddings,
    clinical_ner,
    ner_converter,
    c2doc,
    sentence_chunk_embeddings,
    snomed_resolver)

data = Seq(&quot;John's doctor prescribed aspirin for his heart condition, along with paracetamol for his fever and headache, amoxicillin for his tonsilitis and lansoprazole for his GORD on 2023-12-01.&quot;).toDF(&quot;text&quot;)

result = resolver_pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+------------+-----+-----------+------------+--------------------------------------------------+--------------------------------------------------+
|       chunk|label|snomed_code|  resolution|                                         all_codes|                                   all_resolutions|
+------------+-----+-----------+------------+--------------------------------------------------+--------------------------------------------------+
|     aspirin| DRUG|    7947003|     aspirin|7947003:::358427004:::426365001:::412566001:::2...|aspirin:::oral aspirin:::aspirin, buffered:::bu...|
| paracetamol| DRUG|  387517004| paracetamol|387517004:::90332006:::437876006:::437818001:::...|paracetamol:::paracetamol product:::oral form p...|
| amoxicillin| DRUG|   27658006| amoxicillin|27658006:::350162003:::427483001:::350164002:::...|amoxicillin:::oral amoxicillin:::amoxicillin so...|
|lansoprazole| DRUG|  108666007|lansoprazole|108666007:::437961004:::441863009:::716069007::...|lansoprazole:::oral form lansoprazole:::dexlans...|
+------------+-----+-----------+------------+--------------------------------------------------+--------------------------------------------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|sbiobertresolve_snomed_drug|
|Compatibility:|Healthcare NLP 5.3.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence_embeddings]|
|Output Labels:|[snomed_code]|
|Language:|en|
|Size:|283.0 MB|
|Case sensitive:|false|

## References

This model is trained with the augmented version of NIH September 2023 SNOMED CT United States (US) Edition.</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="en" /><category term="resolver" /><category term="snomed" /><category term="drug" /><summary type="html">Description This model maps detected drug entities to SNOMED codes using sbiobert_base_cased_mli Sentence Bert Embeddings. Predicted Entities Live Demo Open in Colab Download Copy S3 URI How to use PythonJSLScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentenceDetectorDL = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, 'clinical/models') \ .setInputCols([&quot;document&quot;]) \ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer()\ .setInputCols([&quot;sentence&quot;])\ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;word_embeddings&quot;) clinical_ner = MedicalNerModel.pretrained(&quot;ner_posology&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;word_embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverterInternal() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;)\ .setWhiteList(['DRUG']) c2doc = Chunk2Doc()\ .setInputCols(&quot;ner_chunk&quot;)\ .setOutputCol(&quot;ner_chunk_doc&quot;) sentence_chunk_embeddings = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;ner_chunk_doc&quot;])\ .setOutputCol(&quot;sentence_embeddings&quot;) snomed_resolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_snomed_drug&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence_embeddings&quot;]) \ .setOutputCol(&quot;snomed_code&quot;)\ .setDistanceFunction(&quot;EUCLIDEAN&quot;)\ resolver_pipeline = Pipeline( stages = [ document_assembler, sentenceDetectorDL, tokenizer, word_embeddings, clinical_ner, ner_converter, c2doc, sentence_chunk_embeddings, snomed_resolver ]) model = resolver_pipeline.fit(spark.createDataFrame([[&quot;&quot;]]).toDF(&quot;text&quot;)) result = model.transform(spark.createDataFrame([[&quot;John's doctor prescribed aspirin for his heart condition, along with paracetamol for his fever and headache, amoxicillin for his tonsilitis and lansoprazole for his GORD on 2023-12-01.&quot;]]).toDF(&quot;text&quot;)) val document_assembler = DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentenceDetectorDL = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;sentence&quot;) val tokenizer = Tokenizer() .setInputCols(Array(&quot;sentence&quot;)) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;word_embeddings&quot;) val clinical_ner = MedicalNerModel.pretrained(&quot;ner_posology&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;word_embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) .setWhiteList(Array(&quot;DRUG&quot;)) val c2doc = Chunk2Doc() .setInputCols(&quot;ner_chunk&quot;) .setOutputCol(&quot;ner_chunk_doc&quot;) val sentence_chunk_embeddings = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;ner_chunk_doc&quot;)) .setOutputCol(&quot;sentence_embeddings&quot;) val snomed_resolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_snomed_drug&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence_embeddings&quot;)) .setOutputCol(&quot;snomed_code&quot;) .setDistanceFunction(&quot;EUCLIDEAN&quot;) resolver_pipeline = new Pipeline().setStages( document_assembler, sentenceDetectorDL, tokenizer, word_embeddings, clinical_ner, ner_converter, c2doc, sentence_chunk_embeddings, snomed_resolver) data = Seq(&quot;John's doctor prescribed aspirin for his heart condition, along with paracetamol for his fever and headache, amoxicillin for his tonsilitis and lansoprazole for his GORD on 2023-12-01.&quot;).toDF(&quot;text&quot;) result = resolver_pipeline.fit(data).transform(data) Results +------------+-----+-----------+------------+--------------------------------------------------+--------------------------------------------------+ | chunk|label|snomed_code| resolution| all_codes| all_resolutions| +------------+-----+-----------+------------+--------------------------------------------------+--------------------------------------------------+ | aspirin| DRUG| 7947003| aspirin|7947003:::358427004:::426365001:::412566001:::2...|aspirin:::oral aspirin:::aspirin, buffered:::bu...| | paracetamol| DRUG| 387517004| paracetamol|387517004:::90332006:::437876006:::437818001:::...|paracetamol:::paracetamol product:::oral form p...| | amoxicillin| DRUG| 27658006| amoxicillin|27658006:::350162003:::427483001:::350164002:::...|amoxicillin:::oral amoxicillin:::amoxicillin so...| |lansoprazole| DRUG| 108666007|lansoprazole|108666007:::437961004:::441863009:::716069007::...|lansoprazole:::oral form lansoprazole:::dexlans...| +------------+-----+-----------+------------+--------------------------------------------------+--------------------------------------------------+ Model Information Model Name: sbiobertresolve_snomed_drug Compatibility: Healthcare NLP 5.3.0+ License: Licensed Edition: Official Input Labels: [sentence_embeddings] Output Labels: [snomed_code] Language: en Size: 283.0 MB Case sensitive: false References This model is trained with the augmented version of NIH September 2023 SNOMED CT United States (US) Edition.</summary></entry><entry><title type="html">Sentence Entity Resolver for SNOMED Concepts</title><link href="/2024/03/06/sbiobertresolve_snomed_findings_aux_concepts_en.html" rel="alternate" type="text/html" title="Sentence Entity Resolver for SNOMED Concepts" /><published>2024-03-06T00:00:00+00:00</published><updated>2024-03-06T00:00:00+00:00</updated><id>/2024/03/06/sbiobertresolve_snomed_findings_aux_concepts_en</id><content type="html" xml:base="/2024/03/06/sbiobertresolve_snomed_findings_aux_concepts_en.html">## Description

This model maps clinical entities and concepts to SNOMED codes using `sbiobert_base_cased_mli` Sentence Bert Embeddings. This is also capable of extracting `Clinical Findings `, `Morph Abnormality`, `Clinical Drug`, `Clinical Drug Form`, `Procedure`, `Substance`, `Physical Object`, and `Body Structure` concepts of SNOMED codes.

## Predicted Entities



{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/sbiobertresolve_snomed_findings_aux_concepts_en_5.3.0_3.0_1709759743840.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/sbiobertresolve_snomed_findings_aux_concepts_en_5.3.0_3.0_1709759743840.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
documentAssembler = DocumentAssembler()\
      .setInputCol(&quot;text&quot;)\
      .setOutputCol(&quot;document&quot;)

sentenceDetector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\
      .setInputCols([&quot;document&quot;])\
      .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer()\
      .setInputCols([&quot;sentence&quot;])\
      .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;,&quot;en&quot;, &quot;clinical/models&quot;)\
      .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
      .setOutputCol(&quot;embeddings&quot;)

ner_jsl = MedicalNerModel.pretrained(&quot;ner_jsl&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
      .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\
      .setOutputCol(&quot;ner_jsl&quot;)

ner_jsl_converter = NerConverter()\
      .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner_jsl&quot;])\
      .setOutputCol(&quot;ner_jsl_chunk&quot;)\
      .setWhiteList([&quot;Procedure&quot;,&quot;Kidney_Disease&quot;,&quot;Cerebrovascular_Disease&quot;,&quot;Heart_Disease&quot;,
                     &quot;Disease_Syndrome_Disorder&quot;, &quot;ImagingFindings&quot;, &quot;Symptom&quot;, &quot;VS_Finding&quot;,
                     &quot;EKG_Findings&quot;, &quot;Communicable_Disease&quot;,&quot;Substance&quot;,&quot;Drug_Ingredient&quot;,
                     &quot;Internal_organ_or_component&quot;,&quot;External_body_part_or_region&quot;,&quot;Modifier&quot;,
                     &quot;Triglycerides&quot;,&quot;Alcohol&quot;,&quot;Smoking&quot;,&quot;Pregnancy&quot;,&quot;Hypertension&quot;,&quot;Obesity&quot;,
                     &quot;Injury_or_Poisoning&quot;,&quot;Test&quot;,&quot;Hyperlipidemia&quot;,&quot;BMI&quot;,&quot;Oncological&quot;,&quot;Psychological_Condition&quot;,&quot;LDL&quot;,&quot;Diabetes&quot;])

chunk2doc = Chunk2Doc()\
      .setInputCols(&quot;ner_jsl_chunk&quot;)\
      .setOutputCol(&quot;ner_chunk_doc&quot;)

sbert_embedder = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\
     .setInputCols([&quot;ner_chunk_doc&quot;])\
     .setOutputCol(&quot;sbert_embeddings&quot;)\
     .setCaseSensitive(False)

snomed_resolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_snomed_findings_aux_concepts&quot;,&quot;en&quot;,&quot;clinical/models&quot;) \
     .setInputCols([&quot;sbert_embeddings&quot;])\
     .setOutputCol(&quot;snomed_code&quot;)\
     .setDistanceFunction(&quot;EUCLIDEAN&quot;)

nlpPipeline= Pipeline(stages=[
                              documentAssembler,
                              sentenceDetector,
                              tokenizer,
                              word_embeddings,
                              ner_jsl,
                              ner_jsl_converter,
                              chunk2doc,
                              sbert_embedder,
                              snomed_resolver
])

text= &quot;&quot;&quot;This is an 82-year-old male with a history of prior tobacco use, hypertension, chronic renal insufficiency, COPD, gastritis, and TIA. He initially presented to Braintree with a nonspecific ST-T abnormality and was transferred to St. Margaret’s Center. He underwent cardiac catheterization because of occlusion of the mid left anterior descending coronary artery lesion, which was complicated by hypotension and bradycardia. He required atropine, IV fluids, and dopamine, possibly secondary to a vagal reaction. He was subsequently transferred to the CCU for close monitoring. He was hemodynamically stable at the time of admission to the CCU.&quot;&quot;&quot;

df= spark.createDataFrame([[text]]).toDF(&quot;text&quot;)

result= nlpPipeline.fit(df).transform(df)
```
```scala
val documentAssembler = new DocumentAssembler()
  .setInputCol(&quot;text&quot;)
  .setOutputCol(&quot;document&quot;)

val sentenceDetector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
  .setInputCols(Array(&quot;document&quot;))
  .setOutputCol(&quot;sentence&quot;)

val tokenizer = new Tokenizer()
  .setInputCols(Array(&quot;sentence&quot;))
  .setOutputCol(&quot;token&quot;)

val wordEmbeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
  .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
  .setOutputCol(&quot;embeddings&quot;)

val nerJsl = MedicalNerModel.pretrained(&quot;ner_jsl&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
  .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
  .setOutputCol(&quot;ner_jsl&quot;)

val nerJslConverter = new NerConverter()
  .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner_jsl&quot;))
  .setOutputCol(&quot;ner_jsl_chunk&quot;)
  .setWhiteList(Array(&quot;Procedure&quot;,&quot;Kidney_Disease&quot;,&quot;Cerebrovascular_Disease&quot;,&quot;Heart_Disease&quot;,
                     &quot;Disease_Syndrome_Disorder&quot;, &quot;ImagingFindings&quot;, &quot;Symptom&quot;, &quot;VS_Finding&quot;,
                     &quot;EKG_Findings&quot;, &quot;Communicable_Disease&quot;,&quot;Substance&quot;,&quot;Drug_Ingredient&quot;,
                     &quot;Internal_organ_or_component&quot;,&quot;External_body_part_or_region&quot;,&quot;Modifier&quot;,
                     &quot;Triglycerides&quot;,&quot;Alcohol&quot;,&quot;Smoking&quot;,&quot;Pregnancy&quot;,&quot;Hypertension&quot;,&quot;Obesity&quot;,
                     &quot;Injury_or_Poisoning&quot;,&quot;Test&quot;,&quot;Hyperlipidemia&quot;,&quot;BMI&quot;,&quot;Oncological&quot;,&quot;Psychological_Condition&quot;,&quot;LDL&quot;,&quot;Diabetes&quot;))

val chunk2doc = new Chunk2Doc()
  .setInputCols(Array(&quot;ner_jsl_chunk&quot;))
  .setOutputCol(&quot;ner_chunk_doc&quot;)

val sbertEmbedder = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
  .setInputCols(Array(&quot;ner_chunk_doc&quot;))
  .setOutputCol(&quot;sbert_embeddings&quot;)
  .setCaseSensitive(false)

val snomedResolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_snomed_findings_aux_concepts&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
  .setInputCols(Array(&quot;sbert_embeddings&quot;))
  .setOutputCol(&quot;snomed_code&quot;)
  .setDistanceFunction(&quot;EUCLIDEAN&quot;)

val nlpPipeline = new Pipeline().setStages(Array(
  documentAssembler,
  sentenceDetector,
  tokenizer,
  wordEmbeddings,
  nerJsl,
  nerJslConverter,
  chunk2doc,
  sbertEmbedder,
  snomedResolver
))

val text = &quot;&quot;&quot;This is an 82-year-old male with a history of prior tobacco use, hypertension, chronic renal insufficiency, COPD, gastritis, and TIA. He initially presented to Braintree with a nonspecific ST-T abnormality and was transferred to St. Margaret’s Center. He underwent cardiac catheterization because of occlusion of the mid left anterior descending coronary artery lesion, which was complicated by hypotension and bradycardia. He required atropine, IV fluids, and dopamine, possibly secondary to a vagal reaction. He was subsequently transferred to the CCU for close monitoring. He was hemodynamically stable at the time of admission to the CCU.&quot;&quot;&quot;

val df = Seq(text).toDF(&quot;text&quot;)

val result = nlpPipeline.fit(df).transform(df)
```
&lt;/div&gt;

## Results

```bash
+--------------------------------------------------+-------------------------+-----------+--------------------------------------------------+--------------------------------------------------+--------------------------------------------------+--------------------------------------------------+
|                                             chunk|                    label|snomed_code|                                        resolution|                                         all_codes|                                   all_resolutions|                                    all_aux_labels|
+--------------------------------------------------+-------------------------+-----------+--------------------------------------------------+--------------------------------------------------+--------------------------------------------------+--------------------------------------------------+
|                                           tobacco|                  Smoking|   57264008|                                           tobacco|57264008:::102407002:::39953003:::110483000:::2...|tobacco:::tobacco smoke:::tobacco - substance::...|Organism:::Substance:::Substance:::Clinical Fin...|
|                                      hypertension|             Hypertension|   38341003|                                      hypertension|38341003:::59621000:::270440008:::31992008:::16...|hypertension:::essential hypertension:::hyperte...|Clinical Finding:::Clinical Finding:::Clinical ...|
|                       chronic renal insufficiency|           Kidney_Disease|  723190009|                       chronic renal insufficiency|723190009:::709044004:::90688005:::425369003:::...|chronic renal insufficiency:::chronic renal imp...|Clinical Finding:::Clinical Finding:::Clinical ...|
|                                              COPD|Disease_Syndrome_Disorder|   13645005|                                              copd|13645005:::414400006:::223821008:::60349006:::2...|copd:::coning:::cos:::ump:::ling:::chive:::caev...|Clinical Finding:::Clinical Finding:::Location:...|
|                                         gastritis|Disease_Syndrome_Disorder|    4556007|                                         gastritis|4556007:::235656001:::1086791000119100:::425410...|gastritis:::chemical gastritis:::erosive gastri...|Clinical Finding:::Clinical Finding:::Clinical ...|
|                                               TIA|  Cerebrovascular_Disease|  266257000|                                               tia|266257000:::31597007:::160363004:::396145008:::...|tia:::tui:::fh: tia:::tidac:::tu:::trna:::timor...|Clinical Finding:::Organism:::Context-dependent...|
|                                       nonspecific|                 Modifier|   10003008|                                      non-specific|10003008:::261992003:::863956004:::300844001:::...|non-specific:::non-biological:::non-sterile:::n...|Qualifier Value:::Qualifier Value:::Qualifier V...|
|                                  ST-T abnormality|             EKG_Findings|  428750005|                      nonspecific st-t abnormality|428750005:::399504009:::55930002:::455721000124...|nonspecific st-t abnormality:::clinical t categ...|Clinical Finding:::Observable Entity:::Clinical...|
|                           cardiac catheterization|                Procedure|   41976001|                           cardiac catheterization|41976001:::705923009:::721968000:::467735004:::...|cardiac catheterization:::cardiac catheter:::ca...|Procedure:::Physical Object:::Record Artifact::...|
|occlusion of the mid left anterior descending c...|                  Symptom|  840313007|occlusion of mid left anterior descending coron...|840313007:::44771000087108:::840315000:::447810...|occlusion of mid left anterior descending coron...|Clinical Finding:::No_Concept_Class:::Clinical ...|
|                                       hypotension|               VS_Finding|   45007003|                                       hypotension|45007003:::241727003:::19721008:::28651003:::67...|hypotension:::induced hypotension:::globe hypot...|Clinical Finding:::Procedure:::Clinical Finding...|
|                                       bradycardia|               VS_Finding|   48867003|                                       bradycardia|48867003:::49710005:::44273001:::42177007:::426...|bradycardia:::sinus bradycardia:::reflex bradyc...|Clinical Finding:::Clinical Finding:::Clinical ...|
|                                          atropine|          Drug_Ingredient|   73949004|                                          atropine|73949004:::105075009:::349945006:::410493009:::...|atropine:::atropine measurement:::oral atropine...|Pharma/Biol Product:::Procedure:::Clinical Drug...|
|                                            fluids|          Drug_Ingredient|  255765007|                                             fluid|255765007:::246498002:::258442002:::251851008::...|fluid:::fluid used:::fluid sample:::fluid input...|Qualifier Value:::Attribute:::Specimen:::Observ...|
|                                          dopamine|          Drug_Ingredient|   59187003|                                          dopamine|59187003:::412383006:::37484001:::32779004:::41...|dopamine:::dopamine agent:::dopamine receptor::...|Pharma/Biol Product:::Substance:::Substance:::P...|
|                                    vagal reaction|                  Symptom|  128968000|                                 vagal stimulation|128968000:::398665005:::106160007:::88882009:::...|vagal stimulation:::vaso vagal episode:::vagus ...|Procedure:::Clinical Finding:::Clinical Finding...|
+--------------------------------------------------+-------------------------+-----------+--------------------------------------------------+--------------------------------------------------+--------------------------------------------------+--------------------------------------------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|sbiobertresolve_snomed_findings_aux_concepts|
|Compatibility:|Healthcare NLP 5.3.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence_embeddings]|
|Output Labels:|[snomed_code]|
|Language:|en|
|Size:|1.5 GB|
|Case sensitive:|false|</content><author><name>John Snow Labs</name></author><category term="en" /><category term="licensed" /><category term="resolver" /><category term="auxconcepts" /><category term="findings" /><summary type="html">Description This model maps clinical entities and concepts to SNOMED codes using sbiobert_base_cased_mli Sentence Bert Embeddings. This is also capable of extracting Clinical Findings , Morph Abnormality, Clinical Drug, Clinical Drug Form, Procedure, Substance, Physical Object, and Body Structure concepts of SNOMED codes. Predicted Entities Live Demo Open in Colab Download Copy S3 URI How to use PythonJSLScalaNLU documentAssembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentenceDetector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer()\ .setInputCols([&quot;sentence&quot;])\ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;,&quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) ner_jsl = MedicalNerModel.pretrained(&quot;ner_jsl&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\ .setOutputCol(&quot;ner_jsl&quot;) ner_jsl_converter = NerConverter()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner_jsl&quot;])\ .setOutputCol(&quot;ner_jsl_chunk&quot;)\ .setWhiteList([&quot;Procedure&quot;,&quot;Kidney_Disease&quot;,&quot;Cerebrovascular_Disease&quot;,&quot;Heart_Disease&quot;, &quot;Disease_Syndrome_Disorder&quot;, &quot;ImagingFindings&quot;, &quot;Symptom&quot;, &quot;VS_Finding&quot;, &quot;EKG_Findings&quot;, &quot;Communicable_Disease&quot;,&quot;Substance&quot;,&quot;Drug_Ingredient&quot;, &quot;Internal_organ_or_component&quot;,&quot;External_body_part_or_region&quot;,&quot;Modifier&quot;, &quot;Triglycerides&quot;,&quot;Alcohol&quot;,&quot;Smoking&quot;,&quot;Pregnancy&quot;,&quot;Hypertension&quot;,&quot;Obesity&quot;, &quot;Injury_or_Poisoning&quot;,&quot;Test&quot;,&quot;Hyperlipidemia&quot;,&quot;BMI&quot;,&quot;Oncological&quot;,&quot;Psychological_Condition&quot;,&quot;LDL&quot;,&quot;Diabetes&quot;]) chunk2doc = Chunk2Doc()\ .setInputCols(&quot;ner_jsl_chunk&quot;)\ .setOutputCol(&quot;ner_chunk_doc&quot;) sbert_embedder = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\ .setInputCols([&quot;ner_chunk_doc&quot;])\ .setOutputCol(&quot;sbert_embeddings&quot;)\ .setCaseSensitive(False) snomed_resolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_snomed_findings_aux_concepts&quot;,&quot;en&quot;,&quot;clinical/models&quot;) \ .setInputCols([&quot;sbert_embeddings&quot;])\ .setOutputCol(&quot;snomed_code&quot;)\ .setDistanceFunction(&quot;EUCLIDEAN&quot;) nlpPipeline= Pipeline(stages=[ documentAssembler, sentenceDetector, tokenizer, word_embeddings, ner_jsl, ner_jsl_converter, chunk2doc, sbert_embedder, snomed_resolver ]) text= &quot;&quot;&quot;This is an 82-year-old male with a history of prior tobacco use, hypertension, chronic renal insufficiency, COPD, gastritis, and TIA. He initially presented to Braintree with a nonspecific ST-T abnormality and was transferred to St. Margaret’s Center. He underwent cardiac catheterization because of occlusion of the mid left anterior descending coronary artery lesion, which was complicated by hypotension and bradycardia. He required atropine, IV fluids, and dopamine, possibly secondary to a vagal reaction. He was subsequently transferred to the CCU for close monitoring. He was hemodynamically stable at the time of admission to the CCU.&quot;&quot;&quot; df= spark.createDataFrame([[text]]).toDF(&quot;text&quot;) result= nlpPipeline.fit(df).transform(df) val documentAssembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentenceDetector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(Array(&quot;sentence&quot;)) .setOutputCol(&quot;token&quot;) val wordEmbeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val nerJsl = MedicalNerModel.pretrained(&quot;ner_jsl&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner_jsl&quot;) val nerJslConverter = new NerConverter() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner_jsl&quot;)) .setOutputCol(&quot;ner_jsl_chunk&quot;) .setWhiteList(Array(&quot;Procedure&quot;,&quot;Kidney_Disease&quot;,&quot;Cerebrovascular_Disease&quot;,&quot;Heart_Disease&quot;, &quot;Disease_Syndrome_Disorder&quot;, &quot;ImagingFindings&quot;, &quot;Symptom&quot;, &quot;VS_Finding&quot;, &quot;EKG_Findings&quot;, &quot;Communicable_Disease&quot;,&quot;Substance&quot;,&quot;Drug_Ingredient&quot;, &quot;Internal_organ_or_component&quot;,&quot;External_body_part_or_region&quot;,&quot;Modifier&quot;, &quot;Triglycerides&quot;,&quot;Alcohol&quot;,&quot;Smoking&quot;,&quot;Pregnancy&quot;,&quot;Hypertension&quot;,&quot;Obesity&quot;, &quot;Injury_or_Poisoning&quot;,&quot;Test&quot;,&quot;Hyperlipidemia&quot;,&quot;BMI&quot;,&quot;Oncological&quot;,&quot;Psychological_Condition&quot;,&quot;LDL&quot;,&quot;Diabetes&quot;)) val chunk2doc = new Chunk2Doc() .setInputCols(Array(&quot;ner_jsl_chunk&quot;)) .setOutputCol(&quot;ner_chunk_doc&quot;) val sbertEmbedder = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;ner_chunk_doc&quot;)) .setOutputCol(&quot;sbert_embeddings&quot;) .setCaseSensitive(false) val snomedResolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_snomed_findings_aux_concepts&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sbert_embeddings&quot;)) .setOutputCol(&quot;snomed_code&quot;) .setDistanceFunction(&quot;EUCLIDEAN&quot;) val nlpPipeline = new Pipeline().setStages(Array( documentAssembler, sentenceDetector, tokenizer, wordEmbeddings, nerJsl, nerJslConverter, chunk2doc, sbertEmbedder, snomedResolver )) val text = &quot;&quot;&quot;This is an 82-year-old male with a history of prior tobacco use, hypertension, chronic renal insufficiency, COPD, gastritis, and TIA. He initially presented to Braintree with a nonspecific ST-T abnormality and was transferred to St. Margaret’s Center. He underwent cardiac catheterization because of occlusion of the mid left anterior descending coronary artery lesion, which was complicated by hypotension and bradycardia. He required atropine, IV fluids, and dopamine, possibly secondary to a vagal reaction. He was subsequently transferred to the CCU for close monitoring. He was hemodynamically stable at the time of admission to the CCU.&quot;&quot;&quot; val df = Seq(text).toDF(&quot;text&quot;) val result = nlpPipeline.fit(df).transform(df) Results +--------------------------------------------------+-------------------------+-----------+--------------------------------------------------+--------------------------------------------------+--------------------------------------------------+--------------------------------------------------+ | chunk| label|snomed_code| resolution| all_codes| all_resolutions| all_aux_labels| +--------------------------------------------------+-------------------------+-----------+--------------------------------------------------+--------------------------------------------------+--------------------------------------------------+--------------------------------------------------+ | tobacco| Smoking| 57264008| tobacco|57264008:::102407002:::39953003:::110483000:::2...|tobacco:::tobacco smoke:::tobacco - substance::...|Organism:::Substance:::Substance:::Clinical Fin...| | hypertension| Hypertension| 38341003| hypertension|38341003:::59621000:::270440008:::31992008:::16...|hypertension:::essential hypertension:::hyperte...|Clinical Finding:::Clinical Finding:::Clinical ...| | chronic renal insufficiency| Kidney_Disease| 723190009| chronic renal insufficiency|723190009:::709044004:::90688005:::425369003:::...|chronic renal insufficiency:::chronic renal imp...|Clinical Finding:::Clinical Finding:::Clinical ...| | COPD|Disease_Syndrome_Disorder| 13645005| copd|13645005:::414400006:::223821008:::60349006:::2...|copd:::coning:::cos:::ump:::ling:::chive:::caev...|Clinical Finding:::Clinical Finding:::Location:...| | gastritis|Disease_Syndrome_Disorder| 4556007| gastritis|4556007:::235656001:::1086791000119100:::425410...|gastritis:::chemical gastritis:::erosive gastri...|Clinical Finding:::Clinical Finding:::Clinical ...| | TIA| Cerebrovascular_Disease| 266257000| tia|266257000:::31597007:::160363004:::396145008:::...|tia:::tui:::fh: tia:::tidac:::tu:::trna:::timor...|Clinical Finding:::Organism:::Context-dependent...| | nonspecific| Modifier| 10003008| non-specific|10003008:::261992003:::863956004:::300844001:::...|non-specific:::non-biological:::non-sterile:::n...|Qualifier Value:::Qualifier Value:::Qualifier V...| | ST-T abnormality| EKG_Findings| 428750005| nonspecific st-t abnormality|428750005:::399504009:::55930002:::455721000124...|nonspecific st-t abnormality:::clinical t categ...|Clinical Finding:::Observable Entity:::Clinical...| | cardiac catheterization| Procedure| 41976001| cardiac catheterization|41976001:::705923009:::721968000:::467735004:::...|cardiac catheterization:::cardiac catheter:::ca...|Procedure:::Physical Object:::Record Artifact::...| |occlusion of the mid left anterior descending c...| Symptom| 840313007|occlusion of mid left anterior descending coron...|840313007:::44771000087108:::840315000:::447810...|occlusion of mid left anterior descending coron...|Clinical Finding:::No_Concept_Class:::Clinical ...| | hypotension| VS_Finding| 45007003| hypotension|45007003:::241727003:::19721008:::28651003:::67...|hypotension:::induced hypotension:::globe hypot...|Clinical Finding:::Procedure:::Clinical Finding...| | bradycardia| VS_Finding| 48867003| bradycardia|48867003:::49710005:::44273001:::42177007:::426...|bradycardia:::sinus bradycardia:::reflex bradyc...|Clinical Finding:::Clinical Finding:::Clinical ...| | atropine| Drug_Ingredient| 73949004| atropine|73949004:::105075009:::349945006:::410493009:::...|atropine:::atropine measurement:::oral atropine...|Pharma/Biol Product:::Procedure:::Clinical Drug...| | fluids| Drug_Ingredient| 255765007| fluid|255765007:::246498002:::258442002:::251851008::...|fluid:::fluid used:::fluid sample:::fluid input...|Qualifier Value:::Attribute:::Specimen:::Observ...| | dopamine| Drug_Ingredient| 59187003| dopamine|59187003:::412383006:::37484001:::32779004:::41...|dopamine:::dopamine agent:::dopamine receptor::...|Pharma/Biol Product:::Substance:::Substance:::P...| | vagal reaction| Symptom| 128968000| vagal stimulation|128968000:::398665005:::106160007:::88882009:::...|vagal stimulation:::vaso vagal episode:::vagus ...|Procedure:::Clinical Finding:::Clinical Finding...| +--------------------------------------------------+-------------------------+-----------+--------------------------------------------------+--------------------------------------------------+--------------------------------------------------+--------------------------------------------------+ Model Information Model Name: sbiobertresolve_snomed_findings_aux_concepts Compatibility: Healthcare NLP 5.3.0+ License: Licensed Edition: Official Input Labels: [sentence_embeddings] Output Labels: [snomed_code] Language: en Size: 1.5 GB Case sensitive: false</summary></entry><entry><title type="html">Pipeline for Snomed Concept, Body Structure Version</title><link href="/2024/03/05/snomed_body_structure_resolver_pipeline_en.html" rel="alternate" type="text/html" title="Pipeline for Snomed Concept, Body Structure Version" /><published>2024-03-05T00:00:00+00:00</published><updated>2024-03-05T00:00:00+00:00</updated><id>/2024/03/05/snomed_body_structure_resolver_pipeline_en</id><content type="html" xml:base="/2024/03/05/snomed_body_structure_resolver_pipeline_en.html">## Description

This pipeline extracts anatomical structure entities and maps them to their corresponding SNOMED (body structure version) codes using `sbiobert_base_cased_mli` Sentence Bert Embeddings.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/snomed_body_structure_resolver_pipeline_en_5.3.0_3.2_1709669263188.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/snomed_body_structure_resolver_pipeline_en_5.3.0_3.2_1709669263188.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python

from sparknlp.pretrained import PretrainedPipeline

snomed_pipeline = PretrainedPipeline(&quot;snomed_body_structure_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

result = snomed_pipeline.annotate(&quot;&quot;&quot;The patient is a 30-year-old female with a long history of insulin-dependent diabetes, type 2; coronary artery disease; chronic renal insufficiency; peripheral vascular disease, also secondary to diabetes; who was originally admitted to an outside hospital for what appeared to be acute paraplegia, lower extremities. She did receive a course of Bactrim for 14 days for UTI.&quot;&quot;&quot;)

```
```scala

import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline

val snomed_pipeline = PretrainedPipeline(&quot;snomed_body_structure_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

val result = snomed_pipeline.annotate(&quot;&quot;&quot;The patient is a 30-year-old female with a long history of insulin-dependent diabetes, type 2; coronary artery disease; chronic renal insufficiency; peripheral vascular disease, also secondary to diabetes; who was originally admitted to an outside hospital for what appeared to be acute paraplegia, lower extremities. She did receive a course of Bactrim for 14 days for UTI.&quot;&quot;&quot;)

```
&lt;/div&gt;

## Results

```bash

+-------------------+-----+---+---------+-----------+--------------------------+------------------------------------------------------------+------------------------------------------------------------+
|              chunk|begin|end|ner_label|snomed_code|                resolution|                                           all_k_resolutions|                                                 all_k_codes|
+-------------------+-----+---+---------+-----------+--------------------------+------------------------------------------------------------+------------------------------------------------------------+
|    coronary artery|   95|109| BodyPart|  181294004|           coronary artery|coronary artery:::coronary artery part:::segment of coron...|181294004:::119204004:::360487004:::55537005:::41801008::...|
|              renal|  128|132| BodyPart|   64033007|           renal structure|renal structure:::renal area:::renal segment:::renal vess...|64033007:::243968009:::84924000:::303402001:::361332007::...|
|peripheral vascular|  149|167| BodyPart|   51833009|peripheral vascular system|peripheral vascular system:::peripheral artery:::peripher...|51833009:::840581000:::3058005:::300054001:::281828002:::...|
|  lower extremities|  299|315| BodyPart|   61685007|           lower extremity|lower extremity:::lower extremity region:::lower extremit...|61685007:::127951001:::120575009:::182281004:::276744008:...|
+-------------------+-----+---+---------+-----------+--------------------------+------------------------------------------------------------+------------------------------------------------------------+


```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|snomed_body_structure_resolver_pipeline|
|Type:|pipeline|
|Compatibility:|Healthcare NLP 5.3.0+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|2.4 GB|

## Included Models

- DocumentAssembler
- SentenceDetectorDLModel
- TokenizerModel
- WordEmbeddingsModel
- MedicalNerModel
- NerConverterInternalModel
- MedicalNerModel
- NerConverterInternalModel
- MedicalNerModel
- NerConverterInternalModel
- ChunkMergeModel
- Chunk2Doc
- BertSentenceEmbeddings
- SentenceEntityResolverModel</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="en" /><category term="snomed" /><category term="pipeline" /><category term="resolver" /><summary type="html">Description This pipeline extracts anatomical structure entities and maps them to their corresponding SNOMED (body structure version) codes using sbiobert_base_cased_mli Sentence Bert Embeddings. Live Demo Open in Colab Download Copy S3 URI How to use PythonJSLScalaNLU from sparknlp.pretrained import PretrainedPipeline snomed_pipeline = PretrainedPipeline(&quot;snomed_body_structure_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) result = snomed_pipeline.annotate(&quot;&quot;&quot;The patient is a 30-year-old female with a long history of insulin-dependent diabetes, type 2; coronary artery disease; chronic renal insufficiency; peripheral vascular disease, also secondary to diabetes; who was originally admitted to an outside hospital for what appeared to be acute paraplegia, lower extremities. She did receive a course of Bactrim for 14 days for UTI.&quot;&quot;&quot;) import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline val snomed_pipeline = PretrainedPipeline(&quot;snomed_body_structure_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) val result = snomed_pipeline.annotate(&quot;&quot;&quot;The patient is a 30-year-old female with a long history of insulin-dependent diabetes, type 2; coronary artery disease; chronic renal insufficiency; peripheral vascular disease, also secondary to diabetes; who was originally admitted to an outside hospital for what appeared to be acute paraplegia, lower extremities. She did receive a course of Bactrim for 14 days for UTI.&quot;&quot;&quot;) Results +-------------------+-----+---+---------+-----------+--------------------------+------------------------------------------------------------+------------------------------------------------------------+ | chunk|begin|end|ner_label|snomed_code| resolution| all_k_resolutions| all_k_codes| +-------------------+-----+---+---------+-----------+--------------------------+------------------------------------------------------------+------------------------------------------------------------+ | coronary artery| 95|109| BodyPart| 181294004| coronary artery|coronary artery:::coronary artery part:::segment of coron...|181294004:::119204004:::360487004:::55537005:::41801008::...| | renal| 128|132| BodyPart| 64033007| renal structure|renal structure:::renal area:::renal segment:::renal vess...|64033007:::243968009:::84924000:::303402001:::361332007::...| |peripheral vascular| 149|167| BodyPart| 51833009|peripheral vascular system|peripheral vascular system:::peripheral artery:::peripher...|51833009:::840581000:::3058005:::300054001:::281828002:::...| | lower extremities| 299|315| BodyPart| 61685007| lower extremity|lower extremity:::lower extremity region:::lower extremit...|61685007:::127951001:::120575009:::182281004:::276744008:...| +-------------------+-----+---+---------+-----------+--------------------------+------------------------------------------------------------+------------------------------------------------------------+ Model Information Model Name: snomed_body_structure_resolver_pipeline Type: pipeline Compatibility: Healthcare NLP 5.3.0+ License: Licensed Edition: Official Language: en Size: 2.4 GB Included Models DocumentAssembler SentenceDetectorDLModel TokenizerModel WordEmbeddingsModel MedicalNerModel NerConverterInternalModel MedicalNerModel NerConverterInternalModel MedicalNerModel NerConverterInternalModel ChunkMergeModel Chunk2Doc BertSentenceEmbeddings SentenceEntityResolverModel</summary></entry><entry><title type="html">Sentence Entity Resolver for SNOMED (sbiobertresolve_snomed_no_class)</title><link href="/2024/03/05/sbiobertresolve_snomed_no_class_en.html" rel="alternate" type="text/html" title="Sentence Entity Resolver for SNOMED (sbiobertresolve_snomed_no_class)" /><published>2024-03-05T00:00:00+00:00</published><updated>2024-03-05T00:00:00+00:00</updated><id>/2024/03/05/sbiobertresolve_snomed_no_class_en</id><content type="html" xml:base="/2024/03/05/sbiobertresolve_snomed_no_class_en.html">## Description

This model utilizes BERT sentence embeddings from `sbiobert_base_cased_mli` to map extracted medical entities (no concept class) to SNOMED codes.

## Predicted Entities



{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/sbiobertresolve_snomed_no_class_en_5.3.0_3.0_1709629048666.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/sbiobertresolve_snomed_no_class_en_5.3.0_3.0_1709629048666.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
  .setInputCol(&quot;text&quot;)\
  .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
  .setInputCols([&quot;document&quot;])\
  .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer()\
  .setInputCols([&quot;sentence&quot;])\
  .setOutputCol(&quot;token&quot;)\

word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
  .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
  .setOutputCol(&quot;embeddings&quot;)

ner_jsl = MedicalNerModel.pretrained(&quot;ner_jsl&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
  .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
  .setOutputCol(&quot;ner_jsl&quot;)

ner_jsl_converter = NerConverterInternal() \
  .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner_jsl&quot;]) \
  .setOutputCol(&quot;ner_chunk&quot;)\
  .setWhiteList([&quot;Drug&quot;,
                 &quot;Drug_Ingredient&quot;,
                 &quot;Drug_BrandName&quot;,
                 &quot;Disease_Syndrome_Disorder&quot;,
                 &quot;Kidney_Disease&quot;,
                 &quot;Heart_Disease&quot;,
                 &quot;Diabetes&quot;,
                 &quot;Oncological&quot;])\

chunk2doc = Chunk2Doc()\
  .setInputCols(&quot;ner_chunk&quot;)\
  .setOutputCol(&quot;ner_chunk_doc&quot;)

sbert_embeddings = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\
  .setInputCols([&quot;ner_chunk_doc&quot;])\
  .setOutputCol(&quot;sbert_embeddings&quot;)\
  .setCaseSensitive(False)

snomed_resolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_snomed_no_class&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
  .setInputCols([&quot;sbert_embeddings&quot;]) \
  .setOutputCol(&quot;snomed_code&quot;)\
  .setDistanceFunction(&quot;EUCLIDEAN&quot;)

snomed_pipeline = Pipeline(stages = [
    document_assembler,
    sentence_detector,
    tokenizer,
    word_embeddings,
    ner_jsl,
    ner_jsl_converter,
    chunk2doc,
    sbert_embeddings,
    snomed_resolver
])

data = spark.createDataFrame([[&quot;&quot;&quot;John's doctor prescribed ofloxacin for his secondary conjunctivitis, cefixime for his cystic urethritis, ibuprofen for his inflammation, and cilnidipine for his hypertension on 2023-12-01.&quot;&quot;&quot;]]).toDF(&quot;text&quot;)

model = snomed_pipeline.fit(data)
result = model.transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)

val sentenceDetectorDL = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(Array(&quot;document&quot;))
    .setOutputCol(&quot;sentence&quot;)

val tokenizer = new Tokenizer()
    .setInputCols(Array(&quot;sentence&quot;))
    .setOutputCol(&quot;token&quot;)

val word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;,&quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)

val ner_jsl = MedicalNerModel.pretrained(&quot;ner_jsl&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;,&quot;token&quot;,&quot;embeddings&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

val ner_jsl_converter = new NerConverter()
    .setInputCols(Array(&quot;sentence&quot;,&quot;token&quot;,&quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)
    .setWhiteList(Array(&quot;Drug&quot;,
                       &quot;Drug_Ingredient&quot;,
                       &quot;Drug_BrandName&quot;,
                       &quot;Disease_Syndrome_Disorder&quot;,
                       &quot;Kidney_Disease&quot;,
                       &quot;Heart_Disease&quot;,
                       &quot;Diabetes&quot;,
                       &quot;Oncological&quot;))

val chunk2doc = new Chunk2Doc()
    .setInputCols(&quot;ner_chunk&quot;)
    .setOutputCol(&quot;ner_chunk_doc&quot;)

val sbert_embedder = BertSentenceEmbeddings
    .pretrained(&quot;sbiobert_base_cased_mli&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(Array(&quot;ner_chunk_doc&quot;))
    .setOutputCol(&quot;sbert_embeddings&quot;)
    .setCaseSensitive(False)

val resolver = SentenceEntityResolverModel
    .pretrained(&quot;sbiobertresolve_snomed_no_class&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;ner_chunk&quot;, &quot;sbert_embeddings&quot;))
    .setOutputCol(&quot;resolution&quot;)
    .setDistanceFunction(&quot;EUCLIDEAN&quot;)

val nlpPipeline = new Pipeline().setStages(Array(
    document_assembler,
    sentence_detector,
    tokenizer,
    word_embeddings,
    ner_jsl,
    ner_jsl_converter,
    chunk2doc,
    sbert_embeddings,
    snomed_resolver
    ))

val data = Seq(&quot;John's doctor prescribed ofloxacin for his secondary conjunctivitis, cefixime for his cystic urethritis, ibuprofen for his inflammation, and cilnidipine for his hypertension on 2023-12-01.&quot;) .toDF(&quot;text&quot;)

val model = snomed_pipeline.fit(data)

val result = model.transform(data)
```
&lt;/div&gt;

## Results

```bash
+-----------------+-------------------------+-----------+---------------------------------------------+--------------------------------------------------+--------------------------------------------------+
|            chunk|                    label|snomed_code|                                   resolution|                                         all_codes|                                   all_resolutions|
+-----------------+-------------------------+-----------+---------------------------------------------+--------------------------------------------------+--------------------------------------------------+
|        ofloxacin|          Drug_Ingredient| 1252718003|   cefixime- and ofloxacin-containing product|1252718003:::1172759009:::1162766006:::11725730...|cefixime- and ofloxacin-containing product:::of...|
|   conjunctivitis|Disease_Syndrome_Disorder| 1217666006|                     secondary conjunctivitis|1217666006:::15680761000119102:::1177057009:::1...|secondary conjunctivitis:::left infectious conj...|
|         cefixime|          Drug_Ingredient| 1217570005|                          cefixime trihydrate|1217570005:::1162766006:::1252718003:::50020121...|cefixime trihydrate:::fropenem:::cefixime- and ...|
|cystic urethritis|Disease_Syndrome_Disorder| 1259233009|                            cystic urethritis|1259233009:::1259241009:::1259225008:::11792350...|cystic urethritis:::stricture of membranous ure...|
|        ibuprofen|          Drug_Ingredient| 1172854008|ibuprofen- and paracetamol-containing product|1172854008:::1269077005:::1217598008:::11728570...|ibuprofen- and paracetamol-containing product::...|
|      cilnidipine|          Drug_Ingredient| 1177123004|                                  cilnidipine|1177123004:::1179035008:::1217308000:::11936630...|cilnidipine:::cilnidipine-containing product:::...|
+-----------------+-------------------------+-----------+---------------------------------------------+--------------------------------------------------+--------------------------------------------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|sbiobertresolve_snomed_no_class|
|Compatibility:|Healthcare NLP 5.3.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence_embeddings]|
|Output Labels:|[snomed_code]|
|Language:|en|
|Size:|104.0 MB|
|Case sensitive:|false|

## References

This model is trained with the augmented version of NIH September 2023 SNOMED CT United States (US) Edition.</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="en" /><category term="resolver" /><category term="snomed" /><category term="no_class" /><summary type="html">Description This model utilizes BERT sentence embeddings from sbiobert_base_cased_mli to map extracted medical entities (no concept class) to SNOMED codes. Predicted Entities Live Demo Open in Colab Download Copy S3 URI How to use PythonJSLScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer()\ .setInputCols([&quot;sentence&quot;])\ .setOutputCol(&quot;token&quot;)\ word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) ner_jsl = MedicalNerModel.pretrained(&quot;ner_jsl&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner_jsl&quot;) ner_jsl_converter = NerConverterInternal() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner_jsl&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;)\ .setWhiteList([&quot;Drug&quot;, &quot;Drug_Ingredient&quot;, &quot;Drug_BrandName&quot;, &quot;Disease_Syndrome_Disorder&quot;, &quot;Kidney_Disease&quot;, &quot;Heart_Disease&quot;, &quot;Diabetes&quot;, &quot;Oncological&quot;])\ chunk2doc = Chunk2Doc()\ .setInputCols(&quot;ner_chunk&quot;)\ .setOutputCol(&quot;ner_chunk_doc&quot;) sbert_embeddings = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\ .setInputCols([&quot;ner_chunk_doc&quot;])\ .setOutputCol(&quot;sbert_embeddings&quot;)\ .setCaseSensitive(False) snomed_resolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_snomed_no_class&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sbert_embeddings&quot;]) \ .setOutputCol(&quot;snomed_code&quot;)\ .setDistanceFunction(&quot;EUCLIDEAN&quot;) snomed_pipeline = Pipeline(stages = [ document_assembler, sentence_detector, tokenizer, word_embeddings, ner_jsl, ner_jsl_converter, chunk2doc, sbert_embeddings, snomed_resolver ]) data = spark.createDataFrame([[&quot;&quot;&quot;John's doctor prescribed ofloxacin for his secondary conjunctivitis, cefixime for his cystic urethritis, ibuprofen for his inflammation, and cilnidipine for his hypertension on 2023-12-01.&quot;&quot;&quot;]]).toDF(&quot;text&quot;) model = snomed_pipeline.fit(data) result = model.transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentenceDetectorDL = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(Array(&quot;sentence&quot;)) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;,&quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner_jsl = MedicalNerModel.pretrained(&quot;ner_jsl&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;,&quot;token&quot;,&quot;embeddings&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val ner_jsl_converter = new NerConverter() .setInputCols(Array(&quot;sentence&quot;,&quot;token&quot;,&quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) .setWhiteList(Array(&quot;Drug&quot;, &quot;Drug_Ingredient&quot;, &quot;Drug_BrandName&quot;, &quot;Disease_Syndrome_Disorder&quot;, &quot;Kidney_Disease&quot;, &quot;Heart_Disease&quot;, &quot;Diabetes&quot;, &quot;Oncological&quot;)) val chunk2doc = new Chunk2Doc() .setInputCols(&quot;ner_chunk&quot;) .setOutputCol(&quot;ner_chunk_doc&quot;) val sbert_embedder = BertSentenceEmbeddings .pretrained(&quot;sbiobert_base_cased_mli&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(Array(&quot;ner_chunk_doc&quot;)) .setOutputCol(&quot;sbert_embeddings&quot;) .setCaseSensitive(False) val resolver = SentenceEntityResolverModel .pretrained(&quot;sbiobertresolve_snomed_no_class&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;ner_chunk&quot;, &quot;sbert_embeddings&quot;)) .setOutputCol(&quot;resolution&quot;) .setDistanceFunction(&quot;EUCLIDEAN&quot;) val nlpPipeline = new Pipeline().setStages(Array( document_assembler, sentence_detector, tokenizer, word_embeddings, ner_jsl, ner_jsl_converter, chunk2doc, sbert_embeddings, snomed_resolver )) val data = Seq(&quot;John's doctor prescribed ofloxacin for his secondary conjunctivitis, cefixime for his cystic urethritis, ibuprofen for his inflammation, and cilnidipine for his hypertension on 2023-12-01.&quot;) .toDF(&quot;text&quot;) val model = snomed_pipeline.fit(data) val result = model.transform(data) Results +-----------------+-------------------------+-----------+---------------------------------------------+--------------------------------------------------+--------------------------------------------------+ | chunk| label|snomed_code| resolution| all_codes| all_resolutions| +-----------------+-------------------------+-----------+---------------------------------------------+--------------------------------------------------+--------------------------------------------------+ | ofloxacin| Drug_Ingredient| 1252718003| cefixime- and ofloxacin-containing product|1252718003:::1172759009:::1162766006:::11725730...|cefixime- and ofloxacin-containing product:::of...| | conjunctivitis|Disease_Syndrome_Disorder| 1217666006| secondary conjunctivitis|1217666006:::15680761000119102:::1177057009:::1...|secondary conjunctivitis:::left infectious conj...| | cefixime| Drug_Ingredient| 1217570005| cefixime trihydrate|1217570005:::1162766006:::1252718003:::50020121...|cefixime trihydrate:::fropenem:::cefixime- and ...| |cystic urethritis|Disease_Syndrome_Disorder| 1259233009| cystic urethritis|1259233009:::1259241009:::1259225008:::11792350...|cystic urethritis:::stricture of membranous ure...| | ibuprofen| Drug_Ingredient| 1172854008|ibuprofen- and paracetamol-containing product|1172854008:::1269077005:::1217598008:::11728570...|ibuprofen- and paracetamol-containing product::...| | cilnidipine| Drug_Ingredient| 1177123004| cilnidipine|1177123004:::1179035008:::1217308000:::11936630...|cilnidipine:::cilnidipine-containing product:::...| +-----------------+-------------------------+-----------+---------------------------------------------+--------------------------------------------------+--------------------------------------------------+ Model Information Model Name: sbiobertresolve_snomed_no_class Compatibility: Healthcare NLP 5.3.0+ License: Licensed Edition: Official Input Labels: [sentence_embeddings] Output Labels: [snomed_code] Language: en Size: 104.0 MB Case sensitive: false References This model is trained with the augmented version of NIH September 2023 SNOMED CT United States (US) Edition.</summary></entry><entry><title type="html">Pipeline for Snomed Concept, Body Structure Version</title><link href="/2024/03/05/snomed_body_structure_resolver_pipeline_en.html" rel="alternate" type="text/html" title="Pipeline for Snomed Concept, Body Structure Version" /><published>2024-03-05T00:00:00+00:00</published><updated>2024-03-05T00:00:00+00:00</updated><id>/2024/03/05/snomed_body_structure_resolver_pipeline_en</id><content type="html" xml:base="/2024/03/05/snomed_body_structure_resolver_pipeline_en.html">## Description

This pipeline extracts anatomical structure entities and maps them to their corresponding SNOMED (body structure version) codes using `sbiobert_base_cased_mli` Sentence Bert Embeddings.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/snomed_body_structure_resolver_pipeline_en_5.3.0_3.4_1709670103701.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/snomed_body_structure_resolver_pipeline_en_5.3.0_3.4_1709670103701.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python

from sparknlp.pretrained import PretrainedPipeline

snomed_pipeline = PretrainedPipeline(&quot;snomed_body_structure_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

result = snomed_pipeline.annotate(&quot;&quot;&quot;The patient is a 30-year-old female with a long history of insulin-dependent diabetes, type 2; coronary artery disease; chronic renal insufficiency; peripheral vascular disease, also secondary to diabetes; who was originally admitted to an outside hospital for what appeared to be acute paraplegia, lower extremities. She did receive a course of Bactrim for 14 days for UTI.&quot;&quot;&quot;)

```
```scala

import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline

val snomed_pipeline = PretrainedPipeline(&quot;snomed_body_structure_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

val result = snomed_pipeline.annotate(&quot;&quot;&quot;The patient is a 30-year-old female with a long history of insulin-dependent diabetes, type 2; coronary artery disease; chronic renal insufficiency; peripheral vascular disease, also secondary to diabetes; who was originally admitted to an outside hospital for what appeared to be acute paraplegia, lower extremities. She did receive a course of Bactrim for 14 days for UTI.&quot;&quot;&quot;)

```
&lt;/div&gt;

## Results

```bash

+-------------------+-----+---+---------+-----------+--------------------------+------------------------------------------------------------+------------------------------------------------------------+
|              chunk|begin|end|ner_label|snomed_code|                resolution|                                           all_k_resolutions|                                                 all_k_codes|
+-------------------+-----+---+---------+-----------+--------------------------+------------------------------------------------------------+------------------------------------------------------------+
|    coronary artery|   95|109| BodyPart|  181294004|           coronary artery|coronary artery:::coronary artery part:::segment of coron...|181294004:::119204004:::360487004:::55537005:::41801008::...|
|              renal|  128|132| BodyPart|   64033007|           renal structure|renal structure:::renal area:::renal segment:::renal vess...|64033007:::243968009:::84924000:::303402001:::361332007::...|
|peripheral vascular|  149|167| BodyPart|   51833009|peripheral vascular system|peripheral vascular system:::peripheral artery:::peripher...|51833009:::840581000:::3058005:::300054001:::281828002:::...|
|  lower extremities|  299|315| BodyPart|   61685007|           lower extremity|lower extremity:::lower extremity region:::lower extremit...|61685007:::127951001:::120575009:::182281004:::276744008:...|
+-------------------+-----+---+---------+-----------+--------------------------+------------------------------------------------------------+------------------------------------------------------------+


```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|snomed_body_structure_resolver_pipeline|
|Type:|pipeline|
|Compatibility:|Healthcare NLP 5.3.0+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|2.4 GB|

## Included Models

- DocumentAssembler
- SentenceDetectorDLModel
- TokenizerModel
- WordEmbeddingsModel
- MedicalNerModel
- NerConverterInternalModel
- MedicalNerModel
- NerConverterInternalModel
- MedicalNerModel
- NerConverterInternalModel
- ChunkMergeModel
- Chunk2Doc
- BertSentenceEmbeddings
- SentenceEntityResolverModel</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="en" /><category term="snomed" /><category term="pipeline" /><category term="resolver" /><summary type="html">Description This pipeline extracts anatomical structure entities and maps them to their corresponding SNOMED (body structure version) codes using sbiobert_base_cased_mli Sentence Bert Embeddings. Live Demo Open in Colab Download Copy S3 URI How to use PythonJSLScalaNLU from sparknlp.pretrained import PretrainedPipeline snomed_pipeline = PretrainedPipeline(&quot;snomed_body_structure_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) result = snomed_pipeline.annotate(&quot;&quot;&quot;The patient is a 30-year-old female with a long history of insulin-dependent diabetes, type 2; coronary artery disease; chronic renal insufficiency; peripheral vascular disease, also secondary to diabetes; who was originally admitted to an outside hospital for what appeared to be acute paraplegia, lower extremities. She did receive a course of Bactrim for 14 days for UTI.&quot;&quot;&quot;) import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline val snomed_pipeline = PretrainedPipeline(&quot;snomed_body_structure_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) val result = snomed_pipeline.annotate(&quot;&quot;&quot;The patient is a 30-year-old female with a long history of insulin-dependent diabetes, type 2; coronary artery disease; chronic renal insufficiency; peripheral vascular disease, also secondary to diabetes; who was originally admitted to an outside hospital for what appeared to be acute paraplegia, lower extremities. She did receive a course of Bactrim for 14 days for UTI.&quot;&quot;&quot;) Results +-------------------+-----+---+---------+-----------+--------------------------+------------------------------------------------------------+------------------------------------------------------------+ | chunk|begin|end|ner_label|snomed_code| resolution| all_k_resolutions| all_k_codes| +-------------------+-----+---+---------+-----------+--------------------------+------------------------------------------------------------+------------------------------------------------------------+ | coronary artery| 95|109| BodyPart| 181294004| coronary artery|coronary artery:::coronary artery part:::segment of coron...|181294004:::119204004:::360487004:::55537005:::41801008::...| | renal| 128|132| BodyPart| 64033007| renal structure|renal structure:::renal area:::renal segment:::renal vess...|64033007:::243968009:::84924000:::303402001:::361332007::...| |peripheral vascular| 149|167| BodyPart| 51833009|peripheral vascular system|peripheral vascular system:::peripheral artery:::peripher...|51833009:::840581000:::3058005:::300054001:::281828002:::...| | lower extremities| 299|315| BodyPart| 61685007| lower extremity|lower extremity:::lower extremity region:::lower extremit...|61685007:::127951001:::120575009:::182281004:::276744008:...| +-------------------+-----+---+---------+-----------+--------------------------+------------------------------------------------------------+------------------------------------------------------------+ Model Information Model Name: snomed_body_structure_resolver_pipeline Type: pipeline Compatibility: Healthcare NLP 5.3.0+ License: Licensed Edition: Official Language: en Size: 2.4 GB Included Models DocumentAssembler SentenceDetectorDLModel TokenizerModel WordEmbeddingsModel MedicalNerModel NerConverterInternalModel MedicalNerModel NerConverterInternalModel MedicalNerModel NerConverterInternalModel ChunkMergeModel Chunk2Doc BertSentenceEmbeddings SentenceEntityResolverModel</summary></entry><entry><title type="html">Sentence Entity Resolver for SNOMED (sbiobertresolve_snomed_bodyStructure)</title><link href="/2024/03/04/sbiobertresolve_snomed_bodyStructure_en.html" rel="alternate" type="text/html" title="Sentence Entity Resolver for SNOMED (sbiobertresolve_snomed_bodyStructure)" /><published>2024-03-04T00:00:00+00:00</published><updated>2024-03-04T00:00:00+00:00</updated><id>/2024/03/04/sbiobertresolve_snomed_bodyStructure_en</id><content type="html" xml:base="/2024/03/04/sbiobertresolve_snomed_bodyStructure_en.html">## Description

This model maps extracted medical (anatomical structure) entities to SNOMED codes (body structure version) using `sbiobert_base_cased_mli` BERT sentence embeddings

## Predicted Entities



{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/sbiobertresolve_snomed_bodyStructure_en_5.3.0_3.0_1709543980434.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/sbiobertresolve_snomed_bodyStructure_en_5.3.0_3.0_1709543980434.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer()\
    .setInputCols([&quot;sentence&quot;])\
    .setOutputCol(&quot;token&quot;)\

word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
    .setOutputCol(&quot;embeddings&quot;)

ner_jsl = MedicalNerModel.pretrained(&quot;ner_jsl&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner_jsl&quot;)

ner_jsl_converter = NerConverterInternal() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner_jsl&quot;]) \
    .setOutputCol(&quot;ner_jsl_chunk&quot;)\
    .setWhiteList([&quot;External_body_part_or_region&quot;, 
                   &quot;Internal_organ_or_component&quot;])\
    .setReplaceLabels({&quot;External_body_part_or_region&quot;: &quot;BodyPart&quot;, 
                       &quot;Internal_organ_or_component&quot;: &quot;BodyPart&quot; })

ner_anatomy = MedicalNerModel.pretrained(&quot;ner_anatomy_coarse&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner_anatomy&quot;)

ner_anatomy_converter = NerConverterInternal() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner_anatomy&quot;]) \
    .setOutputCol(&quot;ner_anatomy_chunk&quot;)\
    .setReplaceLabels({&quot;Anatomy&quot;: &quot;BodyPart&quot;})

ner_oncology_anatomy = MedicalNerModel.pretrained(&quot;ner_oncology_anatomy_general&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner_oncology_anatomy&quot;)

ner_oncology_anatomy_converter = NerConverterInternal() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner_oncology_anatomy&quot;]) \
    .setOutputCol(&quot;ner_oncology_anatomy_chunk&quot;)\
    .setReplaceLabels({&quot;Anatomical_Site&quot;: &quot;BodyPart&quot;})

chunk_merger = ChunkMergeApproach() \
    .setInputCols(&quot;ner_jsl_chunk&quot;, &quot;ner_anatomy_chunk&quot;, &quot;ner_oncology_anatomy_chunk&quot;) \
    .setOutputCol(&quot;ner_chunk&quot;) \

chunk2doc = Chunk2Doc()\
    .setInputCols(&quot;ner_chunk&quot;)\
    .setOutputCol(&quot;ner_chunk_doc&quot;)

sbert_embeddings = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\
    .setInputCols([&quot;ner_chunk_doc&quot;])\
    .setOutputCol(&quot;sbert_embeddings&quot;)\
    .setCaseSensitive(False)

snomed_resolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_snomed_bodyStructure&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sbert_embeddings&quot;]) \
    .setOutputCol(&quot;snomed_code&quot;)\

snomed_pipeline = Pipeline(stages = [
    document_assembler,
    sentence_detector,
    tokenizer,
    word_embeddings,
    ner_jsl,
    ner_jsl_converter,
    ner_anatomy,
    ner_anatomy_converter,
    ner_oncology_anatomy,
    ner_oncology_anatomy_converter,
    chunk_merger,
    chunk2doc,
    sbert_embeddings,
    snomed_resolver
])


data = spark.createDataFrame([[&quot;&quot;&quot;The patient is a 30-year-old female with a long history of insulin-dependent diabetes, type 2; coronary artery disease; chronic renal insufficiency; peripheral vascular disease, also secondary to diabetes; who was originally admitted to an outside hospital for what appeared to be acute paraplegia, lower extremities. She did receive a course of Bactrim for 14 days for UTI.&quot;&quot;&quot;]]).toDF(&quot;text&quot;)

model = snomed_pipeline.fit(data)
result = model.transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)

val sentenceDetectorDL = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(Array(&quot;document&quot;))
    .setOutputCol(&quot;sentence&quot;)

val tokenizer = new Tokenizer()
    .setInputCols(Array(&quot;sentence&quot;))
    .setOutputCol(&quot;token&quot;)

val word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;,&quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)

val ner_jsl = MedicalNerModel.pretrained(&quot;ner_jsl&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;,&quot;token&quot;,&quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)

val ner_jsl_converter = new NerConverter()
    .setInputCols(Array(&quot;sentence&quot;,&quot;token&quot;,&quot;ner&quot;))
    .setOutputCol(&quot;ner_jsl_chunk&quot;)
    .setWhiteList(Array(&quot;External_body_part_or_region&quot;, &quot;Internal_organ_or_component&quot;))
    .setReplaceLabels({&quot;Anatomical_Site&quot;: &quot;BodyPart&quot;})

val ner_anatomy = MedicalNerModel.pretrained(&quot;ner_anatomy_coarse&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;,&quot;token&quot;,&quot;embeddings&quot;))
    .setOutputCol(&quot;ner_anatomy&quot;)

val ner_anatomy_converter = new NerConverterInternal()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner_anatomy&quot;))
    .setOutputCol(&quot;ner_anatomy_chunk&quot;)
    .setReplaceLabels(Map{&quot;Anatomy&quot; -&gt; &quot;BodyPart&quot;})

val ner_oncology_anatomy = MedicalNerModel.pretrained(&quot;ner_oncology_anatomy_general&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;,&quot;token&quot;,&quot;embeddings&quot;))
    .setOutputCol(&quot;ner_oncology_anatomy&quot;)

val ner_oncology_anatomy_converter = new NerConverter()
    .setInputCols(Array(&quot;sentence&quot;,&quot;token&quot;,&quot;ner_oncology_anatomy&quot;))
    .setOutputCol(&quot;ner_oncology_anatomy_chunk&quot;)
    .setWhiteList(Array(&quot;Anatomical_Site&quot;))
    .setReplaceLabels(Map{&quot;Anatomical_Site&quot; -&gt; &quot;BodyPart&quot;})

val chunk_merger = ChunkMergeApproach() \
    .setInputCols(&quot;ner_jsl_chunk&quot;, &quot;ner_anatomy_chunk&quot;, &quot;ner_oncology_anatomy_chunk&quot;)
    .setOutputCol(&quot;ner_chunk&quot;)

val chunk2doc = new Chunk2Doc()
    .setInputCols(&quot;ner_chunk&quot;)
    .setOutputCol(&quot;ner_chunk_doc&quot;)

val sbert_embedder = BertSentenceEmbeddings
    .pretrained(&quot;sbiobert_base_cased_mli&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(Array(&quot;ner_chunk_doc&quot;))
    .setOutputCol(&quot;sbert_embeddings&quot;)
    .setCaseSensitive(False)

val resolver = SentenceEntityResolverModel
    .pretrained(&quot;sbiobertresolve_snomed_bodyStructure&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;ner_chunk&quot;, &quot;sbert_embeddings&quot;))
    .setOutputCol(&quot;resolution&quot;)
    .setDistanceFunction(&quot;EUCLIDEAN&quot;)

val nlpPipeline = new Pipeline().setStages(Array(
    document_assembler,
    sentence_detector,
    tokenizer,
    word_embeddings,
    ner_jsl,
    ner_jsl_converter,
    ner_anatomy,
    ner_anatomy_converter,
    ner_oncology_anatomy,
    ner_oncology_anatomy_converter,
    chunk_merger,
    chunk2doc,
    sbert_embeddings,
    snomed_resolver
    ))

val data = Seq(&quot;Medical professionals rushed in the bustling emergency room to attend to the patient with alarming symptoms.The attending physician immediately noted signs of respiratory distress, including stridor, a high-pitched sound indicative of upper respiratory tract obstruction.The patient, struggling to breathe, exhibited dyspnea, their chest heaving with each labored breath. Concern heightened when they began experiencing syncope, a sudden loss of consciousness likely stemming from inadequate oxygenation. Further examination revealed a respiratory tract hemorrhage.&quot;) .toDF(&quot;text&quot;)

val model = snomed_pipeline.fit(data)

val result = model.transform(data)
```
&lt;/div&gt;

## Results

```bash
+-------------------+----------------------------+-----------+--------------------------+--------------------------------------------------+--------------------------------------------------+
|              chunk|                       label|snomed_code|                resolution|                                         all_codes|                                   all_resolutions|
+-------------------+----------------------------+-----------+--------------------------+--------------------------------------------------+--------------------------------------------------+
|    coronary artery|                     Anatomy|  181294004|           coronary artery|181294004:::119204004:::360487004:::55537005:::...|coronary artery:::coronary artery part:::segmen...|
|              renal|                     Anatomy|   64033007|           renal structure|64033007:::243968009:::84924000:::303402001:::3...|renal structure:::renal area:::renal segment:::...|
|peripheral vascular|                     Anatomy|   51833009|peripheral vascular system|51833009:::840581000:::3058005:::300054001:::28...|peripheral vascular system:::peripheral artery:...|
|  lower extremities|External_body_part_or_region|   61685007|           lower extremity|61685007:::127951001:::120575009:::182281004:::...|lower extremity:::lower extremity region:::lowe...|
+-------------------+----------------------------+-----------+--------------------------+--------------------------------------------------+--------------------------------------------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|sbiobertresolve_snomed_bodyStructure|
|Compatibility:|Healthcare NLP 5.3.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence_embeddings]|
|Output Labels:|[snomed_code]|
|Language:|en|
|Size:|197.9 MB|
|Case sensitive:|false|

## References

This model is trained with the augmented version of NIH September 2023 SNOMED CT United States (US) Edition.</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="en" /><category term="resolver" /><category term="snomed" /><category term="bodystructure" /><summary type="html">Description This model maps extracted medical (anatomical structure) entities to SNOMED codes (body structure version) using sbiobert_base_cased_mli BERT sentence embeddings Predicted Entities Live Demo Open in Colab Download Copy S3 URI How to use PythonJSLScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer()\ .setInputCols([&quot;sentence&quot;])\ .setOutputCol(&quot;token&quot;)\ word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) ner_jsl = MedicalNerModel.pretrained(&quot;ner_jsl&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner_jsl&quot;) ner_jsl_converter = NerConverterInternal() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner_jsl&quot;]) \ .setOutputCol(&quot;ner_jsl_chunk&quot;)\ .setWhiteList([&quot;External_body_part_or_region&quot;, &quot;Internal_organ_or_component&quot;])\ .setReplaceLabels({&quot;External_body_part_or_region&quot;: &quot;BodyPart&quot;, &quot;Internal_organ_or_component&quot;: &quot;BodyPart&quot; }) ner_anatomy = MedicalNerModel.pretrained(&quot;ner_anatomy_coarse&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner_anatomy&quot;) ner_anatomy_converter = NerConverterInternal() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner_anatomy&quot;]) \ .setOutputCol(&quot;ner_anatomy_chunk&quot;)\ .setReplaceLabels({&quot;Anatomy&quot;: &quot;BodyPart&quot;}) ner_oncology_anatomy = MedicalNerModel.pretrained(&quot;ner_oncology_anatomy_general&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner_oncology_anatomy&quot;) ner_oncology_anatomy_converter = NerConverterInternal() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner_oncology_anatomy&quot;]) \ .setOutputCol(&quot;ner_oncology_anatomy_chunk&quot;)\ .setReplaceLabels({&quot;Anatomical_Site&quot;: &quot;BodyPart&quot;}) chunk_merger = ChunkMergeApproach() \ .setInputCols(&quot;ner_jsl_chunk&quot;, &quot;ner_anatomy_chunk&quot;, &quot;ner_oncology_anatomy_chunk&quot;) \ .setOutputCol(&quot;ner_chunk&quot;) \ chunk2doc = Chunk2Doc()\ .setInputCols(&quot;ner_chunk&quot;)\ .setOutputCol(&quot;ner_chunk_doc&quot;) sbert_embeddings = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\ .setInputCols([&quot;ner_chunk_doc&quot;])\ .setOutputCol(&quot;sbert_embeddings&quot;)\ .setCaseSensitive(False) snomed_resolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_snomed_bodyStructure&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sbert_embeddings&quot;]) \ .setOutputCol(&quot;snomed_code&quot;)\ snomed_pipeline = Pipeline(stages = [ document_assembler, sentence_detector, tokenizer, word_embeddings, ner_jsl, ner_jsl_converter, ner_anatomy, ner_anatomy_converter, ner_oncology_anatomy, ner_oncology_anatomy_converter, chunk_merger, chunk2doc, sbert_embeddings, snomed_resolver ]) data = spark.createDataFrame([[&quot;&quot;&quot;The patient is a 30-year-old female with a long history of insulin-dependent diabetes, type 2; coronary artery disease; chronic renal insufficiency; peripheral vascular disease, also secondary to diabetes; who was originally admitted to an outside hospital for what appeared to be acute paraplegia, lower extremities. She did receive a course of Bactrim for 14 days for UTI.&quot;&quot;&quot;]]).toDF(&quot;text&quot;) model = snomed_pipeline.fit(data) result = model.transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentenceDetectorDL = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(Array(&quot;sentence&quot;)) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;,&quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner_jsl = MedicalNerModel.pretrained(&quot;ner_jsl&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;,&quot;token&quot;,&quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_jsl_converter = new NerConverter() .setInputCols(Array(&quot;sentence&quot;,&quot;token&quot;,&quot;ner&quot;)) .setOutputCol(&quot;ner_jsl_chunk&quot;) .setWhiteList(Array(&quot;External_body_part_or_region&quot;, &quot;Internal_organ_or_component&quot;)) .setReplaceLabels({&quot;Anatomical_Site&quot;: &quot;BodyPart&quot;}) val ner_anatomy = MedicalNerModel.pretrained(&quot;ner_anatomy_coarse&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;,&quot;token&quot;,&quot;embeddings&quot;)) .setOutputCol(&quot;ner_anatomy&quot;) val ner_anatomy_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner_anatomy&quot;)) .setOutputCol(&quot;ner_anatomy_chunk&quot;) .setReplaceLabels(Map{&quot;Anatomy&quot; -&amp;gt; &quot;BodyPart&quot;}) val ner_oncology_anatomy = MedicalNerModel.pretrained(&quot;ner_oncology_anatomy_general&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;,&quot;token&quot;,&quot;embeddings&quot;)) .setOutputCol(&quot;ner_oncology_anatomy&quot;) val ner_oncology_anatomy_converter = new NerConverter() .setInputCols(Array(&quot;sentence&quot;,&quot;token&quot;,&quot;ner_oncology_anatomy&quot;)) .setOutputCol(&quot;ner_oncology_anatomy_chunk&quot;) .setWhiteList(Array(&quot;Anatomical_Site&quot;)) .setReplaceLabels(Map{&quot;Anatomical_Site&quot; -&amp;gt; &quot;BodyPart&quot;}) val chunk_merger = ChunkMergeApproach() \ .setInputCols(&quot;ner_jsl_chunk&quot;, &quot;ner_anatomy_chunk&quot;, &quot;ner_oncology_anatomy_chunk&quot;) .setOutputCol(&quot;ner_chunk&quot;) val chunk2doc = new Chunk2Doc() .setInputCols(&quot;ner_chunk&quot;) .setOutputCol(&quot;ner_chunk_doc&quot;) val sbert_embedder = BertSentenceEmbeddings .pretrained(&quot;sbiobert_base_cased_mli&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(Array(&quot;ner_chunk_doc&quot;)) .setOutputCol(&quot;sbert_embeddings&quot;) .setCaseSensitive(False) val resolver = SentenceEntityResolverModel .pretrained(&quot;sbiobertresolve_snomed_bodyStructure&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;ner_chunk&quot;, &quot;sbert_embeddings&quot;)) .setOutputCol(&quot;resolution&quot;) .setDistanceFunction(&quot;EUCLIDEAN&quot;) val nlpPipeline = new Pipeline().setStages(Array( document_assembler, sentence_detector, tokenizer, word_embeddings, ner_jsl, ner_jsl_converter, ner_anatomy, ner_anatomy_converter, ner_oncology_anatomy, ner_oncology_anatomy_converter, chunk_merger, chunk2doc, sbert_embeddings, snomed_resolver )) val data = Seq(&quot;Medical professionals rushed in the bustling emergency room to attend to the patient with alarming symptoms.The attending physician immediately noted signs of respiratory distress, including stridor, a high-pitched sound indicative of upper respiratory tract obstruction.The patient, struggling to breathe, exhibited dyspnea, their chest heaving with each labored breath. Concern heightened when they began experiencing syncope, a sudden loss of consciousness likely stemming from inadequate oxygenation. Further examination revealed a respiratory tract hemorrhage.&quot;) .toDF(&quot;text&quot;) val model = snomed_pipeline.fit(data) val result = model.transform(data) Results +-------------------+----------------------------+-----------+--------------------------+--------------------------------------------------+--------------------------------------------------+ | chunk| label|snomed_code| resolution| all_codes| all_resolutions| +-------------------+----------------------------+-----------+--------------------------+--------------------------------------------------+--------------------------------------------------+ | coronary artery| Anatomy| 181294004| coronary artery|181294004:::119204004:::360487004:::55537005:::...|coronary artery:::coronary artery part:::segmen...| | renal| Anatomy| 64033007| renal structure|64033007:::243968009:::84924000:::303402001:::3...|renal structure:::renal area:::renal segment:::...| |peripheral vascular| Anatomy| 51833009|peripheral vascular system|51833009:::840581000:::3058005:::300054001:::28...|peripheral vascular system:::peripheral artery:...| | lower extremities|External_body_part_or_region| 61685007| lower extremity|61685007:::127951001:::120575009:::182281004:::...|lower extremity:::lower extremity region:::lowe...| +-------------------+----------------------------+-----------+--------------------------+--------------------------------------------------+--------------------------------------------------+ Model Information Model Name: sbiobertresolve_snomed_bodyStructure Compatibility: Healthcare NLP 5.3.0+ License: Licensed Edition: Official Input Labels: [sentence_embeddings] Output Labels: [snomed_code] Language: en Size: 197.9 MB Case sensitive: false References This model is trained with the augmented version of NIH September 2023 SNOMED CT United States (US) Edition.</summary></entry><entry><title type="html">Sentence Entity Resolver for SNOMED (sbiobertresolve_snomed_conditions)</title><link href="/2024/03/04/sbiobertresolve_snomed_conditions_en.html" rel="alternate" type="text/html" title="Sentence Entity Resolver for SNOMED (sbiobertresolve_snomed_conditions)" /><published>2024-03-04T00:00:00+00:00</published><updated>2024-03-04T00:00:00+00:00</updated><id>/2024/03/04/sbiobertresolve_snomed_conditions_en</id><content type="html" xml:base="/2024/03/04/sbiobertresolve_snomed_conditions_en.html">## Description

This model maps clinical conditions to their corresponding SNOMED (domain: Conditions) codes using `sbiobert_base_cased_mli` Sentence Bert Embeddings.

## Predicted Entities



{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/sbiobertresolve_snomed_conditions_en_5.3.0_3.0_1709541581789.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/sbiobertresolve_snomed_conditions_en_5.3.0_3.0_1709541581789.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentenceDetectorDL = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer()\
    .setInputCols([&quot;sentence&quot;])\
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
    .setOutputCol(&quot;embeddings&quot;)

ner_jsl = MedicalNerModel.pretrained(&quot;ner_jsl&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\
    .setOutputCol(&quot;ner&quot;)\

ner_jsl_converter = NerConverterInternal()\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\
    .setOutputCol(&quot;ner_chunk&quot;)\
    .setWhiteList([&quot;Kidney_Disease&quot;, &quot;Cerebrovascular_Disease&quot;, &quot;Heart_Disease&quot;,&quot;Disease_Syndrome_Disorder&quot;,
                  &quot;ImagingFindings&quot;, &quot;Symptom&quot;, &quot;VS_Finding&quot;,&quot;EKG_Findings&quot;, &quot;Communicable_Disease&quot;,&quot;Pregnancy&quot;,
                  &quot;Obesity&quot;,&quot;Hypertension&quot;,&quot;Overweight&quot;,&quot;Hyperlipidemia&quot;,&quot;Triglycerides&quot;,&quot;Diabetes&quot;,&quot;Oncological&quot;,
                  &quot;Psychological_Condition&quot;,&quot;ImagingFindings&quot;,&quot;Injury_or_Poisoning&quot;])\

c2doc = Chunk2Doc()\
    .setInputCols(&quot;ner_chunk&quot;)\
    .setOutputCol(&quot;ner_chunk_doc&quot;)

sbert_embedder = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;ner_chunk_doc&quot;])\
    .setOutputCol(&quot;sentence_embeddings&quot;)\
    .setCaseSensitive(False)

resolver = SentenceEntityResolverModel\
    .pretrained(&quot;sbiobertresolve_snomed_conditions&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;ner_chunk&quot;, &quot;sbert_embeddings&quot;]) \
    .setOutputCol(&quot;resolution&quot;)\
    .setDistanceFunction(&quot;EUCLIDEAN&quot;)

resolver_pipeline = Pipeline(
    stages = [
    document_assembler,
    sentenceDetectorDL,
    tokenizer,
    word_embeddings,
    ner_jsl,
    ner_jsl_converter,
    c2doc,
    sbert_embedder,
    resolver
    ])


text = [[&quot;&quot;&quot;Medical professionals rushed in the bustling emergency room to attend to the patient with alarming symptoms.
            The attending physician immediately noted signs of respiratory distress, including stridor, a high-pitched sound indicative of upper respiratory tract obstruction.
            The patient, struggling to breathe, exhibited dyspnea. Concern heightened when they began experiencing syncope,
            a sudden loss of consciousness likely stemming from inadequate oxygenation. Further examination revealed a respiratory tract hemorrhage.&quot;&quot;&quot;]]


data= spark.createDataFrame(text).toDF('text')
model = resolver_pipeline.fit(data)
result = model.transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)

val sentenceDetectorDL = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(Array(&quot;document&quot;))
    .setOutputCol(&quot;sentence&quot;)

val tokenizer = new Tokenizer()
    .setInputCols(Array(&quot;sentence&quot;))
    .setOutputCol(&quot;token&quot;)

val word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;,&quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)

val ner_jsl = MedicalNerModel.pretrained(&quot;ner_jsl&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;,&quot;token&quot;,&quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)

val ner_converter = new NerConverter()
    .setInputCols(Array(&quot;sentence&quot;,&quot;token&quot;,&quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)
    .setWhiteList(Array(&quot;Kidney_Disease&quot;, &quot;Cerebrovascular_Disease&quot;, &quot;Heart_Disease&quot;,&quot;Disease_Syndrome_Disorder&quot;,
                  &quot;ImagingFindings&quot;, &quot;Symptom&quot;, &quot;VS_Finding&quot;,&quot;EKG_Findings&quot;, &quot;Communicable_Disease&quot;,&quot;Pregnancy&quot;,
                  &quot;Obesity&quot;,&quot;Hypertension&quot;,&quot;Overweight&quot;,&quot;Hyperlipidemia&quot;,&quot;Triglycerides&quot;,&quot;Diabetes&quot;,&quot;Oncological&quot;,
                  &quot;Psychological_Condition&quot;,&quot;ImagingFindings&quot;,&quot;Injury_or_Poisoning&quot;))

val chunk2doc = new Chunk2Doc()
    .setInputCols(&quot;ner_chunk&quot;)
    .setOutputCol(&quot;ner_chunk_doc&quot;)

val sbert_embedder = BertSentenceEmbeddings
    .pretrained(&quot;sbiobert_base_cased_mli&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(Array(&quot;ner_chunk_doc&quot;))
    .setOutputCol(&quot;sbert_embeddings&quot;)
    .setCaseSensitive(False)

val resolver = SentenceEntityResolverModel
    .pretrained(&quot;sbiobertresolve_snomed_conditions&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;ner_chunk&quot;, &quot;sbert_embeddings&quot;))
    .setOutputCol(&quot;resolution&quot;)
    .setDistanceFunction(&quot;EUCLIDEAN&quot;)

val nlpPipeline = new Pipeline().setStages(Array(
    document_assembler,
    sentenceDetectorDL,
    tokenizer,
    word_embeddings,
    ner_jsl,
    ner_jsl_converter,
    chunk2doc,
    sbert_embedder,
    resolver))

val data = Seq(&quot;Medical professionals rushed in the bustling emergency room to attend to the patient with alarming symptoms.The attending physician immediately noted signs of respiratory distress, including stridor, a high-pitched sound indicative of upper respiratory tract obstruction.The patient, struggling to breathe, exhibited dyspnea. Concern heightened when they began experiencing syncope, a sudden loss of consciousness likely stemming from inadequate oxygenation. Further examination revealed a respiratory tract hemorrhage.&quot;) .toDF(&quot;text&quot;)

data= spark.createDataFrame(text).toDF('text')

val result = nlpPipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+-----------------------------------+-------------------------+-----------+-----------------------------------+--------------------------------------------------+--------------------------------------------------+
|                              chunk|                    label|snomed_code|                         resolution|                                         all_codes|                                   all_resolutions|
+-----------------------------------+-------------------------+-----------+-----------------------------------+--------------------------------------------------+--------------------------------------------------+
|               respiratory distress|               VS_Finding|  271825005|               respiratory distress|271825005:::418092006:::75483001:::373895009:::...|respiratory distress:::respiratory tract conges...|
|                            stridor|                  Symptom|   70407001|                            stridor|70407001:::301826004:::58596002:::301287002:::3...|stridor:::intermittent stridor:::inhalatory str...|
|                 high-pitched sound|                  Symptom|   51406002|                 high pitched voice|51406002:::271661003:::405495005:::23292001:::3...|high pitched voice:::heart sounds exaggerated::...|
|upper respiratory tract obstruction|Disease_Syndrome_Disorder|   68372009|upper respiratory tract obstruction|68372009:::79688008:::73342002:::301252002:::20...|upper respiratory tract obstruction:::respirato...|
|              struggling to breathe|                  Symptom|  289105003|   difficulty controlling breathing|289105003:::230145002:::289116005:::386813002::...|difficulty controlling breathing:::difficulty b...|
|                            dyspnea|                  Symptom|  267036007|                            dyspnea|267036007:::60845006:::25209001:::34560001:::59...|dyspnea:::exertional dyspnea:::inspiratory dysp...|
|                            syncope|                  Symptom|  271594007|                            syncope|271594007:::234167006:::90129003:::445535007:::...|syncope:::situational syncope:::tussive syncope...|
|              loss of consciousness|                  Symptom|  419045004|              loss of consciousness|419045004:::44077006:::44564008:::443371007:::1...|loss of consciousness:::loss of sensation:::los...|
|             inadequate oxygenation|                  Symptom|  238161004|           impaired oxygen delivery|238161004:::70944005:::238162006:::123826004:::...|impaired oxygen delivery:::impaired gas exchang...|
|       respiratory tract hemorrhage|Disease_Syndrome_Disorder|   95431003|       respiratory tract hemorrhage|95431003:::233783005:::15238002:::78144005:::32...|respiratory tract hemorrhage:::tracheal hemorrh...|
+-----------------------------------+-------------------------+-----------+-----------------------------------+--------------------------------------------------+--------------------------------------------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|sbiobertresolve_snomed_conditions|
|Compatibility:|Healthcare NLP 5.3.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence_embeddings]|
|Output Labels:|[snomed_code]|
|Language:|en|
|Size:|592.3 MB|
|Case sensitive:|false|

## References

This model is trained with the augmented version of NIH September 2023 SNOMED CT United States (US) Edition.</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="en" /><category term="resolver" /><category term="snomed" /><category term="conditions" /><summary type="html">Description This model maps clinical conditions to their corresponding SNOMED (domain: Conditions) codes using sbiobert_base_cased_mli Sentence Bert Embeddings. Predicted Entities Live Demo Open in Colab Download Copy S3 URI How to use PythonJSLScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentenceDetectorDL = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer()\ .setInputCols([&quot;sentence&quot;])\ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) ner_jsl = MedicalNerModel.pretrained(&quot;ner_jsl&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\ .setOutputCol(&quot;ner&quot;)\ ner_jsl_converter = NerConverterInternal()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;)\ .setWhiteList([&quot;Kidney_Disease&quot;, &quot;Cerebrovascular_Disease&quot;, &quot;Heart_Disease&quot;,&quot;Disease_Syndrome_Disorder&quot;, &quot;ImagingFindings&quot;, &quot;Symptom&quot;, &quot;VS_Finding&quot;,&quot;EKG_Findings&quot;, &quot;Communicable_Disease&quot;,&quot;Pregnancy&quot;, &quot;Obesity&quot;,&quot;Hypertension&quot;,&quot;Overweight&quot;,&quot;Hyperlipidemia&quot;,&quot;Triglycerides&quot;,&quot;Diabetes&quot;,&quot;Oncological&quot;, &quot;Psychological_Condition&quot;,&quot;ImagingFindings&quot;,&quot;Injury_or_Poisoning&quot;])\ c2doc = Chunk2Doc()\ .setInputCols(&quot;ner_chunk&quot;)\ .setOutputCol(&quot;ner_chunk_doc&quot;) sbert_embedder = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;ner_chunk_doc&quot;])\ .setOutputCol(&quot;sentence_embeddings&quot;)\ .setCaseSensitive(False) resolver = SentenceEntityResolverModel\ .pretrained(&quot;sbiobertresolve_snomed_conditions&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;ner_chunk&quot;, &quot;sbert_embeddings&quot;]) \ .setOutputCol(&quot;resolution&quot;)\ .setDistanceFunction(&quot;EUCLIDEAN&quot;) resolver_pipeline = Pipeline( stages = [ document_assembler, sentenceDetectorDL, tokenizer, word_embeddings, ner_jsl, ner_jsl_converter, c2doc, sbert_embedder, resolver ]) text = [[&quot;&quot;&quot;Medical professionals rushed in the bustling emergency room to attend to the patient with alarming symptoms. The attending physician immediately noted signs of respiratory distress, including stridor, a high-pitched sound indicative of upper respiratory tract obstruction. The patient, struggling to breathe, exhibited dyspnea. Concern heightened when they began experiencing syncope, a sudden loss of consciousness likely stemming from inadequate oxygenation. Further examination revealed a respiratory tract hemorrhage.&quot;&quot;&quot;]] data= spark.createDataFrame(text).toDF('text') model = resolver_pipeline.fit(data) result = model.transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentenceDetectorDL = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(Array(&quot;sentence&quot;)) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;,&quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner_jsl = MedicalNerModel.pretrained(&quot;ner_jsl&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;,&quot;token&quot;,&quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverter() .setInputCols(Array(&quot;sentence&quot;,&quot;token&quot;,&quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) .setWhiteList(Array(&quot;Kidney_Disease&quot;, &quot;Cerebrovascular_Disease&quot;, &quot;Heart_Disease&quot;,&quot;Disease_Syndrome_Disorder&quot;, &quot;ImagingFindings&quot;, &quot;Symptom&quot;, &quot;VS_Finding&quot;,&quot;EKG_Findings&quot;, &quot;Communicable_Disease&quot;,&quot;Pregnancy&quot;, &quot;Obesity&quot;,&quot;Hypertension&quot;,&quot;Overweight&quot;,&quot;Hyperlipidemia&quot;,&quot;Triglycerides&quot;,&quot;Diabetes&quot;,&quot;Oncological&quot;, &quot;Psychological_Condition&quot;,&quot;ImagingFindings&quot;,&quot;Injury_or_Poisoning&quot;)) val chunk2doc = new Chunk2Doc() .setInputCols(&quot;ner_chunk&quot;) .setOutputCol(&quot;ner_chunk_doc&quot;) val sbert_embedder = BertSentenceEmbeddings .pretrained(&quot;sbiobert_base_cased_mli&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(Array(&quot;ner_chunk_doc&quot;)) .setOutputCol(&quot;sbert_embeddings&quot;) .setCaseSensitive(False) val resolver = SentenceEntityResolverModel .pretrained(&quot;sbiobertresolve_snomed_conditions&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;ner_chunk&quot;, &quot;sbert_embeddings&quot;)) .setOutputCol(&quot;resolution&quot;) .setDistanceFunction(&quot;EUCLIDEAN&quot;) val nlpPipeline = new Pipeline().setStages(Array( document_assembler, sentenceDetectorDL, tokenizer, word_embeddings, ner_jsl, ner_jsl_converter, chunk2doc, sbert_embedder, resolver)) val data = Seq(&quot;Medical professionals rushed in the bustling emergency room to attend to the patient with alarming symptoms.The attending physician immediately noted signs of respiratory distress, including stridor, a high-pitched sound indicative of upper respiratory tract obstruction.The patient, struggling to breathe, exhibited dyspnea. Concern heightened when they began experiencing syncope, a sudden loss of consciousness likely stemming from inadequate oxygenation. Further examination revealed a respiratory tract hemorrhage.&quot;) .toDF(&quot;text&quot;) data= spark.createDataFrame(text).toDF('text') val result = nlpPipeline.fit(data).transform(data) Results +-----------------------------------+-------------------------+-----------+-----------------------------------+--------------------------------------------------+--------------------------------------------------+ | chunk| label|snomed_code| resolution| all_codes| all_resolutions| +-----------------------------------+-------------------------+-----------+-----------------------------------+--------------------------------------------------+--------------------------------------------------+ | respiratory distress| VS_Finding| 271825005| respiratory distress|271825005:::418092006:::75483001:::373895009:::...|respiratory distress:::respiratory tract conges...| | stridor| Symptom| 70407001| stridor|70407001:::301826004:::58596002:::301287002:::3...|stridor:::intermittent stridor:::inhalatory str...| | high-pitched sound| Symptom| 51406002| high pitched voice|51406002:::271661003:::405495005:::23292001:::3...|high pitched voice:::heart sounds exaggerated::...| |upper respiratory tract obstruction|Disease_Syndrome_Disorder| 68372009|upper respiratory tract obstruction|68372009:::79688008:::73342002:::301252002:::20...|upper respiratory tract obstruction:::respirato...| | struggling to breathe| Symptom| 289105003| difficulty controlling breathing|289105003:::230145002:::289116005:::386813002::...|difficulty controlling breathing:::difficulty b...| | dyspnea| Symptom| 267036007| dyspnea|267036007:::60845006:::25209001:::34560001:::59...|dyspnea:::exertional dyspnea:::inspiratory dysp...| | syncope| Symptom| 271594007| syncope|271594007:::234167006:::90129003:::445535007:::...|syncope:::situational syncope:::tussive syncope...| | loss of consciousness| Symptom| 419045004| loss of consciousness|419045004:::44077006:::44564008:::443371007:::1...|loss of consciousness:::loss of sensation:::los...| | inadequate oxygenation| Symptom| 238161004| impaired oxygen delivery|238161004:::70944005:::238162006:::123826004:::...|impaired oxygen delivery:::impaired gas exchang...| | respiratory tract hemorrhage|Disease_Syndrome_Disorder| 95431003| respiratory tract hemorrhage|95431003:::233783005:::15238002:::78144005:::32...|respiratory tract hemorrhage:::tracheal hemorrh...| +-----------------------------------+-------------------------+-----------+-----------------------------------+--------------------------------------------------+--------------------------------------------------+ Model Information Model Name: sbiobertresolve_snomed_conditions Compatibility: Healthcare NLP 5.3.0+ License: Licensed Edition: Official Input Labels: [sentence_embeddings] Output Labels: [snomed_code] Language: en Size: 592.3 MB Case sensitive: false References This model is trained with the augmented version of NIH September 2023 SNOMED CT United States (US) Edition.</summary></entry><entry><title type="html">Pipeline for Snomed Concept, Findings Version</title><link href="/2024/03/03/snomed_findings_resolver_pipeline_en.html" rel="alternate" type="text/html" title="Pipeline for Snomed Concept, Findings Version" /><published>2024-03-03T00:00:00+00:00</published><updated>2024-03-03T00:00:00+00:00</updated><id>/2024/03/03/snomed_findings_resolver_pipeline_en</id><content type="html" xml:base="/2024/03/03/snomed_findings_resolver_pipeline_en.html">## Description

This pipeline extracts clinical findings and maps them to their corresponding SNOMED (CT version) codes using `sbiobert_base_cased_mli` Sentence Bert Embeddings.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/snomed_findings_resolver_pipeline_en_5.3.0_3.2_1709489016771.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/snomed_findings_resolver_pipeline_en_5.3.0_3.2_1709489016771.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python

from sparknlp.pretrained import PretrainedPipeline

snomed_pipeline = PretrainedPipeline(&quot;snomed_findings_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

result = snomed_pipeline.annotate(&quot;&quot;&quot;The patient exhibited recurrent upper respiratory tract infections, fever, unintentional weight loss, and occasional night sweats. Clinically, they appeared cachectic and pale, with notable hepatosplenomegaly. Laboratory results confirmed pancytopenia.&quot;&quot;&quot;)

```
```scala

import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline

val snomed_pipeline = PretrainedPipeline(&quot;snomed_findings_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

val result = snomed_pipeline.annotate(&quot;&quot;&quot;The patient exhibited recurrent upper respiratory tract infections, fever, unintentional weight loss, and occasional night sweats. Clinically, they appeared cachectic and pale, with notable hepatosplenomegaly. Laboratory results confirmed pancytopenia.&quot;&quot;&quot;)

```
&lt;/div&gt;

## Results

```bash

+----------------------------------+-----+---+---------+-----------+-------------------------------------------+------------------------------------------------------------+------------------------------------------------------------+
|                             chunk|begin|end|ner_label|snomed_code|                                 resolution|                                           all_k_resolutions|                                                 all_k_codes|
+----------------------------------+-----+---+---------+-----------+-------------------------------------------+------------------------------------------------------------+------------------------------------------------------------+
|upper respiratory tract infections|   32| 65|  PROBLEM|  195708003|recurrent upper respiratory tract infection|recurrent upper respiratory tract infection:::upper respi...|195708003:::54150009:::312118003:::448739000:::4519910001...|
|                             fever|   68| 72|  PROBLEM|  386661006|                                      fever|fever:::intermittent fever:::sustained fever:::prolonged ...|386661006:::77957000:::271751000:::248435007:::12579009::...|
|         unintentional weight loss|   75| 99|  PROBLEM|  448765001|                  unintentional weight loss|unintentional weight loss:::unexplained weight loss:::int...|448765001:::422868009:::416528001:::267024001:::89362005:...|
|                      night sweats|  117|128|  PROBLEM|   42984000|                               night sweats|night sweats:::frequent night waking:::night waking:::nig...|42984000:::423052008:::67233009:::102549009:::36163009:::...|
|                         cachectic|  157|165|  PROBLEM|  238108007|                                  cachectic|cachectic:::cachexia associated with aids:::cardiac cache...|238108007:::422003001:::284529003:::788876001:::240128005...|
|                              pale|  171|174|  PROBLEM|  398979000|                            pale complexion|pale complexion:::pale liver:::pale tongue:::pale lung:::...|398979000:::95199009:::719637000:::95200007:::70396004:::...|
|                hepatosplenomegaly|  190|207|  PROBLEM|   36760000|                         hepatosplenomegaly|hepatosplenomegaly:::congestive splenomegaly:::neonatal h...|36760000:::19058002:::80378000:::16294009:::191382009:::8...|
|                      pancytopenia|  239|250|  PROBLEM|  127034005|                               pancytopenia|pancytopenia:::drug induced pancytopenia:::pancytopenia -...|127034005:::736024007:::5876000:::124961001:::417672002::...|
+----------------------------------+-----+---+---------+-----------+-------------------------------------------+------------------------------------------------------------+------------------------------------------------------------+

```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|snomed_findings_resolver_pipeline|
|Type:|pipeline|
|Compatibility:|Healthcare NLP 5.3.0+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|2.8 GB|

## Included Models

- DocumentAssembler
- SentenceDetectorDLModel
- TokenizerModel
- WordEmbeddingsModel
- MedicalNerModel
- NerConverterInternalModel
- MedicalNerModel
- NerConverterInternalModel
- MedicalNerModel
- NerConverterInternalModel
- MedicalNerModel
- NerConverterInternalModel
- ChunkMergeModel
- Chunk2Doc
- BertSentenceEmbeddings
- SentenceEntityResolverModel</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="en" /><category term="snomed" /><category term="pipeline" /><category term="resolver" /><summary type="html">Description This pipeline extracts clinical findings and maps them to their corresponding SNOMED (CT version) codes using sbiobert_base_cased_mli Sentence Bert Embeddings. Live Demo Open in Colab Download Copy S3 URI How to use PythonJSLScalaNLU from sparknlp.pretrained import PretrainedPipeline snomed_pipeline = PretrainedPipeline(&quot;snomed_findings_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) result = snomed_pipeline.annotate(&quot;&quot;&quot;The patient exhibited recurrent upper respiratory tract infections, fever, unintentional weight loss, and occasional night sweats. Clinically, they appeared cachectic and pale, with notable hepatosplenomegaly. Laboratory results confirmed pancytopenia.&quot;&quot;&quot;) import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline val snomed_pipeline = PretrainedPipeline(&quot;snomed_findings_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) val result = snomed_pipeline.annotate(&quot;&quot;&quot;The patient exhibited recurrent upper respiratory tract infections, fever, unintentional weight loss, and occasional night sweats. Clinically, they appeared cachectic and pale, with notable hepatosplenomegaly. Laboratory results confirmed pancytopenia.&quot;&quot;&quot;) Results +----------------------------------+-----+---+---------+-----------+-------------------------------------------+------------------------------------------------------------+------------------------------------------------------------+ | chunk|begin|end|ner_label|snomed_code| resolution| all_k_resolutions| all_k_codes| +----------------------------------+-----+---+---------+-----------+-------------------------------------------+------------------------------------------------------------+------------------------------------------------------------+ |upper respiratory tract infections| 32| 65| PROBLEM| 195708003|recurrent upper respiratory tract infection|recurrent upper respiratory tract infection:::upper respi...|195708003:::54150009:::312118003:::448739000:::4519910001...| | fever| 68| 72| PROBLEM| 386661006| fever|fever:::intermittent fever:::sustained fever:::prolonged ...|386661006:::77957000:::271751000:::248435007:::12579009::...| | unintentional weight loss| 75| 99| PROBLEM| 448765001| unintentional weight loss|unintentional weight loss:::unexplained weight loss:::int...|448765001:::422868009:::416528001:::267024001:::89362005:...| | night sweats| 117|128| PROBLEM| 42984000| night sweats|night sweats:::frequent night waking:::night waking:::nig...|42984000:::423052008:::67233009:::102549009:::36163009:::...| | cachectic| 157|165| PROBLEM| 238108007| cachectic|cachectic:::cachexia associated with aids:::cardiac cache...|238108007:::422003001:::284529003:::788876001:::240128005...| | pale| 171|174| PROBLEM| 398979000| pale complexion|pale complexion:::pale liver:::pale tongue:::pale lung:::...|398979000:::95199009:::719637000:::95200007:::70396004:::...| | hepatosplenomegaly| 190|207| PROBLEM| 36760000| hepatosplenomegaly|hepatosplenomegaly:::congestive splenomegaly:::neonatal h...|36760000:::19058002:::80378000:::16294009:::191382009:::8...| | pancytopenia| 239|250| PROBLEM| 127034005| pancytopenia|pancytopenia:::drug induced pancytopenia:::pancytopenia -...|127034005:::736024007:::5876000:::124961001:::417672002::...| +----------------------------------+-----+---+---------+-----------+-------------------------------------------+------------------------------------------------------------+------------------------------------------------------------+ Model Information Model Name: snomed_findings_resolver_pipeline Type: pipeline Compatibility: Healthcare NLP 5.3.0+ License: Licensed Edition: Official Language: en Size: 2.8 GB Included Models DocumentAssembler SentenceDetectorDLModel TokenizerModel WordEmbeddingsModel MedicalNerModel NerConverterInternalModel MedicalNerModel NerConverterInternalModel MedicalNerModel NerConverterInternalModel MedicalNerModel NerConverterInternalModel ChunkMergeModel Chunk2Doc BertSentenceEmbeddings SentenceEntityResolverModel</summary></entry></feed>