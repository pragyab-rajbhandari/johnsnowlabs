<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-10-20T14:41:01+00:00</updated><id>/feed.xml</id><title type="html">Spark NLP</title><subtitle>High Performance NLP with Apache Spark
</subtitle><author><name>{&quot;type&quot;=&gt;nil, &quot;name&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;avatar&quot;=&gt;nil, &quot;bio&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;facebook&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;weibo&quot;=&gt;nil, &quot;googleplus&quot;=&gt;nil, &quot;telegram&quot;=&gt;nil, &quot;medium&quot;=&gt;nil, &quot;zhihu&quot;=&gt;nil, &quot;douban&quot;=&gt;nil, &quot;linkedin&quot;=&gt;nil, &quot;github&quot;=&gt;nil, &quot;npm&quot;=&gt;nil}</name></author><entry><title type="html">Mapping UMLS Codes with Their Corresponding ICD10CM Codes</title><link href="/2023/10/17/umls_icd10cm_mapper_en.html" rel="alternate" type="text/html" title="Mapping UMLS Codes with Their Corresponding ICD10CM Codes" /><published>2023-10-17T00:00:00+00:00</published><updated>2023-10-17T00:00:00+00:00</updated><id>/2023/10/17/umls_icd10cm_mapper_en</id><content type="html" xml:base="/2023/10/17/umls_icd10cm_mapper_en.html">## Description

This pretrained model maps UMLS codes to corresponding ICD10CM codes.

## Predicted Entities

`icd10cm_code`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
[Open in Colab](https://colab.research.google.com/github/JohnSnowLabs/spark-nlp-workshop/blob/master/tutorials/Certification_Trainings/Healthcare/26.Chunk_Mapping.ipynb){:.button.button-orange.button-orange-trans.co.button-icon}
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/umls_icd10cm_mapper_en_5.1.1_3.0_1697517479198.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/umls_icd10cm_mapper_en_5.1.1_3.0_1697517479198.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
      .setInputCol(&quot;text&quot;)\
      .setOutputCol(&quot;document&quot;)

chunkerMapper = DocMapperModel.pretrained(&quot;umls_icd10cm_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
      .setInputCols([&quot;document&quot;])\
      .setOutputCol(&quot;mappings&quot;)\
      .setRels([&quot;icd10cm_code&quot;])

pipeline = Pipeline().setStages([document_assembler,
                                     chunkerMapper])

df = spark.createDataFrame([[&quot;C0000744&quot;], [&quot;C2875181&quot;]]).toDF(&quot;text&quot;)

res = pipeline.fit(df).transform(df)
```
```scala
val document_assembler = new DocumentAssembler()
      .setInputCol(&quot;text&quot;)
      .setOutputCol(&quot;document&quot;)

val chunkerMapper = DocMapperModel.pretrained(&quot;umls_icd10cm_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
      .setInputCols(&quot;document&quot;)
      .setOutputCol(&quot;mappings&quot;)
      .setRels(&quot;icd10cm_code&quot;)
    
val pipeline = new Pipeline(stages = Array(
        document_assembler,
        chunkerMapper
))

val data = Seq([[&quot;C0000744&quot;], [&quot;C2875181&quot;]]).toDS.toDF(&quot;text&quot;)

val result= pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+---------+------------+------------+
|umls_code|icd10cm_code|relation    |
+---------+------------+------------+
|C0000744 |E786        |icd10cm_code|
|C2875181 |G4381       |icd10cm_code|
+---------+------------+------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|umls_icd10cm_mapper|
|Compatibility:|Healthcare NLP 5.1.1+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[document]|
|Output Labels:|[mappings]|
|Language:|en|
|Size:|1.4 MB|</content><author><name>John Snow Labs</name></author><category term="icd10cm" /><category term="umls" /><category term="chunk_mapper" /><category term="clinical" /><category term="licensed" /><category term="en" /><summary type="html">Description This pretrained model maps UMLS codes to corresponding ICD10CM codes. Predicted Entities icd10cm_code Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) chunkerMapper = DocMapperModel.pretrained(&quot;umls_icd10cm_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;mappings&quot;)\ .setRels([&quot;icd10cm_code&quot;]) pipeline = Pipeline().setStages([document_assembler, chunkerMapper]) df = spark.createDataFrame([[&quot;C0000744&quot;], [&quot;C2875181&quot;]]).toDF(&quot;text&quot;) res = pipeline.fit(df).transform(df) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val chunkerMapper = DocMapperModel.pretrained(&quot;umls_icd10cm_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;mappings&quot;) .setRels(&quot;icd10cm_code&quot;) val pipeline = new Pipeline(stages = Array( document_assembler, chunkerMapper )) val data = Seq([[&quot;C0000744&quot;], [&quot;C2875181&quot;]]).toDS.toDF(&quot;text&quot;) val result= pipeline.fit(data).transform(data) Results +---------+------------+------------+ |umls_code|icd10cm_code|relation | +---------+------------+------------+ |C0000744 |E786 |icd10cm_code| |C2875181 |G4381 |icd10cm_code| +---------+------------+------------+ Model Information Model Name: umls_icd10cm_mapper Compatibility: Healthcare NLP 5.1.1+ License: Licensed Edition: Official Input Labels: [document] Output Labels: [mappings] Language: en Size: 1.4 MB</summary></entry><entry><title type="html">Mapping UMLS Codes with Their Corresponding MESH Codes</title><link href="/2023/10/17/umls_mesh_mapper_en.html" rel="alternate" type="text/html" title="Mapping UMLS Codes with Their Corresponding MESH Codes" /><published>2023-10-17T00:00:00+00:00</published><updated>2023-10-17T00:00:00+00:00</updated><id>/2023/10/17/umls_mesh_mapper_en</id><content type="html" xml:base="/2023/10/17/umls_mesh_mapper_en.html">## Description

This pretrained model maps UMLS codes to corresponding MESH codes.

## Predicted Entities

`mesh_code`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
[Open in Colab](https://colab.research.google.com/github/JohnSnowLabs/spark-nlp-workshop/blob/master/tutorials/Certification_Trainings/Healthcare/26.Chunk_Mapping.ipynb){:.button.button-orange.button-orange-trans.co.button-icon}
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/umls_mesh_mapper_en_5.1.1_3.0_1697516249271.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/umls_mesh_mapper_en_5.1.1_3.0_1697516249271.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
      .setInputCol('text')\
      .setOutputCol('document')

chunkerMapper = DocMapperModel.pretrained(&quot;umls_mesh_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
      .setInputCols([&quot;document&quot;])\
      .setOutputCol(&quot;mappings&quot;)\
      .setRels([&quot;mesh_code&quot;])

pipeline = Pipeline().setStages([document_assembler,
                                     chunkerMapper])

df = spark.createDataFrame([['C0000098'], ['C0000152']]).toDF(&quot;text&quot;)

res = pipeline.fit(df).transform(df)
```
```scala
val document_assembler = new DocumentAssembler()
      .setInputCol(&quot;text&quot;)
      .setOutputCol(&quot;document&quot;)

val chunkerMapper = DocMapperModel.pretrained(&quot;umls_mesh_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
      .setInputCols(&quot;document&quot;)
      .setOutputCol(&quot;mappings&quot;)
      .setRels(&quot;mesh_code&quot;)
    
val pipeline = new Pipeline(stages = Array(
        document_assembler,
        chunkerMapper
))

val data = Seq([[&quot;C0000098&quot;], [&quot;C0000152&quot;]]).toDS.toDF(&quot;text&quot;)

val result= pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+---------+---------+---------+
|umls_code|mesh_code|relation |
+---------+---------+---------+
|C0000098 |D015655  |mesh_code|
|C0000152 |D015067  |mesh_code|
+---------+---------+---------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|umls_mesh_mapper|
|Compatibility:|Healthcare NLP 5.1.1+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[document]|
|Output Labels:|[mappings]|
|Language:|en|
|Size:|6.1 MB|</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="en" /><category term="mesh" /><category term="umls" /><category term="chunk_mapper" /><category term="clinical" /><summary type="html">Description This pretrained model maps UMLS codes to corresponding MESH codes. Predicted Entities mesh_code Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol('text')\ .setOutputCol('document') chunkerMapper = DocMapperModel.pretrained(&quot;umls_mesh_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;mappings&quot;)\ .setRels([&quot;mesh_code&quot;]) pipeline = Pipeline().setStages([document_assembler, chunkerMapper]) df = spark.createDataFrame([['C0000098'], ['C0000152']]).toDF(&quot;text&quot;) res = pipeline.fit(df).transform(df) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val chunkerMapper = DocMapperModel.pretrained(&quot;umls_mesh_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;mappings&quot;) .setRels(&quot;mesh_code&quot;) val pipeline = new Pipeline(stages = Array( document_assembler, chunkerMapper )) val data = Seq([[&quot;C0000098&quot;], [&quot;C0000152&quot;]]).toDS.toDF(&quot;text&quot;) val result= pipeline.fit(data).transform(data) Results +---------+---------+---------+ |umls_code|mesh_code|relation | +---------+---------+---------+ |C0000098 |D015655 |mesh_code| |C0000152 |D015067 |mesh_code| +---------+---------+---------+ Model Information Model Name: umls_mesh_mapper Compatibility: Healthcare NLP 5.1.1+ License: Licensed Edition: Official Input Labels: [document] Output Labels: [mappings] Language: en Size: 6.1 MB</summary></entry><entry><title type="html">Mapping UMLS Codes with Their Corresponding SNOMED Codes</title><link href="/2023/10/17/umls_snomed_mapper_en.html" rel="alternate" type="text/html" title="Mapping UMLS Codes with Their Corresponding SNOMED Codes" /><published>2023-10-17T00:00:00+00:00</published><updated>2023-10-17T00:00:00+00:00</updated><id>/2023/10/17/umls_snomed_mapper_en</id><content type="html" xml:base="/2023/10/17/umls_snomed_mapper_en.html">## Description

This pretrained model maps UMLS codes to corresponding SNOMED codes.

## Predicted Entities

`snomed_code`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
[Open in Colab](https://colab.research.google.com/github/JohnSnowLabs/spark-nlp-workshop/blob/master/tutorials/Certification_Trainings/Healthcare/26.Chunk_Mapping.ipynb){:.button.button-orange.button-orange-trans.co.button-icon}
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/umls_snomed_mapper_en_5.1.1_3.0_1697518217236.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/umls_snomed_mapper_en_5.1.1_3.0_1697518217236.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
      .setInputCol(&quot;text&quot;)\
      .setOutputCol(&quot;document&quot;)

chunkerMapper = DocMapperModel.pretrained(&quot;umls_snomed_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
      .setInputCols([&quot;document&quot;])\
      .setOutputCol(&quot;mappings&quot;)\
      .setRels([&quot;snomed_code&quot;])

pipeline = Pipeline().setStages([document_assembler,
                                     chunkerMapper])

df = spark.createDataFrame([[&quot;C0000248&quot;], [&quot;C3503397&quot;]]).toDF(&quot;text&quot;)

res = pipeline.fit(df).transform(df)
```
```scala
val document_assembler = new DocumentAssembler()
      .setInputCol(&quot;text&quot;)
      .setOutputCol(&quot;document&quot;)

val chunkerMapper = DocMapperModel.pretrained(&quot;umls_snomed_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
      .setInputCols(&quot;document&quot;)
      .setOutputCol(&quot;mappings&quot;)
      .setRels(&quot;snomed_code&quot;)
    
val pipeline = new Pipeline(stages = Array(
        document_assembler,
        chunkerMapper
))

val data = Seq([[&quot;C0000248&quot;], [&quot;C3503397&quot;]]).toDS.toDF(&quot;text&quot;)

val result= pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+---------+-----------+-----------+
|umls_code|snomed_code|relation   |
+---------+-----------+-----------+
|C0000248 |725541001  |snomed_code|
|C3503397 |769507002  |snomed_code|
+---------+-----------+-----------+

```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|umls_snomed_mapper|
|Compatibility:|Healthcare NLP 5.1.1+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[document]|
|Output Labels:|[mappings]|
|Language:|en|
|Size:|6.7 MB|</content><author><name>John Snow Labs</name></author><category term="snomed" /><category term="umls" /><category term="chunk_mapper" /><category term="clinical" /><category term="licensed" /><category term="en" /><summary type="html">Description This pretrained model maps UMLS codes to corresponding SNOMED codes. Predicted Entities snomed_code Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) chunkerMapper = DocMapperModel.pretrained(&quot;umls_snomed_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;mappings&quot;)\ .setRels([&quot;snomed_code&quot;]) pipeline = Pipeline().setStages([document_assembler, chunkerMapper]) df = spark.createDataFrame([[&quot;C0000248&quot;], [&quot;C3503397&quot;]]).toDF(&quot;text&quot;) res = pipeline.fit(df).transform(df) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val chunkerMapper = DocMapperModel.pretrained(&quot;umls_snomed_mapper&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;mappings&quot;) .setRels(&quot;snomed_code&quot;) val pipeline = new Pipeline(stages = Array( document_assembler, chunkerMapper )) val data = Seq([[&quot;C0000248&quot;], [&quot;C3503397&quot;]]).toDS.toDF(&quot;text&quot;) val result= pipeline.fit(data).transform(data) Results +---------+-----------+-----------+ |umls_code|snomed_code|relation | +---------+-----------+-----------+ |C0000248 |725541001 |snomed_code| |C3503397 |769507002 |snomed_code| +---------+-----------+-----------+ Model Information Model Name: umls_snomed_mapper Compatibility: Healthcare NLP 5.1.1+ License: Licensed Edition: Official Input Labels: [document] Output Labels: [mappings] Language: en Size: 6.7 MB</summary></entry><entry><title type="html">Multilabel Text Classification for Heart Disease</title><link href="/2023/10/16/multiclassifierdl_heart_disease_en.html" rel="alternate" type="text/html" title="Multilabel Text Classification for Heart Disease" /><published>2023-10-16T00:00:00+00:00</published><updated>2023-10-16T00:00:00+00:00</updated><id>/2023/10/16/multiclassifierdl_heart_disease_en</id><content type="html" xml:base="/2023/10/16/multiclassifierdl_heart_disease_en.html">## Description

The PHS-BERT Heart Disease Classifier Model is a specialized text classification system, engineered to accurately identify and categorize textual mentions of three prominent cardiovascular diseases: Hypertension, Coronary Artery Disease, and Myocardial Infarction. More detailed information about classes as follows:

`Hypertension`: This category is designated for text mentions that correspond to Hypertension, a medical condition where the blood pressure in the arteries is persistently elevated. Chronic hypertension can lead to heart diseases, stroke, and other complications. Example: &quot;Due to his consistent high blood pressure readings, my father was diagnosed with hypertension.&quot;

`Coronary Artery Disease`(CAD): Textual content that implicates CAD is classified here. CAD, also known as ischemic heart disease, is characterized by a reduced blood flow to the heart muscle due to the build-up of plaque in the arteries supplying the heart. This could result in chest pain (angina) or a heart attack. Example: &quot;My aunt had chest pain and, after some tests, she was told it was due to coronary artery disease.&quot;

`Myocardial Infarction`(MI): Entries here incorporate text alluding to MI, more commonly known as a heart attack. MI occurs when blood flow to a part of the heart muscle gets blocked, usually by a blood clot. This can damage or destroy that part of the heart muscle. Example: &quot;Last year, my neighbour experienced severe chest pain and was rushed to the hospital; the diagnosis was a myocardial infarction.&quot;

## Predicted Entities

`Hypertension`, `MI`, `CAD`, `Other/Unknown`, `No`

{:.btn-box}
[Live Demo](https://demo.johnsnowlabs.com/healthcare/CLASSIFICATION_HEART_DISEASE/){:.button.button-orange}
[Open in Colab](https://colab.research.google.com/github/JohnSnowLabs/spark-nlp-workshop/blob/master/tutorials/streamlit_notebooks/healthcare/PUBLIC_HEALTH_CLASSIFIER_DL.ipynb){:.button.button-orange.button-orange-trans.co.button-icon}
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/multiclassifierdl_heart_disease_en_5.1.1_3.0_1697443096682.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/multiclassifierdl_heart_disease_en_5.1.1_3.0_1697443096682.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
documentAssembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

tokenizer = Tokenizer()\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;, &quot;token&quot;])\
    .setOutputCol(&quot;embeddings&quot;)

sentence_embeddings = SentenceEmbeddings()\
    .setInputCols([&quot;document&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;sentence_embeddings&quot;) \
    .setPoolingStrategy(&quot;AVERAGE&quot;)

multiclassifierdl = MultiClassifierDLModel.pretrained(&quot;multiclassifierdl_heart_disease&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence_embeddings&quot;])\
    .setOutputCol(&quot;predicted_class&quot;)\
    .setThreshold(0.999)

clf_pipeline = Pipeline(
    stages=[
        documentAssembler,
        tokenizer,
        word_embeddings,
        sentence_embeddings,
        multiclassifierdl
])


data = spark.createDataFrame([
     [&quot;&quot;&quot;Mrs. Allen was diagnosed with hypertension after consistently recording blood pressure readings above 140/90 mmHg.&quot;&quot;&quot;],
     [&quot;&quot;&quot;Following a series of diagnostic tests, Mr. Harris was confirmed to have CAD (Coronary Artery Disease).&quot;&quot;&quot;],
     [&quot;&quot;&quot;After presenting with crushing chest pain and diaphoresis, Mr. Stevens was diagnosed with an MI (Myocardial Infarction).&quot;&quot;&quot;]
]).toDF(&quot;text&quot;)


result = clf_pipeline.fit(data).transform(data)
```
```scala
val documentAssembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)

val tokenizer = new Tokenizer()
    .setInputCols(Array(&quot;document&quot;))
    .setOutputCol(&quot;token&quot;)

val wordEmbeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;document&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)

val sentence_embeddings = new SentenceEmbeddings()\
    .setInputCols(Array(&quot;document&quot;, &quot;embeddings&quot;)) \
    .setOutputCol(&quot;sentence_embeddings&quot;) \
    .setPoolingStrategy(&quot;AVERAGE&quot;)

val multiclassifierdl = MultiClassifierDLModel.pretrained(&quot;multiclassifierdl_heart_disease&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols(&quot;sentence_embeddings&quot;)\
    .setOutputCol(&quot;predicted_class&quot;)\
    .setThreshold(0.999)

val clf_pipeline = new Pipeline().setStages(Array(
    documentAssembler,
    tokenizer,
    wordEmbeddings,
    sentence_embeddings,
    multiclassifierdl
))

val data = Seq(Array(
      &quot;&quot;&quot;Mrs. Allen was diagnosed with hypertension after consistently recording blood pressure readings above 140/90 mmHg.&quot;&quot;&quot;,
      &quot;&quot;&quot;Following a series of diagnostic tests, Mr. Harris was confirmed to have CAD (Coronary Artery Disease).&quot;&quot;&quot;,
      &quot;&quot;&quot;After presenting with crushing chest pain and diaphoresis, Mr. Stevens was diagnosed with an MI (Myocardial Infarction).&quot;&quot;&quot;
 )).toDS.toDF(&quot;text&quot;)

val result = clf_pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+----------------------------------------------------------------------------------------------------+--------------+
|                                                                                                text|        result|
+----------------------------------------------------------------------------------------------------+--------------+
|Mrs. Allen was diagnosed with hypertension after consistently recording blood pressure readings a...|[Hypertension]|
|Following a series of diagnostic tests, Mr. Harris was confirmed to have CAD (Coronary Artery Dis...|         [CAD]|
|After presenting with crushing chest pain and diaphoresis, Mr. Stevens was diagnosed with an MI (...|          [MI]|
+----------------------------------------------------------------------------------------------------+--------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|multiclassifierdl_heart_disease|
|Compatibility:|Healthcare NLP 5.1.1+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence_embeddings]|
|Output Labels:|[class]|
|Language:|en|
|Size:|87.8 MB|
|Dependencies:|`embeddings_clinical`|

## References

Trained with the in-house dataset

## Sample text from the training dataset

Hypertension: Mr. Daniels was diagnosed with hypertension during a routine check-up at the age of 45. He had consistently high blood pressure readings over several visits, indicative of hypertension. Often experiencing headaches and occasional bouts of dizziness, these could be linked to his elevated blood pressure. He has been prescribed antihypertensive medications and advised to adopt lifestyle modifications, such as reducing salt intake and engaging in regular exercise, to manage his hypertension effectively.

Coronary Artery Disease (CAD): Mrs. Martinez, a 58-year-old, began experiencing chest discomfort and shortness of breath during physical exertion. After undergoing an angiogram, she was diagnosed with coronary artery disease due to significant blockage in her coronary arteries. Her family history reveals her father had a similar condition, making her predisposed to CAD. Along with prescribed medications to reduce her risk of a heart attack, Mrs. Martinez will undergo a cardiac rehabilitation program and make dietary changes to manage her coronary artery disease.

Myocardial Infarction (MI): Mr. Jackson, at the age of 52, suddenly experienced severe chest pain while at work and was immediately rushed to the emergency department. The ECG and elevated cardiac enzymes confirmed a diagnosis of myocardial infarction. Recounting the event, Mr. Jackson mentioned that he felt a crushing pain in his chest, radiating to his left arm, typical symptoms of a heart attack. Post-treatment, he was advised to engage in cardiac rehabilitation, maintain a heart-healthy diet, and take prescribed medications diligently to prevent another myocardial infarction in the future.

## Benchmarking

```bash
label         tp     fp    fn    prec            rec         f1
Other/Unknown 48     10    28    0.82758623     0.6315789    0.7164179
No            366    39    41    0.9037037      0.8992629    0.9014778
MI            128    13    12    0.9078014      0.9142857    0.911032
Hypertension  184    30    41    0.8598131      0.8177778    0.8382688
CAD           191    13    14    0.9362745      0.9317073    0.9339853
Macro-average 917    105   136   0.8870357      0.8389225    0.8623085
Micro-average 917    105   136   0.89726025     0.8708452    0.88385534
```</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="en" /><category term="classification" /><category term="text_classification" /><category term="multiclassifier" /><category term="heart_disease" /><category term="hypertension" /><category term="coronary_artery_disease" /><category term="myocardial_infarction" /><category term="tensorflow" /><summary type="html">Description The PHS-BERT Heart Disease Classifier Model is a specialized text classification system, engineered to accurately identify and categorize textual mentions of three prominent cardiovascular diseases: Hypertension, Coronary Artery Disease, and Myocardial Infarction. More detailed information about classes as follows: Hypertension: This category is designated for text mentions that correspond to Hypertension, a medical condition where the blood pressure in the arteries is persistently elevated. Chronic hypertension can lead to heart diseases, stroke, and other complications. Example: “Due to his consistent high blood pressure readings, my father was diagnosed with hypertension.” Coronary Artery Disease(CAD): Textual content that implicates CAD is classified here. CAD, also known as ischemic heart disease, is characterized by a reduced blood flow to the heart muscle due to the build-up of plaque in the arteries supplying the heart. This could result in chest pain (angina) or a heart attack. Example: “My aunt had chest pain and, after some tests, she was told it was due to coronary artery disease.” Myocardial Infarction(MI): Entries here incorporate text alluding to MI, more commonly known as a heart attack. MI occurs when blood flow to a part of the heart muscle gets blocked, usually by a blood clot. This can damage or destroy that part of the heart muscle. Example: “Last year, my neighbour experienced severe chest pain and was rushed to the hospital; the diagnosis was a myocardial infarction.” Predicted Entities Hypertension, MI, CAD, Other/Unknown, No Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU documentAssembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) tokenizer = Tokenizer()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) sentence_embeddings = SentenceEmbeddings()\ .setInputCols([&quot;document&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;sentence_embeddings&quot;) \ .setPoolingStrategy(&quot;AVERAGE&quot;) multiclassifierdl = MultiClassifierDLModel.pretrained(&quot;multiclassifierdl_heart_disease&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence_embeddings&quot;])\ .setOutputCol(&quot;predicted_class&quot;)\ .setThreshold(0.999) clf_pipeline = Pipeline( stages=[ documentAssembler, tokenizer, word_embeddings, sentence_embeddings, multiclassifierdl ]) data = spark.createDataFrame([ [&quot;&quot;&quot;Mrs. Allen was diagnosed with hypertension after consistently recording blood pressure readings above 140/90 mmHg.&quot;&quot;&quot;], [&quot;&quot;&quot;Following a series of diagnostic tests, Mr. Harris was confirmed to have CAD (Coronary Artery Disease).&quot;&quot;&quot;], [&quot;&quot;&quot;After presenting with crushing chest pain and diaphoresis, Mr. Stevens was diagnosed with an MI (Myocardial Infarction).&quot;&quot;&quot;] ]).toDF(&quot;text&quot;) result = clf_pipeline.fit(data).transform(data) val documentAssembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val tokenizer = new Tokenizer() .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;token&quot;) val wordEmbeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;document&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val sentence_embeddings = new SentenceEmbeddings()\ .setInputCols(Array(&quot;document&quot;, &quot;embeddings&quot;)) \ .setOutputCol(&quot;sentence_embeddings&quot;) \ .setPoolingStrategy(&quot;AVERAGE&quot;) val multiclassifierdl = MultiClassifierDLModel.pretrained(&quot;multiclassifierdl_heart_disease&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols(&quot;sentence_embeddings&quot;)\ .setOutputCol(&quot;predicted_class&quot;)\ .setThreshold(0.999) val clf_pipeline = new Pipeline().setStages(Array( documentAssembler, tokenizer, wordEmbeddings, sentence_embeddings, multiclassifierdl )) val data = Seq(Array( &quot;&quot;&quot;Mrs. Allen was diagnosed with hypertension after consistently recording blood pressure readings above 140/90 mmHg.&quot;&quot;&quot;, &quot;&quot;&quot;Following a series of diagnostic tests, Mr. Harris was confirmed to have CAD (Coronary Artery Disease).&quot;&quot;&quot;, &quot;&quot;&quot;After presenting with crushing chest pain and diaphoresis, Mr. Stevens was diagnosed with an MI (Myocardial Infarction).&quot;&quot;&quot; )).toDS.toDF(&quot;text&quot;) val result = clf_pipeline.fit(data).transform(data) Results +----------------------------------------------------------------------------------------------------+--------------+ | text| result| +----------------------------------------------------------------------------------------------------+--------------+ |Mrs. Allen was diagnosed with hypertension after consistently recording blood pressure readings a...|[Hypertension]| |Following a series of diagnostic tests, Mr. Harris was confirmed to have CAD (Coronary Artery Dis...| [CAD]| |After presenting with crushing chest pain and diaphoresis, Mr. Stevens was diagnosed with an MI (...| [MI]| +----------------------------------------------------------------------------------------------------+--------------+ Model Information Model Name: multiclassifierdl_heart_disease Compatibility: Healthcare NLP 5.1.1+ License: Licensed Edition: Official Input Labels: [sentence_embeddings] Output Labels: [class] Language: en Size: 87.8 MB Dependencies: embeddings_clinical References Trained with the in-house dataset Sample text from the training dataset Hypertension: Mr. Daniels was diagnosed with hypertension during a routine check-up at the age of 45. He had consistently high blood pressure readings over several visits, indicative of hypertension. Often experiencing headaches and occasional bouts of dizziness, these could be linked to his elevated blood pressure. He has been prescribed antihypertensive medications and advised to adopt lifestyle modifications, such as reducing salt intake and engaging in regular exercise, to manage his hypertension effectively. Coronary Artery Disease (CAD): Mrs. Martinez, a 58-year-old, began experiencing chest discomfort and shortness of breath during physical exertion. After undergoing an angiogram, she was diagnosed with coronary artery disease due to significant blockage in her coronary arteries. Her family history reveals her father had a similar condition, making her predisposed to CAD. Along with prescribed medications to reduce her risk of a heart attack, Mrs. Martinez will undergo a cardiac rehabilitation program and make dietary changes to manage her coronary artery disease. Myocardial Infarction (MI): Mr. Jackson, at the age of 52, suddenly experienced severe chest pain while at work and was immediately rushed to the emergency department. The ECG and elevated cardiac enzymes confirmed a diagnosis of myocardial infarction. Recounting the event, Mr. Jackson mentioned that he felt a crushing pain in his chest, radiating to his left arm, typical symptoms of a heart attack. Post-treatment, he was advised to engage in cardiac rehabilitation, maintain a heart-healthy diet, and take prescribed medications diligently to prevent another myocardial infarction in the future. Benchmarking label tp fp fn prec rec f1 Other/Unknown 48 10 28 0.82758623 0.6315789 0.7164179 No 366 39 41 0.9037037 0.8992629 0.9014778 MI 128 13 12 0.9078014 0.9142857 0.911032 Hypertension 184 30 41 0.8598131 0.8177778 0.8382688 CAD 191 13 14 0.9362745 0.9317073 0.9339853 Macro-average 917 105 136 0.8870357 0.8389225 0.8623085 Micro-average 917 105 136 0.89726025 0.8708452 0.88385534</summary></entry><entry><title type="html">Text Classification For Mental Disorder</title><link href="/2023/10/16/multiclassifierdl_mental_disorder_en.html" rel="alternate" type="text/html" title="Text Classification For Mental Disorder" /><published>2023-10-16T00:00:00+00:00</published><updated>2023-10-16T00:00:00+00:00</updated><id>/2023/10/16/multiclassifierdl_mental_disorder_en</id><content type="html" xml:base="/2023/10/16/multiclassifierdl_mental_disorder_en.html">## Description

The PHS-BERT Mental Disorder Classifier Model classifies text based on the following mental disorders. (Schizophrenia, Depression, Bipolar disorder, Anxiety disorder).

The Mental Disorder Classifier Model is a specialized text classification system, engineered to accurately identify and categorize textual mentions of four prominent respiratory diseases: Schizophrenia, Depression, Bipolar disorder, Anxiety disorder. More detailed information about classes as follows:

`Schizophrenia`: This category is designated for text mentions that correspond to Schizophrenia, a mental disorder characterized by thought disorders, hallucinations, and often involving delusional beliefs and cognitive challenges. Example: &quot;My brother’s hallucinations, a symptom of his schizophrenia, make daily tasks challenging for him.&quot;

`Depression`: Textual content which implicates Depression, a pervasive mental health disorder marked by persistent feelings of sadness, loss of interest in activities, and potential physical health alterations, is classified here. Example: &quot;The heavy weight of depression often leaves me struggling to find joy in activities I once loved.&quot;

`Bipolar Disorder`: Entries here incorporate text alluding to Bipolar Disorder, a mental health condition distinguished by stark fluctuations in mood, transitioning between manic highs and depressive lows. Example: &quot;Bipolar disorder has my mood swinging from exhilarating happiness to debilitating lows without warning.&quot;

`Anxiety Disorder`: Textual mentions signifying Anxiety Disorder, which involves persistent, excessive worry, nervousness, and physiological effects, are classified under this label. Example: &quot;My anxiety disorder frequently sets my heart racing and mind spiralling over mere hypothetical scenarios.&quot;

## Predicted Entities

`Anxiety Disorder`, `Bipolar disorder`, `No`, `Schizophrenia`, `Depression`, `Other/Unknown`

{:.btn-box}
[Live Demo](https://demo.johnsnowlabs.com/healthcare/CLASSIFICATION_MENTAL_DISORDER/){:.button.button-orange}
[Open in Colab](https://colab.research.google.com/github/JohnSnowLabs/spark-nlp-workshop/blob/master/tutorials/streamlit_notebooks/healthcare/MENTAL_HEALTH.ipynb){:.button.button-orange.button-orange-trans.co.button-icon}
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/multiclassifierdl_mental_disorder_en_5.1.1_3.0_1697441541490.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/multiclassifierdl_mental_disorder_en_5.1.1_3.0_1697441541490.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
# 1. Document assembler
document_assembler = DocumentAssembler() \
    .setInputCol(&quot;text&quot;) \
    .setOutputCol(&quot;document&quot;)

tokenizer = Tokenizer()\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;, &quot;token&quot;])\
    .setOutputCol(&quot;word_embeddings&quot;)

sentence_embeddings = SentenceEmbeddings()\
    .setInputCols([&quot;document&quot;, &quot;word_embeddings&quot;])\
    .setOutputCol(&quot;sentence_embeddings&quot;)\
    .setPoolingStrategy(&quot;AVERAGE&quot;)

# 3. Mental Disorder MultiClassifier (Using the provided model name)
multilabel_classifier = MultiClassifierDLModel.pretrained(&quot;multiclassifierdl_mental_disorder&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence_embeddings&quot;]) \
    .setOutputCol(&quot;prediction&quot;)\
    .setThreshold(0.999)

# Creating the pipeline
clf_pipeline = Pipeline(stages=[
    document_assembler,
    tokenizer,
    word_embeddings,
    sentence_embeddings,
    multilabel_classifier
])

# Sample text list
text_list = [
    &quot;&quot;&quot;The patient verbalizes feelings of worthlessness and recurrent thoughts of death, necessitating immediate intervention for severe depression.&quot;&quot;&quot;,
    &quot;&quot;&quot;Monitoring the patient for potential side effects of lithium therapy, initiated to manage the mood fluctuations of bipolar disorder.&quot;&quot;&quot;,
    &quot;&quot;&quot;Commenced CBT to equip the patient with coping strategies for persistent irrational fears and nervousness stemming from their anxiety disorder.&quot;&quot;&quot;,
    &quot;&quot;&quot;Michael Anderson takes medications for schizophrenia, hypertension, hyperlipidemia, and migraines.&quot;&quot;&quot;,
    &quot;&quot;&quot;With a clinical presentation of persistent wheezing and respiratory discomfort, the patient has been conclusively diagnosed with Asthma, necessitating immediate commencement of anti-inflammatory medications.&quot;&quot;&quot;
]

# Creating a DataFrame
df = spark.createDataFrame(text_list, StringType()).toDF(&quot;text&quot;)


result = clf_pipeline.fit(df).transform(df)
```
```scala
val documentAssembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)

val tokenizer = new Tokenizer()
    .setInputCols(Array(&quot;document&quot;))
    .setOutputCol(&quot;token&quot;)

val wordEmbeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;document&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)

val sentence_embeddings = new SentenceEmbeddings()\
    .setInputCols(Array(&quot;document&quot;, &quot;embeddings&quot;)) \
    .setOutputCol(&quot;sentence_embeddings&quot;) \
    .setPoolingStrategy(&quot;AVERAGE&quot;)

val multiclassifierdl = MultiClassifierDLModel.pretrained(&quot;multiclassifierdl_mental_disorder&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols(&quot;sentence_embeddings&quot;)\
    .setOutputCol(&quot;predicted_class&quot;)

val clf_pipeline = new Pipeline().setStages(Array(
    documentAssembler,
    tokenizer,
    wordEmbeddings,
    sentence_embeddings,
    multiclassifierdl
))

val data = Seq(Array(
    &quot;&quot;&quot;The patient verbalizes feelings of worthlessness and recurrent thoughts of death, necessitating immediate intervention for severe depression.&quot;&quot;&quot;,
    &quot;&quot;&quot;Monitoring the patient for potential side effects of lithium therapy, initiated to manage the mood fluctuations of bipolar disorder.&quot;&quot;&quot;,
    &quot;&quot;&quot;Commenced CBT to equip the patient with coping strategies for persistent irrational fears and nervousness stemming from their anxiety disorder.&quot;&quot;&quot;,
    &quot;&quot;&quot;Michael Anderson takes medications for schizophrenia, hypertension, hyperlipidemia, and migraines.&quot;&quot;&quot;,
    &quot;&quot;&quot;With a clinical presentation of persistent wheezing and respiratory discomfort, the patient has been conclusively diagnosed with Asthma, necessitating immediate commencement of anti-inflammatory medications.&quot;&quot;&quot;,
    )).toDS.toDF(&quot;text&quot;)

val result = clf_pipeline.fit(data).transform(data)

```
&lt;/div&gt;

## Results

```bash
+------------------------------------------------------------------------------------------------------------------------------------------------------+------------------+
|                                                                                                                                                  text|            result|
+------------------------------------------------------------------------------------------------------------------------------------------------------+------------------+
|         The patient verbalizes feelings of worthlessness and recurrent thoughts of death, necessitating immediate intervention for severe depression.|      [Depression]|
|                  Monitoring the patient for potential side effects of lithium therapy, initiated to manage the mood fluctuations of bipolar disorder.|[Bipolar disorder]|
|       Commenced CBT to equip the patient with coping strategies for persistent irrational fears and nervousness stemming from their anxiety disorder.|[Anxiety disorder]|
|                                                    Michael Anderson takes medications for schizophrenia, hypertension, hyperlipidemia, and migraines.|   [Schizophrenia]|
|With a clinical presentation of persistent wheezing and respiratory discomfort, the patient has been conclusively diagnosed with Asthma, necessitat...|              [No]|
+------------------------------------------------------------------------------------------------------------------------------------------------------+------------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|multiclassifierdl_mental_disorder|
|Compatibility:|Healthcare NLP 5.1.1+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence_embeddings]|
|Output Labels:|[class]|
|Language:|en|
|Size:|87.8 MB|
|Dependencies:|`embeding_clinical`|

## References

Trained with the in-house dataset

## Sample text from the training dataset

Schizophrenia:
The patient was diagnosed with schizophrenia at the age of 22 after a series of intense psychotic episodes.
The patient often describes hearing voices that others don't hear and harbors a persistent belief in unfounded conspiracies, indicative of schizophrenia.
The patient has been prescribed second-generation antipsychotics and will be undergoing cognitive behavioral therapy to help manage the symptoms of schizophrenia.
Depression:
Mrs. Thompson first sought treatment for depression during her late 20s, shortly after a series of personal losses.
She often expresses feelings of hopelessness, has a persistent low mood, and lacks interest in activities she once enjoyed, classic signs of depression.
Mrs. Thompson will continue her selective serotonin reuptake inhibitor (SSRI) medication and engage in weekly psychotherapy sessions to address her depressive symptoms.
Bipolar Disorder:
Mr. Gray was diagnosed with bipolar disorder at the age of 27 following an episode of mania that was preceded by a deep depressive phase.
He cycles between periods of elevated mood, increased energy, and impulsiveness, and phases of intense sadness and lethargy, consistent with bipolar disorder.
The management approach for Mr. Gray includes mood stabilizers like lithium, coupled with cognitive-behavioral therapy to monitor and address the mood swings of bipolar disorder.
Anxiety Disorder:
The patient has been experiencing generalized anxiety disorder symptoms for the past six years, often linked to work-related stress.
The patient describes persistent feelings of restlessness, muscle tension, and overwhelming worry about everyday events and activities, common to those with an anxiety disorder.
A combination of cognitive behavioral therapy and an anxiolytic medication has been advised to alleviate the distressing symptoms of the anxiety disorder.

## Benchmarking

```bash
label              tp   fp      fn    prec          rec         f1
Other/Unknown      39   10      22    0.79591835   0.6393443    0.7090909
Depression         120  18      19    0.8695652    0.8633093    0.866426
No                 28   21      27    0.93203884   0.9142857    0.9230769
Anxiety_disorder   136  15      18    0.90066224   0.8831169    0.8918033
Bipolar_disorder   101  5       10    0.9528302    0.9099099    0.9308756
Schizophrenia      66   4       23    0.94285715   0.74157304   0.8301887
Macro-average      750  73     119    0.89897865   0.8252565    0.8605415
Micro-average      750  73     119    0.9113001    0.863061     0.886524
```</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="en" /><category term="text_classification" /><category term="mental_disorder" /><category term="mental_health" /><category term="tensorflow" /><summary type="html">Description The PHS-BERT Mental Disorder Classifier Model classifies text based on the following mental disorders. (Schizophrenia, Depression, Bipolar disorder, Anxiety disorder). The Mental Disorder Classifier Model is a specialized text classification system, engineered to accurately identify and categorize textual mentions of four prominent respiratory diseases: Schizophrenia, Depression, Bipolar disorder, Anxiety disorder. More detailed information about classes as follows: Schizophrenia: This category is designated for text mentions that correspond to Schizophrenia, a mental disorder characterized by thought disorders, hallucinations, and often involving delusional beliefs and cognitive challenges. Example: “My brother’s hallucinations, a symptom of his schizophrenia, make daily tasks challenging for him.” Depression: Textual content which implicates Depression, a pervasive mental health disorder marked by persistent feelings of sadness, loss of interest in activities, and potential physical health alterations, is classified here. Example: “The heavy weight of depression often leaves me struggling to find joy in activities I once loved.” Bipolar Disorder: Entries here incorporate text alluding to Bipolar Disorder, a mental health condition distinguished by stark fluctuations in mood, transitioning between manic highs and depressive lows. Example: “Bipolar disorder has my mood swinging from exhilarating happiness to debilitating lows without warning.” Anxiety Disorder: Textual mentions signifying Anxiety Disorder, which involves persistent, excessive worry, nervousness, and physiological effects, are classified under this label. Example: “My anxiety disorder frequently sets my heart racing and mind spiralling over mere hypothetical scenarios.” Predicted Entities Anxiety Disorder, Bipolar disorder, No, Schizophrenia, Depression, Other/Unknown Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU # 1. Document assembler document_assembler = DocumentAssembler() \ .setInputCol(&quot;text&quot;) \ .setOutputCol(&quot;document&quot;) tokenizer = Tokenizer()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;, &quot;token&quot;])\ .setOutputCol(&quot;word_embeddings&quot;) sentence_embeddings = SentenceEmbeddings()\ .setInputCols([&quot;document&quot;, &quot;word_embeddings&quot;])\ .setOutputCol(&quot;sentence_embeddings&quot;)\ .setPoolingStrategy(&quot;AVERAGE&quot;) # 3. Mental Disorder MultiClassifier (Using the provided model name) multilabel_classifier = MultiClassifierDLModel.pretrained(&quot;multiclassifierdl_mental_disorder&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence_embeddings&quot;]) \ .setOutputCol(&quot;prediction&quot;)\ .setThreshold(0.999) # Creating the pipeline clf_pipeline = Pipeline(stages=[ document_assembler, tokenizer, word_embeddings, sentence_embeddings, multilabel_classifier ]) # Sample text list text_list = [ &quot;&quot;&quot;The patient verbalizes feelings of worthlessness and recurrent thoughts of death, necessitating immediate intervention for severe depression.&quot;&quot;&quot;, &quot;&quot;&quot;Monitoring the patient for potential side effects of lithium therapy, initiated to manage the mood fluctuations of bipolar disorder.&quot;&quot;&quot;, &quot;&quot;&quot;Commenced CBT to equip the patient with coping strategies for persistent irrational fears and nervousness stemming from their anxiety disorder.&quot;&quot;&quot;, &quot;&quot;&quot;Michael Anderson takes medications for schizophrenia, hypertension, hyperlipidemia, and migraines.&quot;&quot;&quot;, &quot;&quot;&quot;With a clinical presentation of persistent wheezing and respiratory discomfort, the patient has been conclusively diagnosed with Asthma, necessitating immediate commencement of anti-inflammatory medications.&quot;&quot;&quot; ] # Creating a DataFrame df = spark.createDataFrame(text_list, StringType()).toDF(&quot;text&quot;) result = clf_pipeline.fit(df).transform(df) val documentAssembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val tokenizer = new Tokenizer() .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;token&quot;) val wordEmbeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;document&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val sentence_embeddings = new SentenceEmbeddings()\ .setInputCols(Array(&quot;document&quot;, &quot;embeddings&quot;)) \ .setOutputCol(&quot;sentence_embeddings&quot;) \ .setPoolingStrategy(&quot;AVERAGE&quot;) val multiclassifierdl = MultiClassifierDLModel.pretrained(&quot;multiclassifierdl_mental_disorder&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols(&quot;sentence_embeddings&quot;)\ .setOutputCol(&quot;predicted_class&quot;) val clf_pipeline = new Pipeline().setStages(Array( documentAssembler, tokenizer, wordEmbeddings, sentence_embeddings, multiclassifierdl )) val data = Seq(Array( &quot;&quot;&quot;The patient verbalizes feelings of worthlessness and recurrent thoughts of death, necessitating immediate intervention for severe depression.&quot;&quot;&quot;, &quot;&quot;&quot;Monitoring the patient for potential side effects of lithium therapy, initiated to manage the mood fluctuations of bipolar disorder.&quot;&quot;&quot;, &quot;&quot;&quot;Commenced CBT to equip the patient with coping strategies for persistent irrational fears and nervousness stemming from their anxiety disorder.&quot;&quot;&quot;, &quot;&quot;&quot;Michael Anderson takes medications for schizophrenia, hypertension, hyperlipidemia, and migraines.&quot;&quot;&quot;, &quot;&quot;&quot;With a clinical presentation of persistent wheezing and respiratory discomfort, the patient has been conclusively diagnosed with Asthma, necessitating immediate commencement of anti-inflammatory medications.&quot;&quot;&quot;, )).toDS.toDF(&quot;text&quot;) val result = clf_pipeline.fit(data).transform(data) Results +------------------------------------------------------------------------------------------------------------------------------------------------------+------------------+ | text| result| +------------------------------------------------------------------------------------------------------------------------------------------------------+------------------+ | The patient verbalizes feelings of worthlessness and recurrent thoughts of death, necessitating immediate intervention for severe depression.| [Depression]| | Monitoring the patient for potential side effects of lithium therapy, initiated to manage the mood fluctuations of bipolar disorder.|[Bipolar disorder]| | Commenced CBT to equip the patient with coping strategies for persistent irrational fears and nervousness stemming from their anxiety disorder.|[Anxiety disorder]| | Michael Anderson takes medications for schizophrenia, hypertension, hyperlipidemia, and migraines.| [Schizophrenia]| |With a clinical presentation of persistent wheezing and respiratory discomfort, the patient has been conclusively diagnosed with Asthma, necessitat...| [No]| +------------------------------------------------------------------------------------------------------------------------------------------------------+------------------+ Model Information Model Name: multiclassifierdl_mental_disorder Compatibility: Healthcare NLP 5.1.1+ License: Licensed Edition: Official Input Labels: [sentence_embeddings] Output Labels: [class] Language: en Size: 87.8 MB Dependencies: embeding_clinical References Trained with the in-house dataset Sample text from the training dataset Schizophrenia: The patient was diagnosed with schizophrenia at the age of 22 after a series of intense psychotic episodes. The patient often describes hearing voices that others don’t hear and harbors a persistent belief in unfounded conspiracies, indicative of schizophrenia. The patient has been prescribed second-generation antipsychotics and will be undergoing cognitive behavioral therapy to help manage the symptoms of schizophrenia. Depression: Mrs. Thompson first sought treatment for depression during her late 20s, shortly after a series of personal losses. She often expresses feelings of hopelessness, has a persistent low mood, and lacks interest in activities she once enjoyed, classic signs of depression. Mrs. Thompson will continue her selective serotonin reuptake inhibitor (SSRI) medication and engage in weekly psychotherapy sessions to address her depressive symptoms. Bipolar Disorder: Mr. Gray was diagnosed with bipolar disorder at the age of 27 following an episode of mania that was preceded by a deep depressive phase. He cycles between periods of elevated mood, increased energy, and impulsiveness, and phases of intense sadness and lethargy, consistent with bipolar disorder. The management approach for Mr. Gray includes mood stabilizers like lithium, coupled with cognitive-behavioral therapy to monitor and address the mood swings of bipolar disorder. Anxiety Disorder: The patient has been experiencing generalized anxiety disorder symptoms for the past six years, often linked to work-related stress. The patient describes persistent feelings of restlessness, muscle tension, and overwhelming worry about everyday events and activities, common to those with an anxiety disorder. A combination of cognitive behavioral therapy and an anxiolytic medication has been advised to alleviate the distressing symptoms of the anxiety disorder. Benchmarking label tp fp fn prec rec f1 Other/Unknown 39 10 22 0.79591835 0.6393443 0.7090909 Depression 120 18 19 0.8695652 0.8633093 0.866426 No 28 21 27 0.93203884 0.9142857 0.9230769 Anxiety_disorder 136 15 18 0.90066224 0.8831169 0.8918033 Bipolar_disorder 101 5 10 0.9528302 0.9099099 0.9308756 Schizophrenia 66 4 23 0.94285715 0.74157304 0.8301887 Macro-average 750 73 119 0.89897865 0.8252565 0.8605415 Micro-average 750 73 119 0.9113001 0.863061 0.886524</summary></entry><entry><title type="html">Detect Problems, Tests and Treatments (ner_clinical) in Finnish</title><link href="/2023/10/16/ner_clinical_fi.html" rel="alternate" type="text/html" title="Detect Problems, Tests and Treatments (ner_clinical) in Finnish" /><published>2023-10-16T00:00:00+00:00</published><updated>2023-10-16T00:00:00+00:00</updated><id>/2023/10/16/ner_clinical_fi</id><content type="html" xml:base="/2023/10/16/ner_clinical_fi.html">## Description

Pretrained named entity recognition deep learning model for clinical terms in Finnish. The SparkNLP deep learning model (MedicalNerModel) is inspired by a former state of the art model for NER: Chiu &amp; Nicols, Named Entity Recognition with Bidirectional LSTM-CNN.

## Predicted Entities

`PROBLEM`, `TEST`, `TREATMENT`

{:.btn-box}
[Live Demo](https://demo.johnsnowlabs.com/healthcare/NER_CLINICAL_MULTI/){:.button.button-orange}
[Open in Colab](https://colab.research.google.com/github/JohnSnowLabs/spark-nlp-workshop/blob/master/tutorials/streamlit_notebooks/healthcare/NER_CLINICAL_MULTI.ipynb){:.button.button-orange.button-orange-trans.co.button-icon}
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_clinical_fi_5.1.1_3.0_1697492251091.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_clinical_fi_5.1.1_3.0_1697492251091.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl&quot;, &quot;xx&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer()\
    .setInputCols([&quot;sentence&quot;])\
    .setOutputCol(&quot;token&quot;)

embeddings = WordEmbeddingsModel.pretrained(&quot;w2v_cc_300d&quot;,&quot;fi&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)

ner_model = MedicalNerModel.pretrained(&quot;ner_clinical&quot;, &quot;fi&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverterInternal()\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\
    .setOutputCol(&quot;ner_chunk&quot;)

pipeline = Pipeline(stages=[
    document_assembler, 
    sentence_detector,
    tokenizer,
    embeddings,
    ner_model,
    ner_converter   
    ])

sample_text = &quot;&quot;&quot;Potilaan virtsanalyysi 19.10.97 osoitti kohtalaisen okkulttista verta , pH 5 , albumiini 1+, valkosoluja läsnä ,2-50 punasoluja , 10-20 valkosoluja , joitain bakteereja ja kohtalaisesti virtsarakon epiteelisoluja. FBS alle 200 = 0 yksikköä CZI FBS 201-250 = 2 yksikköä CZI FBS 251-300 = 4 yksikköä CZI FBS 301-350 = 6 yksikköä CZI FBS351-400 = 8 yksikköä CZI FBS suurempi kuin 400 = 10 yksikköä CZI.&quot;&quot;&quot;

data = spark.createDataFrame([[sample_text]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)

val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl&quot;, &quot;xx&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)

val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)

val embeddings = WordEmbeddingsModel.pretrained(&quot;w2v_cc_300d&quot;,&quot;fi&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)

val ner_model = MedicalNerModel.pretrained(&quot;ner_clinical&quot;, &quot;fi&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)

val ner_converter = new NerConverterInternal()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

val pipeline = new Pipeline().setStages(Array(
    document_assembler, 
    sentence_detector,
    tokenizer,
    embeddings,
    ner_model,
    ner_converter   
))

sample_data = Seq(&quot;&quot;&quot;Potilaan virtsanalyysi 19.10.97 osoitti kohtalaisen okkulttista verta , pH 5 , albumiini 1+, valkosoluja läsnä ,2-50 punasoluja , 10-20 valkosoluja , joitain bakteereja ja kohtalaisesti virtsarakon epiteelisoluja. FBS alle 200 = 0 yksikköä CZI FBS 201-250 = 2 yksikköä CZI FBS 251-300 = 4 yksikköä CZI FBS 301-350 = 6 yksikköä CZI FBS351-400 = 8 yksikköä CZI FBS suurempi kuin 400 = 10 yksikköä CZI.&quot;&quot;&quot;).toDS.toDF(&quot;text&quot;)


val result = pipeline.fit(sample_data).transform(sample_data)

```
&lt;/div&gt;

## Results

```bash
+----------------------------------------+-----+---+---------+
|chunk                                   |begin|end|ner_label|
+----------------------------------------+-----+---+---------+
|Potilaan virtsanalyysi                  |0    |21 |TEST     |
|kohtalaisen okkulttista verta           |40   |68 |PROBLEM  |
|pH                                      |72   |73 |TEST     |
|albumiini                               |79   |87 |TEST     |
|valkosoluja                             |93   |103|TEST     |
|punasoluja                              |117  |126|TEST     |
|valkosoluja                             |136  |146|TEST     |
|joitain bakteereja                      |150  |167|PROBLEM  |
|kohtalaisesti virtsarakon epiteelisoluja|172  |211|PROBLEM  |
|FBS                                     |214  |216|TEST     |
|CZI                                     |240  |242|TREATMENT|
|FBS                                     |244  |246|TEST     |
|CZI                                     |269  |271|TREATMENT|
|FBS                                     |273  |275|TEST     |
|CZI                                     |298  |300|TREATMENT|
|FBS                                     |302  |304|TEST     |
|CZI                                     |327  |329|TREATMENT|
|FBS351-400                              |331  |340|TEST     |
|CZI                                     |355  |357|TREATMENT|
|FBS                                     |359  |361|TEST     |
|CZI                                     |395  |397|TREATMENT|
+----------------------------------------+-----+---+---------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_clinical|
|Compatibility:|Healthcare NLP 5.1.1+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|fi|
|Size:|2.9 MB|

## Benchmarking

```bash
       label  precision    recall  f1-score   support
   TREATMENT       0.67      0.74      0.70       275
        TEST       0.93      0.73      0.82       350
     PROBLEM       0.73      0.76      0.75       678
   micro-avg       0.76      0.75      0.75      1303
   macro-avg       0.78      0.74      0.76      1303
weighted-avg       0.77      0.75      0.76      1303
```</content><author><name>John Snow Labs</name></author><category term="ner" /><category term="clinical" /><category term="fi" /><category term="licensed" /><summary type="html">Description Pretrained named entity recognition deep learning model for clinical terms in Finnish. The SparkNLP deep learning model (MedicalNerModel) is inspired by a former state of the art model for NER: Chiu &amp;amp; Nicols, Named Entity Recognition with Bidirectional LSTM-CNN. Predicted Entities PROBLEM, TEST, TREATMENT Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl&quot;, &quot;xx&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer()\ .setInputCols([&quot;sentence&quot;])\ .setOutputCol(&quot;token&quot;) embeddings = WordEmbeddingsModel.pretrained(&quot;w2v_cc_300d&quot;,&quot;fi&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner_model = MedicalNerModel.pretrained(&quot;ner_clinical&quot;, &quot;fi&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverterInternal()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;) pipeline = Pipeline(stages=[ document_assembler, sentence_detector, tokenizer, embeddings, ner_model, ner_converter ]) sample_text = &quot;&quot;&quot;Potilaan virtsanalyysi 19.10.97 osoitti kohtalaisen okkulttista verta , pH 5 , albumiini 1+, valkosoluja läsnä ,2-50 punasoluja , 10-20 valkosoluja , joitain bakteereja ja kohtalaisesti virtsarakon epiteelisoluja. FBS alle 200 = 0 yksikköä CZI FBS 201-250 = 2 yksikköä CZI FBS 251-300 = 4 yksikköä CZI FBS 301-350 = 6 yksikköä CZI FBS351-400 = 8 yksikköä CZI FBS suurempi kuin 400 = 10 yksikköä CZI.&quot;&quot;&quot; data = spark.createDataFrame([[sample_text]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl&quot;, &quot;xx&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val embeddings = WordEmbeddingsModel.pretrained(&quot;w2v_cc_300d&quot;,&quot;fi&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner_model = MedicalNerModel.pretrained(&quot;ner_clinical&quot;, &quot;fi&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pipeline = new Pipeline().setStages(Array( document_assembler, sentence_detector, tokenizer, embeddings, ner_model, ner_converter )) sample_data = Seq(&quot;&quot;&quot;Potilaan virtsanalyysi 19.10.97 osoitti kohtalaisen okkulttista verta , pH 5 , albumiini 1+, valkosoluja läsnä ,2-50 punasoluja , 10-20 valkosoluja , joitain bakteereja ja kohtalaisesti virtsarakon epiteelisoluja. FBS alle 200 = 0 yksikköä CZI FBS 201-250 = 2 yksikköä CZI FBS 251-300 = 4 yksikköä CZI FBS 301-350 = 6 yksikköä CZI FBS351-400 = 8 yksikköä CZI FBS suurempi kuin 400 = 10 yksikköä CZI.&quot;&quot;&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(sample_data).transform(sample_data) Results +----------------------------------------+-----+---+---------+ |chunk |begin|end|ner_label| +----------------------------------------+-----+---+---------+ |Potilaan virtsanalyysi |0 |21 |TEST | |kohtalaisen okkulttista verta |40 |68 |PROBLEM | |pH |72 |73 |TEST | |albumiini |79 |87 |TEST | |valkosoluja |93 |103|TEST | |punasoluja |117 |126|TEST | |valkosoluja |136 |146|TEST | |joitain bakteereja |150 |167|PROBLEM | |kohtalaisesti virtsarakon epiteelisoluja|172 |211|PROBLEM | |FBS |214 |216|TEST | |CZI |240 |242|TREATMENT| |FBS |244 |246|TEST | |CZI |269 |271|TREATMENT| |FBS |273 |275|TEST | |CZI |298 |300|TREATMENT| |FBS |302 |304|TEST | |CZI |327 |329|TREATMENT| |FBS351-400 |331 |340|TEST | |CZI |355 |357|TREATMENT| |FBS |359 |361|TEST | |CZI |395 |397|TREATMENT| +----------------------------------------+-----+---+---------+ Model Information Model Name: ner_clinical Compatibility: Healthcare NLP 5.1.1+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: fi Size: 2.9 MB Benchmarking label precision recall f1-score support TREATMENT 0.67 0.74 0.70 275 TEST 0.93 0.73 0.82 350 PROBLEM 0.73 0.76 0.75 678 micro-avg 0.76 0.75 0.75 1303 macro-avg 0.78 0.74 0.76 1303 weighted-avg 0.77 0.75 0.76 1303</summary></entry><entry><title type="html">Detect PHI for Deidentification (LangTest - Generic Augmented - UpperCased)</title><link href="/2023/10/16/ner_deid_generic_augmented_allUpperCased_langtest_en.html" rel="alternate" type="text/html" title="Detect PHI for Deidentification (LangTest - Generic Augmented - UpperCased)" /><published>2023-10-16T00:00:00+00:00</published><updated>2023-10-16T00:00:00+00:00</updated><id>/2023/10/16/ner_deid_generic_augmented_allUpperCased_langtest_en</id><content type="html" xml:base="/2023/10/16/ner_deid_generic_augmented_allUpperCased_langtest_en.html">## Description

The `ner_deid_generic_augmented_allUpperCased_langtest` model is a Named Entity Recognition model that annotates text to find protected health information that may need to be de-identified. This NER model is trained and augmented with the &quot;langtest&quot; library. The dataset is an uppercased version of the i2b2 train set and augmented i2b2 train set.

| **test_type**        | **before fail_count** | **after fail_count** | **before pass_count** | **after pass_count** | **minimum pass_rate** | **before pass_rate** | **after pass_rate** |
|----------------------|-----------------------|----------------------|-----------------------|----------------------|-----------------------|----------------------|---------------------|
| **add_ocr_typo**     | 426                   | 399                  | 11877                 | 11904                | 95%                   | 97%                  | 97%                 |
| **add_typo**         | 246                   | 244                  | 17400                 | 17426                | 95%                   | 99%                  | 99%                 |
| **lowercase**        | 1508                  | 352                  | 17150                 | 18306                | 95%                   | 92%                  | 98%                 |
| **swap_entities**    | 394                   | 381                  | 3688                  | 3708                 | 95%                   | 90%                  | 91%                 |
| **titlecase**        | 1181                  | 334                  | 17346                 | 18193                | 95%                   | 94%                  | 98%                 |
| **weighted average** | **3755**              | **1710**             | **67461**             | **69537**            | **95%**               | **94.73%**           | **97.60%**          |

## Predicted Entities

`DATE`, `NAME`, `LOCATION`, `PROFESSION`, `CONTACT`, `AGE`, `ID`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_deid_generic_augmented_allUpperCased_langtest_en_5.1.1_3.0_1697454771302.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_deid_generic_augmented_allUpperCased_langtest_en_5.1.1_3.0_1697454771302.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetector() \
    .setInputCols([&quot;document&quot;]) \
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
    .setOutputCol(&quot;embeddings&quot;)

deid_ner = MedicalNerModel.pretrained(&quot;ner_deid_generic_augmented_allUpperCased_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverter()\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\
    .setOutputCol(&quot;ner_chunk_generic&quot;)

nlpPipeline = Pipeline(stages=[
    document_assembler, 
    sentence_detector, 
    tokenizer, 
    word_embeddings, 
    deid_ner, 
    ner_converter])

model = nlpPipeline.fit(spark.createDataFrame([[&quot;&quot;]]).toDF(&quot;text&quot;))

results = model.transform(spark.createDataFrame(pd.DataFrame({&quot;text&quot;: [&quot;&quot;&quot;A. RECORD DATE : 2093-01-13, DAVID HALE, M.D., NAME : HENDRICKSON, ORA MR. # 7194334 DATE : 01/13/93 PCP : OLIVEIRA, 25 -YEAR-OLD, RECORD DATE : 1-11-2000. COCKE COUNTY BAPTIST HOSPITAL. 0295 KEATS STREET. PHONE : (302) 786-5227.&quot;&quot;]})))
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)

val sentence_detector = new SentenceDetector()
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)

val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)

val word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)

val deid_ner = MedicalNerModel.pretrained(&quot;ner_deid_generic_augmented_allUpperCased_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)

val ner_converter = new NerConverter()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk_generic&quot;)

val nlpPipeline = new Pipeline().setStages(Array(
    document_assembler, 
    sentence_detector, 
    tokenizer, 
    word_embeddings, 
    deid_ner, 
    ner_converter))

val data = Seq(&quot;&quot;&quot;A. RECORD DATE : 2093-01-13, DAVID HALE, M.D., NAME : HENDRICKSON, ORA MR. # 7194334 DATE : 01/13/93 PCP : OLIVEIRA, 25 -YEAR-OLD, RECORD DATE : 1-11-2000. COCKE COUNTY BAPTIST HOSPITAL. 0295 KEATS STREET. PHONE : (302) 786-5227.&quot;&quot;&quot;).toDS.toDF(&quot;text&quot;)

val result = nlpPipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+-----------------------------+---------+
|chunk                        |ner_label|
+-----------------------------+---------+
|2093-01-13                   |DATE     |
|DAVID HALE                   |NAME     |
|HENDRICKSON, ORA             |NAME     |
|7194334                      |ID       |
|01/13/93                     |DATE     |
|OLIVEIRA                     |NAME     |
|25                           |AGE      |
|1-11-2000                    |DATE     |
|COCKE COUNTY BAPTIST HOSPITAL|LOCATION |
|0295 KEATS STREET            |LOCATION |
|(302) 786-5227               |CONTACT  |
+-----------------------------+---------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_deid_generic_augmented_allUpperCased_langtest|
|Compatibility:|Healthcare NLP 5.1.1+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|14.7 MB|

## References

A custom data set which is created from the i2b2-PHI train and the augmented version of the i2b2-PHI train set is used.

## Benchmarking

```bash
label         precision  recall  f1-score  support 
AGE           0.95       0.95    0.95      395     
CONTACT       0.93       0.86    0.90      100     
DATE          0.98       0.98    0.98      2355    
ID            0.84       0.80    0.82      325     
LOCATION      0.85       0.82    0.84      756     
NAME          0.93       0.94    0.94      1314    
PROFESSION    0.62       0.53    0.57      113     
micro-avg     0.93       0.93    0.93      5358    
macro-avg     0.87       0.84    0.86      5358    
weighted-avg  0.93       0.93    0.93      5358    
```</content><author><name>John Snow Labs</name></author><category term="en" /><category term="ner" /><category term="clinical" /><category term="licensed" /><category term="deid" /><category term="uppercase" /><category term="langtest" /><summary type="html">Description The ner_deid_generic_augmented_allUpperCased_langtest model is a Named Entity Recognition model that annotates text to find protected health information that may need to be de-identified. This NER model is trained and augmented with the “langtest” library. The dataset is an uppercased version of the i2b2 train set and augmented i2b2 train set. test_type before fail_count after fail_count before pass_count after pass_count minimum pass_rate before pass_rate after pass_rate add_ocr_typo 426 399 11877 11904 95% 97% 97% add_typo 246 244 17400 17426 95% 99% 99% lowercase 1508 352 17150 18306 95% 92% 98% swap_entities 394 381 3688 3708 95% 90% 91% titlecase 1181 334 17346 18193 95% 94% 98% weighted average 3755 1710 67461 69537 95% 94.73% 97.60% Predicted Entities DATE, NAME, LOCATION, PROFESSION, CONTACT, AGE, ID Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetector() \ .setInputCols([&quot;document&quot;]) \ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) deid_ner = MedicalNerModel.pretrained(&quot;ner_deid_generic_augmented_allUpperCased_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverter()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\ .setOutputCol(&quot;ner_chunk_generic&quot;) nlpPipeline = Pipeline(stages=[ document_assembler, sentence_detector, tokenizer, word_embeddings, deid_ner, ner_converter]) model = nlpPipeline.fit(spark.createDataFrame([[&quot;&quot;]]).toDF(&quot;text&quot;)) results = model.transform(spark.createDataFrame(pd.DataFrame({&quot;text&quot;: [&quot;&quot;&quot;A. RECORD DATE : 2093-01-13, DAVID HALE, M.D., NAME : HENDRICKSON, ORA MR. # 7194334 DATE : 01/13/93 PCP : OLIVEIRA, 25 -YEAR-OLD, RECORD DATE : 1-11-2000. COCKE COUNTY BAPTIST HOSPITAL. 0295 KEATS STREET. PHONE : (302) 786-5227.&quot;&quot;]}))) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = new SentenceDetector() .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val deid_ner = MedicalNerModel.pretrained(&quot;ner_deid_generic_augmented_allUpperCased_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverter() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk_generic&quot;) val nlpPipeline = new Pipeline().setStages(Array( document_assembler, sentence_detector, tokenizer, word_embeddings, deid_ner, ner_converter)) val data = Seq(&quot;&quot;&quot;A. RECORD DATE : 2093-01-13, DAVID HALE, M.D., NAME : HENDRICKSON, ORA MR. # 7194334 DATE : 01/13/93 PCP : OLIVEIRA, 25 -YEAR-OLD, RECORD DATE : 1-11-2000. COCKE COUNTY BAPTIST HOSPITAL. 0295 KEATS STREET. PHONE : (302) 786-5227.&quot;&quot;&quot;).toDS.toDF(&quot;text&quot;) val result = nlpPipeline.fit(data).transform(data) Results +-----------------------------+---------+ |chunk |ner_label| +-----------------------------+---------+ |2093-01-13 |DATE | |DAVID HALE |NAME | |HENDRICKSON, ORA |NAME | |7194334 |ID | |01/13/93 |DATE | |OLIVEIRA |NAME | |25 |AGE | |1-11-2000 |DATE | |COCKE COUNTY BAPTIST HOSPITAL|LOCATION | |0295 KEATS STREET |LOCATION | |(302) 786-5227 |CONTACT | +-----------------------------+---------+ Model Information Model Name: ner_deid_generic_augmented_allUpperCased_langtest Compatibility: Healthcare NLP 5.1.1+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 14.7 MB References A custom data set which is created from the i2b2-PHI train and the augmented version of the i2b2-PHI train set is used. Benchmarking label precision recall f1-score support AGE 0.95 0.95 0.95 395 CONTACT 0.93 0.86 0.90 100 DATE 0.98 0.98 0.98 2355 ID 0.84 0.80 0.82 325 LOCATION 0.85 0.82 0.84 756 NAME 0.93 0.94 0.94 1314 PROFESSION 0.62 0.53 0.57 113 micro-avg 0.93 0.93 0.93 5358 macro-avg 0.87 0.84 0.86 5358 weighted-avg 0.93 0.93 0.93 5358</summary></entry><entry><title type="html">Detect Bacterial Species (LangTest)</title><link href="/2023/10/15/ner_bacterial_species_langtest_en.html" rel="alternate" type="text/html" title="Detect Bacterial Species (LangTest)" /><published>2023-10-15T00:00:00+00:00</published><updated>2023-10-15T00:00:00+00:00</updated><id>/2023/10/15/ner_bacterial_species_langtest_en</id><content type="html" xml:base="/2023/10/15/ner_bacterial_species_langtest_en.html">## Description

This model detects different types of species of bacteria in clinical texts. It is the version of [er_bacterial_species](https://nlp.johnsnowlabs.com/2021/04/01/ner_bacterial_species_en.html) model augmented with `langtest` library.

| **test_type**        | **before fail_count** | **after fail_count** | **before pass_count** | **after pass_count** | **minimum pass_rate** | **before pass_rate** | **after pass_rate** |
|----------------------|-----------------------|----------------------|-----------------------|----------------------|-----------------------|----------------------|---------------------|
| **lowercase**        | 200                   | 43                   | 864                   | 1021                 | 90%                   | 81%                  | 96%                 |
| **swap_entities**    | 66                    | 56                   | 264                   | 268                  | 75%                   | 80%                  | 83%                 |
| **titlecase**        | 273                   | 116                  | 791                   | 948                  | 85%                   | 74%                  | 89%                 |
| **uppercase**        | 305                   | 114                  | 760                   | 951                  | 90%                   | 71%                  | 89%                 |
| **weighted average** | **844**               | **329**              | **2679**              | **3188**             | **83%**               | **76.04%**           | **90.65%**          |

## Predicted Entities

`SPECIES`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_bacterial_species_langtest_en_5.1.1_3.0_1697377871284.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_bacterial_species_langtest_en_5.1.1_3.0_1697377871284.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)
         
sentence_detector = SentenceDetector()\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer()\
    .setInputCols([&quot;sentence&quot;])\
    .setOutputCol(&quot;token&quot;)

embeddings_clinical = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
    .setOutputCol(&quot;embeddings&quot;)

clinical_ner = MedicalNerModel.pretrained(&quot;ner_bacterial_species_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverter()\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\
    .setOutputCol(&quot;ner_chunk&quot;)

nlpPipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, embeddings_clinical, clinical_ner, ner_converter])

model = nlpPipeline.fit(spark.createDataFrame([[&quot;&quot;]]).toDF(&quot;text&quot;))

result = model.transform(spark.createDataFrame([[&quot;&quot;&quot;&quot;The PRP8 intein, the most widespread among fungi, occurs in important pathogens such as Histoplasma capsulatum and Paracoccidioides brasiliensis, from the Ajellomycetaceae family.&quot;&quot;&quot;&quot;]], [&quot;text&quot;]))
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
         
val sentence_detector = new SentenceDetector()
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)

val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)

val embeddings_clinical = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)

val ner = MedicalNerModel.pretrained(&quot;ner_bacterial_species_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)

val ner_converter = new NerConverter()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)
    
val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, embeddings_clinical, ner, ner_converter))

val data = Seq(&quot;&quot;&quot;The PRP8 intein, the most widespread among fungi, occurs in important pathogens such as Histoplasma capsulatum and Paracoccidioides brasiliensis, from the Ajellomycetaceae family.&quot;&quot;&quot;).toDS().toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+-----------------------------+---------+
|chunk                        |ner_label|
+-----------------------------+---------+
|Histoplasma capsulatum       |SPECIES  |
|Paracoccidioides brasiliensis|SPECIES  |
+-----------------------------+---------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_bacterial_species_langtest|
|Compatibility:|Healthcare NLP 5.1.1+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|14.7 MB|

## Benchmarking

```bash
label         precision  recall  f1-score  support 
SPECIES       0.84       0.90    0.87      521     
micro-avg     0.84       0.90    0.87      521     
macro-avg     0.84       0.90    0.87      521     
weighted-avg  0.84       0.90    0.87      521     
```</content><author><name>John Snow Labs</name></author><category term="en" /><category term="ner" /><category term="clinical" /><category term="licensed" /><category term="species" /><category term="langtest" /><summary type="html">Description This model detects different types of species of bacteria in clinical texts. It is the version of er_bacterial_species model augmented with langtest library. test_type before fail_count after fail_count before pass_count after pass_count minimum pass_rate before pass_rate after pass_rate lowercase 200 43 864 1021 90% 81% 96% swap_entities 66 56 264 268 75% 80% 83% titlecase 273 116 791 948 85% 74% 89% uppercase 305 114 760 951 90% 71% 89% weighted average 844 329 2679 3188 83% 76.04% 90.65% Predicted Entities SPECIES Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetector()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer()\ .setInputCols([&quot;sentence&quot;])\ .setOutputCol(&quot;token&quot;) embeddings_clinical = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) clinical_ner = MedicalNerModel.pretrained(&quot;ner_bacterial_species_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverter()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;) nlpPipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, embeddings_clinical, clinical_ner, ner_converter]) model = nlpPipeline.fit(spark.createDataFrame([[&quot;&quot;]]).toDF(&quot;text&quot;)) result = model.transform(spark.createDataFrame([[&quot;&quot;&quot;&quot;The PRP8 intein, the most widespread among fungi, occurs in important pathogens such as Histoplasma capsulatum and Paracoccidioides brasiliensis, from the Ajellomycetaceae family.&quot;&quot;&quot;&quot;]], [&quot;text&quot;])) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = new SentenceDetector() .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val embeddings_clinical = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_bacterial_species_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverter() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, embeddings_clinical, ner, ner_converter)) val data = Seq(&quot;&quot;&quot;The PRP8 intein, the most widespread among fungi, occurs in important pathogens such as Histoplasma capsulatum and Paracoccidioides brasiliensis, from the Ajellomycetaceae family.&quot;&quot;&quot;).toDS().toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +-----------------------------+---------+ |chunk |ner_label| +-----------------------------+---------+ |Histoplasma capsulatum |SPECIES | |Paracoccidioides brasiliensis|SPECIES | +-----------------------------+---------+ Model Information Model Name: ner_bacterial_species_langtest Compatibility: Healthcare NLP 5.1.1+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 14.7 MB Benchmarking label precision recall f1-score support SPECIES 0.84 0.90 0.87 521 micro-avg 0.84 0.90 0.87 521 macro-avg 0.84 0.90 0.87 521 weighted-avg 0.84 0.90 0.87 521</summary></entry><entry><title type="html">Detect Cellular/Molecular Biology Entities (LangTest)</title><link href="/2023/10/15/ner_cellular_langtest_en.html" rel="alternate" type="text/html" title="Detect Cellular/Molecular Biology Entities (LangTest)" /><published>2023-10-15T00:00:00+00:00</published><updated>2023-10-15T00:00:00+00:00</updated><id>/2023/10/15/ner_cellular_langtest_en</id><content type="html" xml:base="/2023/10/15/ner_cellular_langtest_en.html">## Description

Pretrained named entity recognition deep learning model for molecular biology-related terms. It is the version of [ner_cellular](https://nlp.johnsnowlabs.com/2021/03/31/ner_cellular_en.html) model augmented with `langtest` library.

| **test_type**        | **before fail_count** | **after fail_count** | **before pass_count** | **after pass_count** | **minimum pass_rate** | **before pass_rate** | **after pass_rate** |
|----------------------|-----------------------|----------------------|-----------------------|----------------------|-----------------------|----------------------|---------------------|
| **add_ocr_typo**     | 1240                  | 311                  | 738                   | 1667                 | 70%                   | 37%                  | 84%                 |
| **lowercase**        | 840                   | 437                  | 1153                  | 1556                 | 70%                   | 58%                  | 78%                 |
| **titlecase**        | 1404                  | 466                  | 589                   | 1527                 | 70%                   | 30%                  | 77%                 |
| **uppercase**        | 1788                  | 575                  | 205                   | 1418                 | 70%                   | 10%                  | 71%                 |
| **weighted average** | **5272**              | **1789**             | **2685**              | **6168**             | **70%**               | **33.74%**           | **77.52%**          |

## Predicted Entities

`DNA`, `Cell_type`, `Cell_line`, `RNA`, `Protein`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_cellular_langtest_en_5.1.1_3.0_1697371325344.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_cellular_langtest_en_5.1.1_3.0_1697371325344.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)
         
sentence_detector = SentenceDetector()\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer()\
    .setInputCols([&quot;sentence&quot;])\
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
    .setOutputCol(&quot;embeddings&quot;)

cellular_ner = MedicalNerModel.pretrained(&quot;ner_cellular_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverter()\
 	.setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\
 	.setOutputCol(&quot;ner_chunk&quot;)

nlpPipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, word_embeddings, cellular_ner, ner_converter])

model = nlpPipeline.fit(spark.createDataFrame([[&quot;&quot;]]).toDF(&quot;text&quot;))

result = model.transform(spark.createDataFrame([['Detection of various other intracellular signaling proteins is also described. Genetic characterization of transactivation of the human T-cell leukemia virus type 1 promoter: Binding of Tax to Tax-responsive element 1 is mediated by the cyclic AMP-responsive members of the CREB/ATF family of transcription factors. To achieve a better understanding of the mechanism of transactivation by Tax of human T-cell leukemia virus type 1 Tax-responsive element 1 (TRE-1), we developed a genetic approach with Saccharomyces cerevisiae. We constructed a yeast reporter strain containing the lacZ gene under the control of the CYC1 promoter associated with three copies of TRE-1. Expression of either the cyclic AMP response element-binding protein (CREB) or CREB fused to the GAL4 activation domain (GAD) in this strain did not modify the expression of the reporter gene. Tax alone was also inactive.']]).toDF(&quot;text&quot;))

```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
         
val sentence_detector = new SentenceDetector()
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)

val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)

val word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)

val celular_ner = MedicalNerModel.pretrained(&quot;ner_cellular_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)

val ner_converter = new NerConverter()
 	.setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
 	.setOutputCol(&quot;ner_chunk&quot;)

val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, cellular_ner, ner_converter))

val data = Seq(&quot;&quot;&quot;Detection of various other intracellular signaling proteins is also described. Genetic characterization of transactivation of the human T-cell leukemia virus type 1 promoter: Binding of Tax to Tax-responsive element 1 is mediated by the cyclic AMP-responsive members of the CREB/ATF family of transcription factors. To achieve a better understanding of the mechanism of transactivation by Tax of human T-cell leukemia virus type 1 Tax-responsive element 1 (TRE-1), we developed a genetic approach with Saccharomyces cerevisiae. We constructed a yeast reporter strain containing the lacZ gene under the control of the CYC1 promoter associated with three copies of TRE-1. Expression of either the cyclic AMP response element-binding protein (CREB) or CREB fused to the GAL4 activation domain (GAD) in this strain did not modify the expression of the reporter gene. Tax alone was also inactive.&quot;&quot;&quot;).toDS().toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+-------------------------------------------+---------+
|chunk                                      |ner_label|
+-------------------------------------------+---------+
|intracellular signaling proteins           |protein  |
|human T-cell leukemia virus type 1 promoter|DNA      |
|Tax                                        |protein  |
|Tax-responsive element 1                   |DNA      |
|cyclic AMP-responsive members              |protein  |
|CREB/ATF family                            |protein  |
|transcription factors                      |protein  |
|Tax                                        |protein  |
|Tax-responsive element 1                   |DNA      |
|TRE-1                                      |DNA      |
|lacZ gene                                  |DNA      |
|CYC1 promoter                              |DNA      |
|TRE-1                                      |DNA      |
|cyclic AMP response element-binding protein|protein  |
|CREB                                       |protein  |
|CREB                                       |protein  |
|GAL4 activation domain                     |protein  |
|GAD                                        |protein  |
|reporter gene                              |DNA      |
|Tax                                        |protein  |
+-------------------------------------------+---------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_cellular_langtest|
|Compatibility:|Healthcare NLP 5.1.1+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|14.5 MB|

## References

Trained on the [JNLPBA corpus](https://www.geniaproject.org/) containing more than 2.404 publication abstracts with 'embeddings_clinical'.

## Benchmarking

```bash
label         precision  recall  f1-score  support 
B-DNA         0.81       0.79    0.80      1026    
B-RNA         0.79       0.90    0.84      87      
B-cell_line   0.79       0.74    0.77      457     
B-cell_type   0.77       0.81    0.79      843     
B-protein     0.86       0.90    0.88      3630    
I-DNA         0.88       0.87    0.87      1776    
I-RNA         0.76       0.99    0.86      127     
I-cell_line   0.80       0.75    0.78      819     
I-cell_type   0.76       0.86    0.81      1185    
I-protein     0.85       0.86    0.85      3069    
micro-avg     0.83       0.85    0.84      13019   
macro-avg     0.81       0.85    0.82      13019   
weighted-avg  0.83       0.85    0.84      13019   
```</content><author><name>John Snow Labs</name></author><category term="en" /><category term="ner" /><category term="licensed" /><category term="clinical" /><category term="cellular" /><category term="langtest" /><summary type="html">Description Pretrained named entity recognition deep learning model for molecular biology-related terms. It is the version of ner_cellular model augmented with langtest library. test_type before fail_count after fail_count before pass_count after pass_count minimum pass_rate before pass_rate after pass_rate add_ocr_typo 1240 311 738 1667 70% 37% 84% lowercase 840 437 1153 1556 70% 58% 78% titlecase 1404 466 589 1527 70% 30% 77% uppercase 1788 575 205 1418 70% 10% 71% weighted average 5272 1789 2685 6168 70% 33.74% 77.52% Predicted Entities DNA, Cell_type, Cell_line, RNA, Protein Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetector()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer()\ .setInputCols([&quot;sentence&quot;])\ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) cellular_ner = MedicalNerModel.pretrained(&quot;ner_cellular_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverter()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;) nlpPipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, word_embeddings, cellular_ner, ner_converter]) model = nlpPipeline.fit(spark.createDataFrame([[&quot;&quot;]]).toDF(&quot;text&quot;)) result = model.transform(spark.createDataFrame([['Detection of various other intracellular signaling proteins is also described. Genetic characterization of transactivation of the human T-cell leukemia virus type 1 promoter: Binding of Tax to Tax-responsive element 1 is mediated by the cyclic AMP-responsive members of the CREB/ATF family of transcription factors. To achieve a better understanding of the mechanism of transactivation by Tax of human T-cell leukemia virus type 1 Tax-responsive element 1 (TRE-1), we developed a genetic approach with Saccharomyces cerevisiae. We constructed a yeast reporter strain containing the lacZ gene under the control of the CYC1 promoter associated with three copies of TRE-1. Expression of either the cyclic AMP response element-binding protein (CREB) or CREB fused to the GAL4 activation domain (GAD) in this strain did not modify the expression of the reporter gene. Tax alone was also inactive.']]).toDF(&quot;text&quot;)) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = new SentenceDetector() .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val celular_ner = MedicalNerModel.pretrained(&quot;ner_cellular_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverter() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, cellular_ner, ner_converter)) val data = Seq(&quot;&quot;&quot;Detection of various other intracellular signaling proteins is also described. Genetic characterization of transactivation of the human T-cell leukemia virus type 1 promoter: Binding of Tax to Tax-responsive element 1 is mediated by the cyclic AMP-responsive members of the CREB/ATF family of transcription factors. To achieve a better understanding of the mechanism of transactivation by Tax of human T-cell leukemia virus type 1 Tax-responsive element 1 (TRE-1), we developed a genetic approach with Saccharomyces cerevisiae. We constructed a yeast reporter strain containing the lacZ gene under the control of the CYC1 promoter associated with three copies of TRE-1. Expression of either the cyclic AMP response element-binding protein (CREB) or CREB fused to the GAL4 activation domain (GAD) in this strain did not modify the expression of the reporter gene. Tax alone was also inactive.&quot;&quot;&quot;).toDS().toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +-------------------------------------------+---------+ |chunk |ner_label| +-------------------------------------------+---------+ |intracellular signaling proteins |protein | |human T-cell leukemia virus type 1 promoter|DNA | |Tax |protein | |Tax-responsive element 1 |DNA | |cyclic AMP-responsive members |protein | |CREB/ATF family |protein | |transcription factors |protein | |Tax |protein | |Tax-responsive element 1 |DNA | |TRE-1 |DNA | |lacZ gene |DNA | |CYC1 promoter |DNA | |TRE-1 |DNA | |cyclic AMP response element-binding protein|protein | |CREB |protein | |CREB |protein | |GAL4 activation domain |protein | |GAD |protein | |reporter gene |DNA | |Tax |protein | +-------------------------------------------+---------+ Model Information Model Name: ner_cellular_langtest Compatibility: Healthcare NLP 5.1.1+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 14.5 MB References Trained on the JNLPBA corpus containing more than 2.404 publication abstracts with ‘embeddings_clinical’. Benchmarking label precision recall f1-score support B-DNA 0.81 0.79 0.80 1026 B-RNA 0.79 0.90 0.84 87 B-cell_line 0.79 0.74 0.77 457 B-cell_type 0.77 0.81 0.79 843 B-protein 0.86 0.90 0.88 3630 I-DNA 0.88 0.87 0.87 1776 I-RNA 0.76 0.99 0.86 127 I-cell_line 0.80 0.75 0.78 819 I-cell_type 0.76 0.86 0.81 1185 I-protein 0.85 0.86 0.85 3069 micro-avg 0.83 0.85 0.84 13019 macro-avg 0.81 0.85 0.82 13019 weighted-avg 0.83 0.85 0.84 13019</summary></entry><entry><title type="html">Detect PHI for Deidentification (Enriched - LangTest)</title><link href="/2023/10/15/ner_deid_enriched_langtest_en.html" rel="alternate" type="text/html" title="Detect PHI for Deidentification (Enriched - LangTest)" /><published>2023-10-15T00:00:00+00:00</published><updated>2023-10-15T00:00:00+00:00</updated><id>/2023/10/15/ner_deid_enriched_langtest_en</id><content type="html" xml:base="/2023/10/15/ner_deid_enriched_langtest_en.html">## Description

Deidentification NER (Enriched) is a Named Entity Recognition model that annotates text to find protected health information that may need to be de-identified. The entities it annotates are Age, City, Country, Date, Doctor, Hospital, Idnum, Medicalrecord, Organization, Patient, Phone, Profession, State, Street, Username, and Zip. Clinical NER is trained with the 'embeddings_clinical' word embeddings model, so be sure to use the same embeddings in the pipeline. This is the version of [ner_deid_enriched](https://nlp.johnsnowlabs.com/2021/03/31/ner_deid_enriched_en.html) model augmented with `langtest` library.

We stuck to the official annotation guideline (AG) for the 2014 i2b2 Deid challenge while annotating new datasets for this model. All the details regarding the nuances and explanations for AG can be found here [https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4978170/](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4978170/)

| **test_type**        | **before fail_count** | **after fail_count** | **before pass_count** | **after pass_count** | **minimum pass_rate** | **before pass_rate** | **after pass_rate** |
|----------------------|-----------------------|----------------------|-----------------------|----------------------|-----------------------|----------------------|---------------------|
| **lowercase**        | 903                   | 272                  | 11541                 | 12172                | 95%                   | 93%                  | 98%                 |
| **swap_entities**    | 268                   | 249                  | 2481                  | 2482                 | 95%                   | 90%                  | 91%                 |
| **titlecase**        | 339                   | 192                  | 13088                 | 13235                | 95%                   | 97%                  | 99%                 |
| **uppercase**        | 683                   | 343                  | 12670                 | 13010                | 95%                   | 95%                  | 97%                 |
| **weighted average** | **2193**              | **1056**             | **39780**             | **40899**            | **95%**               | **94.78%**           | **97.48%**          |

## Predicted Entities

`AGE`, `CITY`, `COUNTRY`, `DATE`, `DOCTOR`, `HOSPITAL`, `IDNUM`, `MEDICALRECORD`, `ORGANIZATION`, `PATIENT`, `PHONE`, `PROFESSION`, `STATE`, `STREET`, `USERNAME`, `ZIP`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_deid_enriched_langtest_en_5.1.1_3.0_1697388253227.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_deid_enriched_langtest_en_5.1.1_3.0_1697388253227.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
	
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)
         
sentence_detector = SentenceDetector()\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer()\
    .setInputCols([&quot;sentence&quot;])\
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
    .setOutputCol(&quot;embeddings&quot;)

ner = MedicalNerModel.pretrained(&quot;ner_deid_enriched_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverter()\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\
    .setOutputCol(&quot;ner_chunk&quot;)
    
nlpPipeline = Pipeline(stages=[
    document_assembler, 
    sentence_detector, 
    tokenizer, 
    word_embeddings, 
    ner, 
    ner_converter])

model = nlpPipeline.fit(spark.createDataFrame([[&quot;&quot;]]).toDF(&quot;text&quot;))

results = model.transform(spark.createDataFrame([['HISTORY OF PRESENT ILLNESS: Mr. Smith is a 60-year-old white male veteran with multiple comorbidities, who has a history of bladder cancer diagnosed approximately two years ago by the VA Hospital. He underwent a resection there. He was seen in Urology Clinic and Radiology Clinic on 02/04/2003. HOSPITAL COURSE: Mr. Smith presented to the Day Hospital in anticipation for Urology surgery. On evaluation, EKG, and echocardiogram were abnormal, a Cardiology consult was obtained. A cardiac adenosine stress MRI was then proceeded, and same was positive for inducible ischemia, mild-to-moderate inferolateral subendocardial infarction with peri-infarct ischemia. In addition, inducible ischemia seen in the inferior lateral septum. Mr. Smith underwent a left heart catheterization, which revealed two-vessel coronary artery disease. The RCA, proximal was 95% stenosed and the distal 80% stenosed. The mid LAD was 85% stenosed and the distal LAD was 85% stenosed. There were four Multi-Link Vision bare metal stents placed to decrease all four lesions to 0%. Following the intervention, Mr. Smith was admitted to 7 Ardmore Tower under the Cardiology Service under the direction of Dr. Hart. Mr. Smith had a noncomplicated post-intervention hospital course. He was stable for discharge home on 02/07/2003 with instructions to take Plavix daily for one month and Urology is aware of the same.']], [&quot;text&quot;]))
```
```scala
val document_assembler = new DocumentAssembler()
	.setInputCol(&quot;text&quot;)
	.setOutputCol(&quot;document&quot;)
         
val sentence_detector = new SentenceDetector()
	.setInputCols(&quot;document&quot;)
	.setOutputCol(&quot;sentence&quot;)

val tokenizer = new Tokenizer()
	.setInputCols(&quot;sentence&quot;)
	.setOutputCol(&quot;token&quot;)

val word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
	.setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
	.setOutputCol(&quot;embeddings&quot;)

val ner = MedicalNerModel.pretrained(&quot;ner_deid_enriched_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
	.setInputCols(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)
	.setOutputCol(&quot;ner&quot;)

val ner_converter = new NerConverter()
 	.setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
 	.setOutputCol(&quot;ner_chunk&quot;)

val pipeline = new Pipeline().setStages(Array(
    document_assembler, 
    sentence_detector, 
    tokenizer, 
    word_embeddings, 
    ner, 
    ner_converter))

val data = Seq(&quot;&quot;&quot;HISTORY OF PRESENT ILLNESS: Mr. Smith is a 60-year-old white male veteran with multiple comorbidities, who has a history of bladder cancer diagnosed approximately two years ago by the VA Hospital. He underwent a resection there. He was seen in Urology Clinic and Radiology Clinic on 02/04/2003. HOSPITAL COURSE: Mr. Smith presented to the Day Hospital in anticipation for Urology surgery. On evaluation, EKG, and echocardiogram were abnormal, a Cardiology consult was obtained. A cardiac adenosine stress MRI was then proceeded, and same was positive for inducible ischemia, mild-to-moderate inferolateral subendocardial infarction with peri-infarct ischemia. In addition, inducible ischemia seen in the inferior lateral septum. Mr. Smith underwent a left heart catheterization, which revealed two-vessel coronary artery disease. The RCA, proximal was 95% stenosed and the distal 80% stenosed. The mid LAD was 85% stenosed and the distal LAD was 85% stenosed. There were four Multi-Link Vision bare metal stents placed to decrease all four lesions to 0%. Following the intervention, Mr. Smith was admitted to 7 Ardmore Tower under the Cardiology Service under the direction of Dr. Hart. Mr. Smith had a noncomplicated post-intervention hospital course. He was stable for discharge home on 02/07/2003 with instructions to take Plavix daily for one month and Urology is aware of the same.&quot;&quot;&quot;).toDS().toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+---------------+---------+
|chunk          |ner_label|
+---------------+---------+
|Smith          |PATIENT  |
|VA Hospital    |HOSPITAL |
|02/04/2003     |DATE     |
|Smith          |PATIENT  |
|Smith          |PATIENT  |
|Smith          |PATIENT  |
|7 Ardmore Tower|HOSPITAL |
|Hart           |DOCTOR   |
|Smith          |PATIENT  |
|02/07/2003     |DATE     |
+---------------+---------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_deid_enriched_langtest|
|Compatibility:|Healthcare NLP 5.1.1+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|14.9 MB|

## References

Trained on JSL enriched n2c2 2014: De-identification and Heart Disease Risk Factors Challenge [datasets](https://portal.dbmi.hms.harvard.edu/projects/n2c2-2014/) with `embeddings_clinical`

## Benchmarking

```bash
label           precision  recall  f1-score  support 
AGE             0.96       0.95    0.95      198     
CITY            0.72       0.68    0.70      80      
COUNTRY         0.71       0.77    0.74      26      
DATE            0.98       0.98    0.98      1560    
DEVICE          1.00       0.50    0.67      2       
DOCTOR          0.92       0.92    0.92      600     
HEALTHPLAN      0.00       0.00    0.00      1       
HOSPITAL        0.91       0.90    0.90      292     
IDNUM           0.82       0.62    0.70      50      
LOCATION-OTHER  1.00       0.44    0.62      9       
MEDICALRECORD   0.90       0.95    0.93      106     
ORGANIZATION    0.45       0.28    0.35      32      
PATIENT         0.86       0.91    0.89      280     
PHONE           0.91       0.96    0.94      53      
PROFESSION      0.74       0.68    0.71      50      
STATE           0.94       0.79    0.85      56      
STREET          0.94       0.89    0.91      54      
USERNAME        1.00       0.81    0.90      32      
ZIP             0.95       0.86    0.90      43      
micro-avg       0.93       0.92    0.93      3524    
macro-avg       0.83       0.73    0.77      3524    
weighted-avg    0.93       0.92    0.93      3524    
```</content><author><name>John Snow Labs</name></author><category term="en" /><category term="ner" /><category term="licensed" /><category term="clinical" /><category term="deid" /><category term="langtest" /><summary type="html">Description Deidentification NER (Enriched) is a Named Entity Recognition model that annotates text to find protected health information that may need to be de-identified. The entities it annotates are Age, City, Country, Date, Doctor, Hospital, Idnum, Medicalrecord, Organization, Patient, Phone, Profession, State, Street, Username, and Zip. Clinical NER is trained with the ‘embeddings_clinical’ word embeddings model, so be sure to use the same embeddings in the pipeline. This is the version of ner_deid_enriched model augmented with langtest library. We stuck to the official annotation guideline (AG) for the 2014 i2b2 Deid challenge while annotating new datasets for this model. All the details regarding the nuances and explanations for AG can be found here https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4978170/ test_type before fail_count after fail_count before pass_count after pass_count minimum pass_rate before pass_rate after pass_rate lowercase 903 272 11541 12172 95% 93% 98% swap_entities 268 249 2481 2482 95% 90% 91% titlecase 339 192 13088 13235 95% 97% 99% uppercase 683 343 12670 13010 95% 95% 97% weighted average 2193 1056 39780 40899 95% 94.78% 97.48% Predicted Entities AGE, CITY, COUNTRY, DATE, DOCTOR, HOSPITAL, IDNUM, MEDICALRECORD, ORGANIZATION, PATIENT, PHONE, PROFESSION, STATE, STREET, USERNAME, ZIP Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetector()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer()\ .setInputCols([&quot;sentence&quot;])\ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_deid_enriched_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverter()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;) nlpPipeline = Pipeline(stages=[ document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter]) model = nlpPipeline.fit(spark.createDataFrame([[&quot;&quot;]]).toDF(&quot;text&quot;)) results = model.transform(spark.createDataFrame([['HISTORY OF PRESENT ILLNESS: Mr. Smith is a 60-year-old white male veteran with multiple comorbidities, who has a history of bladder cancer diagnosed approximately two years ago by the VA Hospital. He underwent a resection there. He was seen in Urology Clinic and Radiology Clinic on 02/04/2003. HOSPITAL COURSE: Mr. Smith presented to the Day Hospital in anticipation for Urology surgery. On evaluation, EKG, and echocardiogram were abnormal, a Cardiology consult was obtained. A cardiac adenosine stress MRI was then proceeded, and same was positive for inducible ischemia, mild-to-moderate inferolateral subendocardial infarction with peri-infarct ischemia. In addition, inducible ischemia seen in the inferior lateral septum. Mr. Smith underwent a left heart catheterization, which revealed two-vessel coronary artery disease. The RCA, proximal was 95% stenosed and the distal 80% stenosed. The mid LAD was 85% stenosed and the distal LAD was 85% stenosed. There were four Multi-Link Vision bare metal stents placed to decrease all four lesions to 0%. Following the intervention, Mr. Smith was admitted to 7 Ardmore Tower under the Cardiology Service under the direction of Dr. Hart. Mr. Smith had a noncomplicated post-intervention hospital course. He was stable for discharge home on 02/07/2003 with instructions to take Plavix daily for one month and Urology is aware of the same.']], [&quot;text&quot;])) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = new SentenceDetector() .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_deid_enriched_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverter() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pipeline = new Pipeline().setStages(Array( document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter)) val data = Seq(&quot;&quot;&quot;HISTORY OF PRESENT ILLNESS: Mr. Smith is a 60-year-old white male veteran with multiple comorbidities, who has a history of bladder cancer diagnosed approximately two years ago by the VA Hospital. He underwent a resection there. He was seen in Urology Clinic and Radiology Clinic on 02/04/2003. HOSPITAL COURSE: Mr. Smith presented to the Day Hospital in anticipation for Urology surgery. On evaluation, EKG, and echocardiogram were abnormal, a Cardiology consult was obtained. A cardiac adenosine stress MRI was then proceeded, and same was positive for inducible ischemia, mild-to-moderate inferolateral subendocardial infarction with peri-infarct ischemia. In addition, inducible ischemia seen in the inferior lateral septum. Mr. Smith underwent a left heart catheterization, which revealed two-vessel coronary artery disease. The RCA, proximal was 95% stenosed and the distal 80% stenosed. The mid LAD was 85% stenosed and the distal LAD was 85% stenosed. There were four Multi-Link Vision bare metal stents placed to decrease all four lesions to 0%. Following the intervention, Mr. Smith was admitted to 7 Ardmore Tower under the Cardiology Service under the direction of Dr. Hart. Mr. Smith had a noncomplicated post-intervention hospital course. He was stable for discharge home on 02/07/2003 with instructions to take Plavix daily for one month and Urology is aware of the same.&quot;&quot;&quot;).toDS().toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +---------------+---------+ |chunk |ner_label| +---------------+---------+ |Smith |PATIENT | |VA Hospital |HOSPITAL | |02/04/2003 |DATE | |Smith |PATIENT | |Smith |PATIENT | |Smith |PATIENT | |7 Ardmore Tower|HOSPITAL | |Hart |DOCTOR | |Smith |PATIENT | |02/07/2003 |DATE | +---------------+---------+ Model Information Model Name: ner_deid_enriched_langtest Compatibility: Healthcare NLP 5.1.1+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 14.9 MB References Trained on JSL enriched n2c2 2014: De-identification and Heart Disease Risk Factors Challenge datasets with embeddings_clinical Benchmarking label precision recall f1-score support AGE 0.96 0.95 0.95 198 CITY 0.72 0.68 0.70 80 COUNTRY 0.71 0.77 0.74 26 DATE 0.98 0.98 0.98 1560 DEVICE 1.00 0.50 0.67 2 DOCTOR 0.92 0.92 0.92 600 HEALTHPLAN 0.00 0.00 0.00 1 HOSPITAL 0.91 0.90 0.90 292 IDNUM 0.82 0.62 0.70 50 LOCATION-OTHER 1.00 0.44 0.62 9 MEDICALRECORD 0.90 0.95 0.93 106 ORGANIZATION 0.45 0.28 0.35 32 PATIENT 0.86 0.91 0.89 280 PHONE 0.91 0.96 0.94 53 PROFESSION 0.74 0.68 0.71 50 STATE 0.94 0.79 0.85 56 STREET 0.94 0.89 0.91 54 USERNAME 1.00 0.81 0.90 32 ZIP 0.95 0.86 0.90 43 micro-avg 0.93 0.92 0.93 3524 macro-avg 0.83 0.73 0.77 3524 weighted-avg 0.93 0.92 0.93 3524</summary></entry></feed>