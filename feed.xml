<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-08-24T13:52:05+00:00</updated><id>/feed.xml</id><title type="html">Spark NLP</title><subtitle>High Performance NLP with Apache Spark
</subtitle><author><name>{&quot;type&quot;=&gt;nil, &quot;name&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;avatar&quot;=&gt;nil, &quot;bio&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;facebook&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;weibo&quot;=&gt;nil, &quot;googleplus&quot;=&gt;nil, &quot;telegram&quot;=&gt;nil, &quot;medium&quot;=&gt;nil, &quot;zhihu&quot;=&gt;nil, &quot;douban&quot;=&gt;nil, &quot;linkedin&quot;=&gt;nil, &quot;github&quot;=&gt;nil, &quot;npm&quot;=&gt;nil}</name></author><entry><title type="html">Medical Question Answering on Clinical Notes (ONNX)</title><link href="/2023/08/17/clinical_notes_qa_base_onnx_en.html" rel="alternate" type="text/html" title="Medical Question Answering on Clinical Notes (ONNX)" /><published>2023-08-17T00:00:00+00:00</published><updated>2023-08-17T00:00:00+00:00</updated><id>/2023/08/17/clinical_notes_qa_base_onnx_en</id><content type="html" xml:base="/2023/08/17/clinical_notes_qa_base_onnx_en.html">## Description

This model is capable of open-book question answering on Medical Notes.

## Predicted Entities



{:.btn-box}
[Live Demo](https://demo.johnsnowlabs.com/healthcare/MEDICAL_QA_CLINICAL_NOTES/){:.button.button-orange}
[Open in Colab](https://colab.research.google.com/github/JohnSnowLabs/spark-nlp-workshop/blob/master/tutorials/Certification_Trainings/Healthcare/31.Medical_Question_Answering.ipynb){:.button.button-orange.button-orange-trans.co.button-icon}
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/clinical_notes_qa_base_onnx_en_5.0.1_3.0_1692288906686.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/clinical_notes_qa_base_onnx_en_5.0.1_3.0_1692288906686.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = MultiDocumentAssembler()\
    .setInputCols(&quot;question&quot;, &quot;context&quot;)\
    .setOutputCols(&quot;document_question&quot;, &quot;document_context&quot;)

med_qa  = MedicalQuestionAnswering().pretrained(&quot;clinical_notes_qa_base_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;document_question&quot;, &quot;document_context&quot;])\
    .setCustomPrompt(&quot;Context: {context} \n Question: {question} \n Answer: &quot;)\
    .setOutputCol(&quot;answer&quot;)\

pipeline = Pipeline(stages=[document_assembler, med_qa])

note_text = &quot;Patient with a past medical history of hypertension for 15 years.\n(Medical Transcription Sample Report)\nHISTORY OF PRESENT ILLNESS:\nThe patient is a 74-year-old white woman who has a past medical history of hypertension for 15 years, history of CVA with no residual hemiparesis and uterine cancer with pulmonary metastases, who presented for evaluation of recent worsening of the hypertension. According to the patient, she had stable blood pressure for the past 12-15 years on 10 mg of lisinopril.&quot;

question = &quot;What is the primary issue reported by patient?&quot;

data = spark.createDataFrame([[question, note_text]]).toDF(&quot;question&quot;, &quot;context&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new MultiDocumentAssembler()
    .setInputCols(&quot;question&quot;, &quot;context&quot;)
    .setOutputCols(&quot;document_question&quot;, &quot;document_context&quot;)

val med_qa = MedicalQuestionAnswering.pretrained(&quot;clinical_notes_qa_base_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;document_question&quot;, &quot;document_context&quot;))
    .setOutputCol(&quot;answer&quot;)
    .setCustomPrompt(&quot;Context: {context} \n Question: {question} \n Answer: &quot;)

val pipeline = new Pipeline().setStages(Array(document_assembler, med_qa))

note_text = &quot;Patient with a past medical history of hypertension for 15 years.\n(Medical Transcription Sample Report)\nHISTORY OF PRESENT ILLNESS:\nThe patient is a 74-year-old white woman who has a past medical history of hypertension for 15 years, history of CVA with no residual hemiparesis and uterine cancer with pulmonary metastases, who presented for evaluation of recent worsening of the hypertension. According to the patient, she had stable blood pressure for the past 12-15 years on 10 mg of lisinopril.&quot;

question = &quot;What is the primary issue reported by patient?&quot;

val data = Seq( 
    (question, note_text))
    .toDS.toDF(&quot;question&quot;, &quot;context&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+-------------------------------------------------------------+
|result                                                       |
+-------------------------------------------------------------+
|[The primary issue reported by the patient is hypertension.] |
+-------------------------------------------------------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|clinical_notes_qa_base_onnx|
|Compatibility:|Healthcare NLP 5.0.1+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|1.0 GB|
|Case sensitive:|true|

## References

Trained on in-house curated dataset on clinical notes.

## Benchmarking

```bash
Rouge score: 59.9
```</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="clinical" /><category term="en" /><category term="question_answering" /><category term="onnx" /><summary type="html">Description This model is capable of open-book question answering on Medical Notes. Predicted Entities Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = MultiDocumentAssembler()\ .setInputCols(&quot;question&quot;, &quot;context&quot;)\ .setOutputCols(&quot;document_question&quot;, &quot;document_context&quot;) med_qa = MedicalQuestionAnswering().pretrained(&quot;clinical_notes_qa_base_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document_question&quot;, &quot;document_context&quot;])\ .setCustomPrompt(&quot;Context: {context} \n Question: {question} \n Answer: &quot;)\ .setOutputCol(&quot;answer&quot;)\ pipeline = Pipeline(stages=[document_assembler, med_qa]) note_text = &quot;Patient with a past medical history of hypertension for 15 years.\n(Medical Transcription Sample Report)\nHISTORY OF PRESENT ILLNESS:\nThe patient is a 74-year-old white woman who has a past medical history of hypertension for 15 years, history of CVA with no residual hemiparesis and uterine cancer with pulmonary metastases, who presented for evaluation of recent worsening of the hypertension. According to the patient, she had stable blood pressure for the past 12-15 years on 10 mg of lisinopril.&quot; question = &quot;What is the primary issue reported by patient?&quot; data = spark.createDataFrame([[question, note_text]]).toDF(&quot;question&quot;, &quot;context&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new MultiDocumentAssembler() .setInputCols(&quot;question&quot;, &quot;context&quot;) .setOutputCols(&quot;document_question&quot;, &quot;document_context&quot;) val med_qa = MedicalQuestionAnswering.pretrained(&quot;clinical_notes_qa_base_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;document_question&quot;, &quot;document_context&quot;)) .setOutputCol(&quot;answer&quot;) .setCustomPrompt(&quot;Context: {context} \n Question: {question} \n Answer: &quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, med_qa)) note_text = &quot;Patient with a past medical history of hypertension for 15 years.\n(Medical Transcription Sample Report)\nHISTORY OF PRESENT ILLNESS:\nThe patient is a 74-year-old white woman who has a past medical history of hypertension for 15 years, history of CVA with no residual hemiparesis and uterine cancer with pulmonary metastases, who presented for evaluation of recent worsening of the hypertension. According to the patient, she had stable blood pressure for the past 12-15 years on 10 mg of lisinopril.&quot; question = &quot;What is the primary issue reported by patient?&quot; val data = Seq( (question, note_text)) .toDS.toDF(&quot;question&quot;, &quot;context&quot;) val result = pipeline.fit(data).transform(data) Results +-------------------------------------------------------------+ |result | +-------------------------------------------------------------+ |[The primary issue reported by the patient is hypertension.] | +-------------------------------------------------------------+ Model Information Model Name: clinical_notes_qa_base_onnx Compatibility: Healthcare NLP 5.0.1+ License: Licensed Edition: Official Language: en Size: 1.0 GB Case sensitive: true References Trained on in-house curated dataset on clinical notes. Benchmarking Rouge score: 59.9</summary></entry><entry><title type="html">Medical Question Answering on Clinical Notes (Large - ONNX)</title><link href="/2023/08/17/clinical_notes_qa_large_onnx_en.html" rel="alternate" type="text/html" title="Medical Question Answering on Clinical Notes (Large - ONNX)" /><published>2023-08-17T00:00:00+00:00</published><updated>2023-08-17T00:00:00+00:00</updated><id>/2023/08/17/clinical_notes_qa_large_onnx_en</id><content type="html" xml:base="/2023/08/17/clinical_notes_qa_large_onnx_en.html">## Description

This model is capable of open-book question answering on Medical Notes.

## Predicted Entities



{:.btn-box}
[Live Demo](https://demo.johnsnowlabs.com/healthcare/MEDICAL_QA_CLINICAL_NOTES/){:.button.button-orange}
[Open in Colab](https://colab.research.google.com/github/JohnSnowLabs/spark-nlp-workshop/blob/master/tutorials/Certification_Trainings/Healthcare/31.Medical_Question_Answering.ipynb){:.button.button-orange.button-orange-trans.co.button-icon}
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/clinical_notes_qa_large_onnx_en_5.0.1_3.0_1692290656229.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/clinical_notes_qa_large_onnx_en_5.0.1_3.0_1692290656229.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
document_assembler = MultiDocumentAssembler()\
    .setInputCols(&quot;question&quot;, &quot;context&quot;)\
    .setOutputCols(&quot;document_question&quot;, &quot;document_context&quot;)

med_qa  = MedicalQuestionAnswering().pretrained(&quot;clinical_notes_qa_large_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;document_question&quot;, &quot;document_context&quot;])\
    .setCustomPrompt(&quot;Context: {context} \n Question: {question} \n Answer: &quot;)\
    .setOutputCol(&quot;answer&quot;)\

pipeline = Pipeline(stages=[document_assembler, med_qa])

note_text = &quot;Patient with a past medical history of hypertension for 15 years.\n(Medical Transcription Sample Report)\nHISTORY OF PRESENT ILLNESS:\nThe patient is a 74-year-old white woman who has a past medical history of hypertension for 15 years, history of CVA with no residual hemiparesis and uterine cancer with pulmonary metastases, who presented for evaluation of recent worsening of the hypertension. According to the patient, she had stable blood pressure for the past 12-15 years on 10 mg of lisinopril.&quot;

question = &quot;What is the primary issue reported by patient?&quot;

data = spark.createDataFrame([[question, note_text]]).toDF(&quot;question&quot;, &quot;context&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new MultiDocumentAssembler()
    .setInputCols(&quot;question&quot;, &quot;context&quot;)
    .setOutputCols(&quot;document_question&quot;, &quot;document_context&quot;)

val med_qa = MedicalQuestionAnswering.pretrained(&quot;clinical_notes_qa_large_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;document_question&quot;, &quot;document_context&quot;))
    .setOutputCol(&quot;answer&quot;)
    .setCustomPrompt(&quot;Context: {context} \n Question: {question} \n Answer: &quot;)

val pipeline = new Pipeline().setStages(Array(document_assembler, med_qa))

note_text = &quot;Patient with a past medical history of hypertension for 15 years.\n(Medical Transcription Sample Report)\nHISTORY OF PRESENT ILLNESS:\nThe patient is a 74-year-old white woman who has a past medical history of hypertension for 15 years, history of CVA with no residual hemiparesis and uterine cancer with pulmonary metastases, who presented for evaluation of recent worsening of the hypertension. According to the patient, she had stable blood pressure for the past 12-15 years on 10 mg of lisinopril.&quot;
question = &quot;What is the primary issue reported by patient?&quot;

val data = Seq( 
    (question, note_text))
    .toDS.toDF(&quot;question&quot;, &quot;context&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+-------------------------------------------------------------+
|result                                                       |
+-------------------------------------------------------------+
|[The primary issue reported by the patient is hypertension.] |
+-------------------------------------------------------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|clinical_notes_qa_large_onnx|
|Compatibility:|Healthcare NLP 5.0.1+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|3.0 GB|
|Case sensitive:|true|

## References

Trained on in-house curated dataset on clinical notes.

## Benchmarking

```bash
Rouge Score 61.1
```</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="clinical" /><category term="en" /><category term="question_answering" /><category term="onnx" /><summary type="html">Description This model is capable of open-book question answering on Medical Notes. Predicted Entities Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = MultiDocumentAssembler()\ .setInputCols(&quot;question&quot;, &quot;context&quot;)\ .setOutputCols(&quot;document_question&quot;, &quot;document_context&quot;) med_qa = MedicalQuestionAnswering().pretrained(&quot;clinical_notes_qa_large_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document_question&quot;, &quot;document_context&quot;])\ .setCustomPrompt(&quot;Context: {context} \n Question: {question} \n Answer: &quot;)\ .setOutputCol(&quot;answer&quot;)\ pipeline = Pipeline(stages=[document_assembler, med_qa]) note_text = &quot;Patient with a past medical history of hypertension for 15 years.\n(Medical Transcription Sample Report)\nHISTORY OF PRESENT ILLNESS:\nThe patient is a 74-year-old white woman who has a past medical history of hypertension for 15 years, history of CVA with no residual hemiparesis and uterine cancer with pulmonary metastases, who presented for evaluation of recent worsening of the hypertension. According to the patient, she had stable blood pressure for the past 12-15 years on 10 mg of lisinopril.&quot; question = &quot;What is the primary issue reported by patient?&quot; data = spark.createDataFrame([[question, note_text]]).toDF(&quot;question&quot;, &quot;context&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new MultiDocumentAssembler() .setInputCols(&quot;question&quot;, &quot;context&quot;) .setOutputCols(&quot;document_question&quot;, &quot;document_context&quot;) val med_qa = MedicalQuestionAnswering.pretrained(&quot;clinical_notes_qa_large_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;document_question&quot;, &quot;document_context&quot;)) .setOutputCol(&quot;answer&quot;) .setCustomPrompt(&quot;Context: {context} \n Question: {question} \n Answer: &quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, med_qa)) note_text = &quot;Patient with a past medical history of hypertension for 15 years.\n(Medical Transcription Sample Report)\nHISTORY OF PRESENT ILLNESS:\nThe patient is a 74-year-old white woman who has a past medical history of hypertension for 15 years, history of CVA with no residual hemiparesis and uterine cancer with pulmonary metastases, who presented for evaluation of recent worsening of the hypertension. According to the patient, she had stable blood pressure for the past 12-15 years on 10 mg of lisinopril.&quot; question = &quot;What is the primary issue reported by patient?&quot; val data = Seq( (question, note_text)) .toDS.toDF(&quot;question&quot;, &quot;context&quot;) val result = pipeline.fit(data).transform(data) Results +-------------------------------------------------------------+ |result | +-------------------------------------------------------------+ |[The primary issue reported by the patient is hypertension.] | +-------------------------------------------------------------+ Model Information Model Name: clinical_notes_qa_large_onnx Compatibility: Healthcare NLP 5.0.1+ License: Licensed Edition: Official Language: en Size: 3.0 GB Case sensitive: true References Trained on in-house curated dataset on clinical notes. Benchmarking Rouge Score 61.1</summary></entry><entry><title type="html">Assertion Status for Voice of the Patients (embeddings_clinical)</title><link href="/2023/08/17/assertion_vop_clinical_en.html" rel="alternate" type="text/html" title="Assertion Status for Voice of the Patients (embeddings_clinical)" /><published>2023-08-17T00:00:00+00:00</published><updated>2023-08-17T00:00:00+00:00</updated><id>/2023/08/17/assertion_vop_clinical_en</id><content type="html" xml:base="/2023/08/17/assertion_vop_clinical_en.html">## Description

Assertion status model used to predict if an NER chunk refers to a positive finding from the patient (Present_Or_Past), or if it refers to a family member or another person (SomeoneElse) or if it is mentioned but not as something present (Hypothetical_Or_Absent).

## Predicted Entities

`Hypothetical_Or_Absent`, `Present_Or_Past`, `SomeoneElse`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/assertion_vop_clinical_en_5.0.1_3.0_1692303469489.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/assertion_vop_clinical_en_5.0.1_3.0_1692303469489.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)                

ner = MedicalNerModel.pretrained(&quot;ner_vop_emb_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverterInternal() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \
    .setOutputCol(&quot;ner_chunk&quot;)

assertion = AssertionDLModel.pretrained(&quot;assertion_vop_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;ner_chunk&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;assertion&quot;)

pipeline = Pipeline(stages=[document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter,
                            assertion])

data = spark.createDataFrame([[&quot;I was feeling anxiety honestly. Can it bring on tremors? It was right after my friend was diagnosed with diabetes.&quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
    
val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)
    
val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)                
    
val ner = MedicalNerModel.pretrained(&quot;ner_vop_emb_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)
    
val ner_converter = new NerConverterInternal()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

val assertion = AssertionDLModel.pretrained(&quot;assertion_vop_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(&quot;sentence&quot;,&quot;ner_chunk&quot;,&quot;embeddings&quot;)
    .setOutputCol(&quot;assertion&quot;)
        
val pipeline = new Pipeline().setStages(Array(document_assembler,
                                              sentence_detector,
                                              tokenizer,
                                              word_embeddings,
                                              ner,
                                              ner_converter,
                                              assertion))

val data = Seq(&quot;I was feeling anxiety honestly. Can it bring on tremors? It was right after my friend was diagnosed with diabetes.&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+--------+-----+---+----------------------+-------+----------------------+----------+
|chunk   |begin|end|ner_label             |sent_id|assertion             |confidence|
+--------+-----+---+----------------------+-------+----------------------+----------+
|anxiety |14   |20 |PsychologicalCondition|0      |Present_Or_Past       |0.9853    |
|tremors |48   |54 |Symptom               |1      |Hypothetical_Or_Absent|0.9998    |
|diabetes|105  |112|Disease               |2      |SomeoneElse           |0.9916    |
+--------+-----+---+----------------------+-------+----------------------+----------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|assertion_vop_clinical|
|Compatibility:|Healthcare NLP 5.0.1+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[document, chunk, embeddings]|
|Output Labels:|[assertion]|
|Language:|en|
|Size:|942.0 KB|

## References

In-house annotated health-related text in colloquial language.

## Benchmarking

```bash
                 label  precision    recall  f1-score   support
Hypothetical_Or_Absent       0.75      0.78      0.76      1265
       Present_Or_Past       0.88      0.88      0.88      2873
           SomeoneElse       0.92      0.88      0.90      1084
              accuracy       -         -         0.85      5222
             macro_avg       0.85      0.85      0.85      5222
          weighted_avg       0.86      0.85      0.86      5222
```</content><author><name>John Snow Labs</name></author><category term="clinical" /><category term="licensed" /><category term="en" /><category term="assertion" /><category term="vop" /><summary type="html">Description Assertion status model used to predict if an NER chunk refers to a positive finding from the patient (Present_Or_Past), or if it refers to a family member or another person (SomeoneElse) or if it is mentioned but not as something present (Hypothetical_Or_Absent). Predicted Entities Hypothetical_Or_Absent, Present_Or_Past, SomeoneElse Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_vop_emb_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverterInternal() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;) assertion = AssertionDLModel.pretrained(&quot;assertion_vop_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;ner_chunk&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;assertion&quot;) pipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter, assertion]) data = spark.createDataFrame([[&quot;I was feeling anxiety honestly. Can it bring on tremors? It was right after my friend was diagnosed with diabetes.&quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_vop_emb_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val assertion = AssertionDLModel.pretrained(&quot;assertion_vop_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(&quot;sentence&quot;,&quot;ner_chunk&quot;,&quot;embeddings&quot;) .setOutputCol(&quot;assertion&quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter, assertion)) val data = Seq(&quot;I was feeling anxiety honestly. Can it bring on tremors? It was right after my friend was diagnosed with diabetes.&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +--------+-----+---+----------------------+-------+----------------------+----------+ |chunk |begin|end|ner_label |sent_id|assertion |confidence| +--------+-----+---+----------------------+-------+----------------------+----------+ |anxiety |14 |20 |PsychologicalCondition|0 |Present_Or_Past |0.9853 | |tremors |48 |54 |Symptom |1 |Hypothetical_Or_Absent|0.9998 | |diabetes|105 |112|Disease |2 |SomeoneElse |0.9916 | +--------+-----+---+----------------------+-------+----------------------+----------+ Model Information Model Name: assertion_vop_clinical Compatibility: Healthcare NLP 5.0.1+ License: Licensed Edition: Official Input Labels: [document, chunk, embeddings] Output Labels: [assertion] Language: en Size: 942.0 KB References In-house annotated health-related text in colloquial language. Benchmarking label precision recall f1-score support Hypothetical_Or_Absent 0.75 0.78 0.76 1265 Present_Or_Past 0.88 0.88 0.88 2873 SomeoneElse 0.92 0.88 0.90 1084 accuracy - - 0.85 5222 macro_avg 0.85 0.85 0.85 5222 weighted_avg 0.86 0.85 0.86 5222</summary></entry><entry><title type="html">Assertion Status for Voice of the Patients (embeddings_clinical_large)</title><link href="/2023/08/17/assertion_vop_clinical_large_en.html" rel="alternate" type="text/html" title="Assertion Status for Voice of the Patients (embeddings_clinical_large)" /><published>2023-08-17T00:00:00+00:00</published><updated>2023-08-17T00:00:00+00:00</updated><id>/2023/08/17/assertion_vop_clinical_large_en</id><content type="html" xml:base="/2023/08/17/assertion_vop_clinical_large_en.html">## Description

Assertion status model used to predict if an NER chunk refers to a positive finding from the patient (Present_Or_Past), or if it refers to a family member or another person (SomeoneElse) or if it is mentioned but not as something present (Hypothetical_Or_Absent).

This model is the final version of the [WIP assertion model](https://nlp.johnsnowlabs.com/2023/06/17/assertion_vop_3cl_emb_clinical_large_wip_en.html).

## Predicted Entities

`Hypothetical_Or_Absent`, `Present_Or_Past`, `SomeoneElse`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/assertion_vop_clinical_large_en_5.0.1_3.0_1692307735425.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/assertion_vop_clinical_large_en_5.0.1_3.0_1692307735425.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}

```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical_large&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)

ner = MedicalNerModel.pretrained(&quot;ner_vop_emb_clinical_large&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverterInternal() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \
    .setOutputCol(&quot;ner_chunk&quot;)

assertion = AssertionDLModel.pretrained(&quot;assertion_vop_clinical_large&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;ner_chunk&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;assertion&quot;)

pipeline = Pipeline(stages=[document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter,
                            assertion])

data = spark.createDataFrame([[&quot;I was feeling anxiety honestly. Can it bring on tremors? It was right after my friend was diagnosed with diabetes.&quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)

val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)

val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)

val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical_large&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)

val ner = MedicalNerModel.pretrained(&quot;ner_vop_emb_clinical_large&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)

val ner_converter = new NerConverterInternal()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

val assertion = AssertionDLModel.pretrained(&quot;assertion_vop_clinical_large&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(&quot;sentence&quot;,&quot;ner_chunk&quot;,&quot;embeddings&quot;)
    .setOutputCol(&quot;assertion&quot;)

val pipeline = new Pipeline().setStages(Array(document_assembler,
                                              sentence_detector,
                                              tokenizer,
                                              word_embeddings,
                                              ner,
                                              ner_converter,
                                              assertion))

val data = Seq(&quot;I was feeling anxiety honestly. Can it bring on tremors? It was right after my friend was diagnosed with diabetes.&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+--------+-----+---+----------------------+-------+----------------------+----------+
|chunk   |begin|end|ner_label             |sent_id|assertion             |confidence|
+--------+-----+---+----------------------+-------+----------------------+----------+
|anxiety |14   |20 |PsychologicalCondition|0      |Present_Or_Past       |0.9853    |
|tremors |48   |54 |Symptom               |1      |Hypothetical_Or_Absent|0.9998    |
|diabetes|105  |112|Disease               |2      |SomeoneElse           |0.9916    |
+--------+-----+---+----------------------+-------+----------------------+----------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|assertion_vop_clinical_large|
|Compatibility:|Healthcare NLP 5.0.1+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[document, chunk, embeddings]|
|Output Labels:|[assertion]|
|Language:|en|
|Size:|940.7 KB|

## Benchmarking

```bash
                 label  precision    recall  f1-score   support
Hypothetical_Or_Absent       0.77      0.78      0.78      1265
       Present_Or_Past       0.88      0.89      0.89      2873
           SomeoneElse       0.92      0.87      0.90      1084
              accuracy       -         -         0.86      5222
             macro_avg       0.86      0.85      0.85      5222
          weighted_avg       0.86      0.86      0.86      5222
```</content><author><name>John Snow Labs</name></author><category term="clinical" /><category term="licensed" /><category term="en" /><category term="assertion" /><category term="vop" /><summary type="html">Description Assertion status model used to predict if an NER chunk refers to a positive finding from the patient (Present_Or_Past), or if it refers to a family member or another person (SomeoneElse) or if it is mentioned but not as something present (Hypothetical_Or_Absent). This model is the final version of the WIP assertion model. Predicted Entities Hypothetical_Or_Absent, Present_Or_Past, SomeoneElse Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical_large&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_vop_emb_clinical_large&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverterInternal() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;) assertion = AssertionDLModel.pretrained(&quot;assertion_vop_clinical_large&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;ner_chunk&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;assertion&quot;) pipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter, assertion]) data = spark.createDataFrame([[&quot;I was feeling anxiety honestly. Can it bring on tremors? It was right after my friend was diagnosed with diabetes.&quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical_large&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_vop_emb_clinical_large&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val assertion = AssertionDLModel.pretrained(&quot;assertion_vop_clinical_large&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(&quot;sentence&quot;,&quot;ner_chunk&quot;,&quot;embeddings&quot;) .setOutputCol(&quot;assertion&quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter, assertion)) val data = Seq(&quot;I was feeling anxiety honestly. Can it bring on tremors? It was right after my friend was diagnosed with diabetes.&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +--------+-----+---+----------------------+-------+----------------------+----------+ |chunk |begin|end|ner_label |sent_id|assertion |confidence| +--------+-----+---+----------------------+-------+----------------------+----------+ |anxiety |14 |20 |PsychologicalCondition|0 |Present_Or_Past |0.9853 | |tremors |48 |54 |Symptom |1 |Hypothetical_Or_Absent|0.9998 | |diabetes|105 |112|Disease |2 |SomeoneElse |0.9916 | +--------+-----+---+----------------------+-------+----------------------+----------+ Model Information Model Name: assertion_vop_clinical_large Compatibility: Healthcare NLP 5.0.1+ License: Licensed Edition: Official Input Labels: [document, chunk, embeddings] Output Labels: [assertion] Language: en Size: 940.7 KB Benchmarking label precision recall f1-score support Hypothetical_Or_Absent 0.77 0.78 0.78 1265 Present_Or_Past 0.88 0.89 0.89 2873 SomeoneElse 0.92 0.87 0.90 1084 accuracy - - 0.86 5222 macro_avg 0.86 0.85 0.85 5222 weighted_avg 0.86 0.86 0.86 5222</summary></entry><entry><title type="html">Assertion Status for Voice of the Patients (embeddings_clinical_medium)</title><link href="/2023/08/17/assertion_vop_clinical_medium_en.html" rel="alternate" type="text/html" title="Assertion Status for Voice of the Patients (embeddings_clinical_medium)" /><published>2023-08-17T00:00:00+00:00</published><updated>2023-08-17T00:00:00+00:00</updated><id>/2023/08/17/assertion_vop_clinical_medium_en</id><content type="html" xml:base="/2023/08/17/assertion_vop_clinical_medium_en.html">## Description

Assertion status model used to predict if an NER chunk refers to a positive finding from the patient (Present_Or_Past), or if it refers to a family member or another person (SomeoneElse) or if it is mentioned but not as something present (Hypothetical_Or_Absent).

## Predicted Entities

`Hypothetical_Or_Absent`, `Present_Or_Past`, `SomeoneElse`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/assertion_vop_clinical_medium_en_5.0.1_3.0_1692305167259.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/assertion_vop_clinical_medium_en_5.0.1_3.0_1692305167259.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}

```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical_medium&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)

ner = MedicalNerModel.pretrained(&quot;ner_vop_emb_clinical_medium&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverterInternal() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \
    .setOutputCol(&quot;ner_chunk&quot;)

assertion = AssertionDLModel.pretrained(&quot;assertion_vop_clinical_medium&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;ner_chunk&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;assertion&quot;)

pipeline = Pipeline(stages=[document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter,
                            assertion])

data = spark.createDataFrame([[&quot;I was feeling anxiety honestly. Can it bring on tremors? It was right after my friend was diagnosed with diabetes.&quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)

val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)

val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)

val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical_medium&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)

val ner = MedicalNerModel.pretrained(&quot;ner_vop_emb_clinical_medium&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)

val ner_converter = new NerConverterInternal()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

val assertion = AssertionDLModel.pretrained(&quot;assertion_vop_clinical_medium&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(&quot;sentence&quot;, &quot;ner_chunk&quot;, &quot;embeddings&quot;)
    .setOutputCol(&quot;assertion&quot;)

val pipeline = new Pipeline().setStages(Array(document_assembler,
                                              sentence_detector,
                                              tokenizer,
                                              word_embeddings,
                                              ner,
                                              ner_converter,
                                              assertion))

val data = Seq(&quot;I was feeling anxiety honestly. Can it bring on tremors? It was right after my friend was diagnosed with diabetes.&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+--------+-----+---+----------------------+-------+----------------------+----------+
|chunk   |begin|end|ner_label             |sent_id|assertion             |confidence|
+--------+-----+---+----------------------+-------+----------------------+----------+
|anxiety |14   |20 |PsychologicalCondition|0      |Present_Or_Past       |0.9853    |
|tremors |48   |54 |Symptom               |1      |Hypothetical_Or_Absent|0.9998    |
|diabetes|105  |112|Disease               |2      |SomeoneElse           |0.9916    |
+--------+-----+---+----------------------+-------+----------------------+----------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|assertion_vop_clinical_medium|
|Compatibility:|Healthcare NLP 5.0.1+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[document, chunk, embeddings]|
|Output Labels:|[assertion]|
|Language:|en|
|Size:|941.1 KB|

## References

In-house annotated health-related text in colloquial language.

## Benchmarking

```bash
                 label  precision    recall  f1-score   support
Hypothetical_Or_Absent       0.79      0.75      0.77      1265
       Present_Or_Past       0.87      0.90      0.88      2873
           SomeoneElse       0.92      0.90      0.91      1084
              accuracy       -         -         0.86      5222
             macro_avg       0.86      0.85      0.85      5222
          weighted_avg       0.86      0.86      0.86      5222
```</content><author><name>John Snow Labs</name></author><category term="clinical" /><category term="licensed" /><category term="en" /><category term="vop" /><category term="assertion" /><summary type="html">Description Assertion status model used to predict if an NER chunk refers to a positive finding from the patient (Present_Or_Past), or if it refers to a family member or another person (SomeoneElse) or if it is mentioned but not as something present (Hypothetical_Or_Absent). Predicted Entities Hypothetical_Or_Absent, Present_Or_Past, SomeoneElse Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical_medium&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_vop_emb_clinical_medium&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverterInternal() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;) assertion = AssertionDLModel.pretrained(&quot;assertion_vop_clinical_medium&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;ner_chunk&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;assertion&quot;) pipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter, assertion]) data = spark.createDataFrame([[&quot;I was feeling anxiety honestly. Can it bring on tremors? It was right after my friend was diagnosed with diabetes.&quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical_medium&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_vop_emb_clinical_medium&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val assertion = AssertionDLModel.pretrained(&quot;assertion_vop_clinical_medium&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(&quot;sentence&quot;, &quot;ner_chunk&quot;, &quot;embeddings&quot;) .setOutputCol(&quot;assertion&quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter, assertion)) val data = Seq(&quot;I was feeling anxiety honestly. Can it bring on tremors? It was right after my friend was diagnosed with diabetes.&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +--------+-----+---+----------------------+-------+----------------------+----------+ |chunk |begin|end|ner_label |sent_id|assertion |confidence| +--------+-----+---+----------------------+-------+----------------------+----------+ |anxiety |14 |20 |PsychologicalCondition|0 |Present_Or_Past |0.9853 | |tremors |48 |54 |Symptom |1 |Hypothetical_Or_Absent|0.9998 | |diabetes|105 |112|Disease |2 |SomeoneElse |0.9916 | +--------+-----+---+----------------------+-------+----------------------+----------+ Model Information Model Name: assertion_vop_clinical_medium Compatibility: Healthcare NLP 5.0.1+ License: Licensed Edition: Official Input Labels: [document, chunk, embeddings] Output Labels: [assertion] Language: en Size: 941.1 KB References In-house annotated health-related text in colloquial language. Benchmarking label precision recall f1-score support Hypothetical_Or_Absent 0.79 0.75 0.77 1265 Present_Or_Past 0.87 0.90 0.88 2873 SomeoneElse 0.92 0.90 0.91 1084 accuracy - - 0.86 5222 macro_avg 0.86 0.85 0.85 5222 weighted_avg 0.86 0.86 0.86 5222</summary></entry><entry><title type="html">Few Shot Age Group Classification</title><link href="/2023/08/17/few_shot_classifier_age_group_sbiobert_cased_mli_en.html" rel="alternate" type="text/html" title="Few Shot Age Group Classification" /><published>2023-08-17T00:00:00+00:00</published><updated>2023-08-17T00:00:00+00:00</updated><id>/2023/08/17/few_shot_classifier_age_group_sbiobert_cased_mli_en</id><content type="html" xml:base="/2023/08/17/few_shot_classifier_age_group_sbiobert_cased_mli_en.html">## Description

Few-shot classification in NLP refers to the task of building text classification models that can learn from only a small number of labeled examples per class. It aims to mimic the human ability to learn concepts from just a few examples.

The original dataset included thousands of labelled text; for the training of this Few Shot Classifier model, only a small portion of the original dataset was used and the benchmarks are satisfactory.

This Few Shot Classifier model is trained for analyzing the age group of a person mentioned in health documents. Age of the person may or may not be mentioned explicitly in the training dataset.

The Text Classifier model has been trained using in-house annotated health-related text that have been labeled with three different classes:

`Adult`: A person who is fully grown or developed. Typically refers to someone who is 18 years or older,

`Child`: Requires intervention, urgent, not life-threatening cases.

`Unknown`: Not possible to comprehend/figure out the age group from the given text.

## Predicted Entities

`Adult`, `Child`, `Unknown`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/few_shot_classifier_age_group_sbiobert_cased_mli_en_5.0.1_3.0_1692292726234.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/few_shot_classifier_age_group_sbiobert_cased_mli_en_5.0.1_3.0_1692292726234.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

bert_sent = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence_embeddings&quot;)

few_shot_classifier = FewShotClassifierModel.pretrained(&quot;few_shot_classifier_age_group_sbiobert_cased_mli&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence_embeddings&quot;])\
    .setOutputCol(&quot;prediction&quot;)

clf_Pipeline = Pipeline(stages=[
    document_assembler,
    bert_sent,
    few_shot_classifier
])

data = spark.createDataFrame([[&quot;&quot;&quot;A patient presented with complaints of chest pain and shortness of breath. The medical history revealed the patient had a smoking habit for over 30 years, and was diagnosed with hypertension two years ago. After a detailed physical examination, the doctor found a noticeable wheeze on lung auscultation and prescribed a spirometry test, which showed irreversible airway obstruction. The patient was diagnosed with Chronic obstructive pulmonary disease (COPD) caused by smoking.&quot;&quot;&quot;],
 [&quot;&quot;&quot;Hi, wondering if anyone has had a similar situation. My 1 year old daughter has the following; loose stools/ pale stools, elevated liver enzymes, low iron.  5 months and still no answers from drs. &quot;&quot;&quot;],
 [&quot;&quot;&quot;Hi have chronic gastritis from 4 month(confirmed by endoscopy).I do not have acid reflux.Only dull ache above abdomen and left side of chest.I am on reberprozole and librax.My question is whether chronic gastritis is curable or is it a lifetime condition?I am loosing hope because this dull ache is not going away.Please please reply&quot;&quot;&quot;]]).toDF(&quot;text&quot;)

result = clf_Pipeline.fit(data).transform(data)
```
```scala
val document_assembler =new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)

val sentence_embeddings = new BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence_embeddings&quot;)

val few_shot_classifier = new FewShotClassifierModel.pretrained(&quot;few_shot_classifier_age_group_sbiobert_cased_mli&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(&quot;sentence_embeddings&quot;)
    .setOutputCol(&quot;prediction&quot;)

val clf_Pipeline = new Pipeline().setStages(Array(document_assembler, sentence_embeddings, few_shot_classifier))

val data = Seq(Array(&quot;A patient presented with complaints of chest pain and shortness of breath. The medical history revealed the patient had a smoking habit for over 30 years, and was diagnosed with hypertension two years ago. After a detailed physical examination, the doctor found a noticeable wheeze on lung auscultation and prescribed a spirometry test, which showed irreversible airway obstruction. The patient was diagnosed with Chronic obstructive pulmonary disease (COPD) caused by smoking.&quot;, &quot;Hi, wondering if anyone has had a similar situation. My 1 year old daughter has the following; loose stools/ pale stools, elevated liver enzymes, low iron.  5 months and still no answers from drs.&quot;, &quot;Hi have chronic gastritis from 4 month(confirmed by endoscopy).I do not have acid reflux.Only dull ache above abdomen and left side of chest.I am on reberprozole and librax.My question is whether chronic gastritis is curable or is it a lifetime condition?I am loosing hope because this dull ache is not going away.Please please reply&quot;)).toDS().toDF(&quot;text&quot;)

val result = clf_Pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+------------------------------------------------------------------------------------------------------------------------------------------------------+---------+
|                                                                                                                                                  text|   result|
+------------------------------------------------------------------------------------------------------------------------------------------------------+---------+
|A patient presented with complaints of chest pain and shortness of breath. The medical history revealed the patient had a smoking habit for over 30...|  [Adult]|
|Hi, wondering if anyone has had a similar situation. My 1 year old daughter has the following; loose stools/ pale stools, elevated liver enzymes, l...|  [Child]|
|Hi have chronic gastritis from 4 month(confirmed by endoscopy).I do not have acid reflux.Only dull ache above abdomen and left side of chest.I am o...|[Unknown]|
+------------------------------------------------------------------------------------------------------------------------------------------------------+---------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|few_shot_classifier_age_group_sbiobert_cased_mli|
|Compatibility:|Healthcare NLP 5.0.1+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence_embeddings]|
|Output Labels:|[prediction]|
|Language:|en|
|Size:|47.2 KB|

## References

In-house annotated health-related text.

## Benchmarking

```bash
       label  precision    recall  f1-score   support
       Adult       0.76      0.72      0.74       329
       Child       0.87      0.91      0.89       194
     Unknown       0.74      0.77      0.76       325
    accuracy       -         -         0.78       848
   macro-avg       0.79      0.80      0.80       848
weighted-avg       0.78      0.78      0.78       848
```</content><author><name>John Snow Labs</name></author><category term="clinical" /><category term="licensed" /><category term="en" /><category term="text_classification" /><category term="age" /><category term="age_group" /><category term="few_shot" /><summary type="html">Description Few-shot classification in NLP refers to the task of building text classification models that can learn from only a small number of labeled examples per class. It aims to mimic the human ability to learn concepts from just a few examples. The original dataset included thousands of labelled text; for the training of this Few Shot Classifier model, only a small portion of the original dataset was used and the benchmarks are satisfactory. This Few Shot Classifier model is trained for analyzing the age group of a person mentioned in health documents. Age of the person may or may not be mentioned explicitly in the training dataset. The Text Classifier model has been trained using in-house annotated health-related text that have been labeled with three different classes: Adult: A person who is fully grown or developed. Typically refers to someone who is 18 years or older, Child: Requires intervention, urgent, not life-threatening cases. Unknown: Not possible to comprehend/figure out the age group from the given text. Predicted Entities Adult, Child, Unknown Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) bert_sent = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence_embeddings&quot;) few_shot_classifier = FewShotClassifierModel.pretrained(&quot;few_shot_classifier_age_group_sbiobert_cased_mli&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence_embeddings&quot;])\ .setOutputCol(&quot;prediction&quot;) clf_Pipeline = Pipeline(stages=[ document_assembler, bert_sent, few_shot_classifier ]) data = spark.createDataFrame([[&quot;&quot;&quot;A patient presented with complaints of chest pain and shortness of breath. The medical history revealed the patient had a smoking habit for over 30 years, and was diagnosed with hypertension two years ago. After a detailed physical examination, the doctor found a noticeable wheeze on lung auscultation and prescribed a spirometry test, which showed irreversible airway obstruction. The patient was diagnosed with Chronic obstructive pulmonary disease (COPD) caused by smoking.&quot;&quot;&quot;], [&quot;&quot;&quot;Hi, wondering if anyone has had a similar situation. My 1 year old daughter has the following; loose stools/ pale stools, elevated liver enzymes, low iron. 5 months and still no answers from drs. &quot;&quot;&quot;], [&quot;&quot;&quot;Hi have chronic gastritis from 4 month(confirmed by endoscopy).I do not have acid reflux.Only dull ache above abdomen and left side of chest.I am on reberprozole and librax.My question is whether chronic gastritis is curable or is it a lifetime condition?I am loosing hope because this dull ache is not going away.Please please reply&quot;&quot;&quot;]]).toDF(&quot;text&quot;) result = clf_Pipeline.fit(data).transform(data) val document_assembler =new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_embeddings = new BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence_embeddings&quot;) val few_shot_classifier = new FewShotClassifierModel.pretrained(&quot;few_shot_classifier_age_group_sbiobert_cased_mli&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(&quot;sentence_embeddings&quot;) .setOutputCol(&quot;prediction&quot;) val clf_Pipeline = new Pipeline().setStages(Array(document_assembler, sentence_embeddings, few_shot_classifier)) val data = Seq(Array(&quot;A patient presented with complaints of chest pain and shortness of breath. The medical history revealed the patient had a smoking habit for over 30 years, and was diagnosed with hypertension two years ago. After a detailed physical examination, the doctor found a noticeable wheeze on lung auscultation and prescribed a spirometry test, which showed irreversible airway obstruction. The patient was diagnosed with Chronic obstructive pulmonary disease (COPD) caused by smoking.&quot;, &quot;Hi, wondering if anyone has had a similar situation. My 1 year old daughter has the following; loose stools/ pale stools, elevated liver enzymes, low iron. 5 months and still no answers from drs.&quot;, &quot;Hi have chronic gastritis from 4 month(confirmed by endoscopy).I do not have acid reflux.Only dull ache above abdomen and left side of chest.I am on reberprozole and librax.My question is whether chronic gastritis is curable or is it a lifetime condition?I am loosing hope because this dull ache is not going away.Please please reply&quot;)).toDS().toDF(&quot;text&quot;) val result = clf_Pipeline.fit(data).transform(data) Results +------------------------------------------------------------------------------------------------------------------------------------------------------+---------+ | text| result| +------------------------------------------------------------------------------------------------------------------------------------------------------+---------+ |A patient presented with complaints of chest pain and shortness of breath. The medical history revealed the patient had a smoking habit for over 30...| [Adult]| |Hi, wondering if anyone has had a similar situation. My 1 year old daughter has the following; loose stools/ pale stools, elevated liver enzymes, l...| [Child]| |Hi have chronic gastritis from 4 month(confirmed by endoscopy).I do not have acid reflux.Only dull ache above abdomen and left side of chest.I am o...|[Unknown]| +------------------------------------------------------------------------------------------------------------------------------------------------------+---------+ Model Information Model Name: few_shot_classifier_age_group_sbiobert_cased_mli Compatibility: Healthcare NLP 5.0.1+ License: Licensed Edition: Official Input Labels: [sentence_embeddings] Output Labels: [prediction] Language: en Size: 47.2 KB References In-house annotated health-related text. Benchmarking label precision recall f1-score support Adult 0.76 0.72 0.74 329 Child 0.87 0.91 0.89 194 Unknown 0.74 0.77 0.76 325 accuracy - - 0.78 848 macro-avg 0.79 0.80 0.80 848 weighted-avg 0.78 0.78 0.78 848</summary></entry><entry><title type="html">Summarize Clinical Notes in Laymen Terms (ONNX)</title><link href="/2023/08/16/summarizer_clinical_laymen_onnx_en.html" rel="alternate" type="text/html" title="Summarize Clinical Notes in Laymen Terms (ONNX)" /><published>2023-08-16T00:00:00+00:00</published><updated>2023-08-16T00:00:00+00:00</updated><id>/2023/08/16/summarizer_clinical_laymen_onnx_en</id><content type="html" xml:base="/2023/08/16/summarizer_clinical_laymen_onnx_en.html">## Description

This model is a modified version of Flan-T5 (LLM) based summarization model that is finetuned with custom dataset by John Snow Labs to avoid using clinical jargon on the summaries. It can generate summaries up to 512 tokens given an input text (max 1024 tokens).

## Predicted Entities



{:.btn-box}
[Live Demo](https://demo.johnsnowlabs.com/healthcare/MEDICAL_LLM/){:.button.button-orange}
[Open in Colab](https://colab.research.google.com/github/JohnSnowLabs/spark-nlp-workshop/blob/master/tutorials/streamlit_notebooks/healthcare/MEDICAL_LLM.ipynb){:.button.button-orange.button-orange-trans.co.button-icon}
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/summarizer_clinical_laymen_onnx_en_5.0.1_3.0_1692190546251.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/summarizer_clinical_laymen_onnx_en_5.0.1_3.0_1692190546251.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

summarizer = MedicalSummarizer.pretrained(&quot;summarizer_clinical_laymen_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;summary&quot;)\
    .setMaxNewTokens(512)

pipeline = Pipeline(stages=[
    document_assembler,
    summarizer  
])

text =&quot;&quot;&quot;Olivia Smith was seen in my office for evaluation for elective surgical weight loss on October 6, 2008. Olivia Smith is a 34-year-old female with a BMI of 43. She is 5'6&quot; tall and weighs 267 pounds. She is motivated to attempt surgical weight loss because she has been overweight for over 20 years and wants to have more energy and improve her self-image. She is not only affected physically, but also socially by her weight. When she loses weight she always regains it and she always gains back more weight than she has lost. At one time, she lost 100 pounds and gained the weight back within a year. She has tried numerous commercial weight loss programs including Weight Watcher's for four months in 1992 with 15-pound weight loss, RS for two months in 1990 with six-pound weight loss, Slim Fast for six weeks in 2004 with eight-pound weight loss, an exercise program for two months in 2007 with a five-pound weight loss, Atkin's Diet for three months in 2008 with a ten-pound weight loss, and Dexatrim for one month in 2005 with a five-pound weight loss. She has also tried numerous fat reduction or fad diets. She was on Redux for nine months with a 100-pound weight loss.\n\nPAST MEDICAL HISTORY: She has a history of hypertension and shortness of breath.\n\nPAST SURGICAL HISTORY: Pertinent for cholecystectomy.\n\nPSYCHOLOGICAL HISTORY: Negative.\n\nSOCIAL HISTORY: She is single. She drinks alcohol once a week. She does not smoke.\n\nFAMILY HISTORY: Pertinent for obesity and hypertension.\n\nMEDICATIONS: Include Topamax 100 mg twice daily, Zoloft 100 mg twice daily, Abilify 5 mg daily, Motrin 800 mg daily, and a multivitamin.\n\nALLERGIES: She has no known drug allergies.\n\nREVIEW OF SYSTEMS: Negative.\n\nPHYSICAL EXAM: This is a pleasant female in no acute distress. Alert and oriented x 3. HEENT: Normocephalic, atraumatic. Extraocular muscles intact, nonicteric sclerae. Chest is clear to auscultation bilaterally. Cardiovascular is normal sinus rhythm. Abdomen is obese, soft, nontender and nondistended. Extremities show no edema, clubbing or cyanosis.\n\nASSESSMENT/PLAN: This is a 34-year-old female with a BMI of 43 who is interested in surgical weight via the gastric bypass as opposed to Lap-Band. Olivia Smith will be asking for a letter of medical necessity from Dr. Andrew Johnson. She will also see my nutritionist and social worker and have an upper endoscopy. Once this is completed, we will submit her to her insurance company for approval.
&quot;&quot;&quot;

data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)

val summarizer = MedicalSummarizer.pretrained(&quot;summarizer_clinical_laymen_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;summary&quot;)
    .setMaxNewTokens(512)

val pipeline = new Pipeline().setStages(Array(document_assembler, summarizer))

val data = Seq(&quot;&quot;&quot;Olivia Smith was seen in my office for evaluation for elective surgical weight loss on October 6, 2008. Olivia Smith is a 34-year-old female with a BMI of 43. She is 5'6&quot; tall and weighs 267 pounds. She is motivated to attempt surgical weight loss because she has been overweight for over 20 years and wants to have more energy and improve her self-image. She is not only affected physically, but also socially by her weight. When she loses weight she always regains it and she always gains back more weight than she has lost. At one time, she lost 100 pounds and gained the weight back within a year. She has tried numerous commercial weight loss programs including Weight Watcher's for four months in 1992 with 15-pound weight loss, RS for two months in 1990 with six-pound weight loss, Slim Fast for six weeks in 2004 with eight-pound weight loss, an exercise program for two months in 2007 with a five-pound weight loss, Atkin's Diet for three months in 2008 with a ten-pound weight loss, and Dexatrim for one month in 2005 with a five-pound weight loss. She has also tried numerous fat reduction or fad diets. She was on Redux for nine months with a 100-pound weight loss.\n\nPAST MEDICAL HISTORY: She has a history of hypertension and shortness of breath.\n\nPAST SURGICAL HISTORY: Pertinent for cholecystectomy.\n\nPSYCHOLOGICAL HISTORY: Negative.\n\nSOCIAL HISTORY: She is single. She drinks alcohol once a week. She does not smoke.\n\nFAMILY HISTORY: Pertinent for obesity and hypertension.\n\nMEDICATIONS: Include Topamax 100 mg twice daily, Zoloft 100 mg twice daily, Abilify 5 mg daily, Motrin 800 mg daily, and a multivitamin.\n\nALLERGIES: She has no known drug allergies.\n\nREVIEW OF SYSTEMS: Negative.\n\nPHYSICAL EXAM: This is a pleasant female in no acute distress. Alert and oriented x 3. HEENT: Normocephalic, atraumatic. Extraocular muscles intact, nonicteric sclerae. Chest is clear to auscultation bilaterally. Cardiovascular is normal sinus rhythm. Abdomen is obese, soft, nontender and nondistended. Extremities show no edema, clubbing or cyanosis.\n\nASSESSMENT/PLAN: This is a 34-year-old female with a BMI of 43 who is interested in surgical weight via the gastric bypass as opposed to Lap-Band. Olivia Smith will be asking for a letter of medical necessity from Dr. Andrew Johnson. She will also see my nutritionist and social worker and have an upper endoscopy. Once this is completed, we will submit her to her insurance company for approval.&quot;&quot;&quot;).toDS().toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
['This is a clinical note about a 34-year-old woman who is interested in having weight loss surgery. She has been overweight for over 20 years and wants to have more energy and improve her self-image. She has tried many diets and weight loss programs, but has not been successful in keeping the weight off. She has a history of hypertension and shortness of breath, but is not allergic to any medications. She will have an upper endoscopy and will be contacted by a nutritionist and social worker. The plan is to have her weight loss surgery through the gastric bypass, rather than Lap-Band.']
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|summarizer_clinical_laymen_onnx|
|Compatibility:|Healthcare NLP 5.0.1+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|1.0 GB|</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="clinical" /><category term="en" /><category term="summarization" /><category term="laymen" /><category term="onnx" /><summary type="html">Description This model is a modified version of Flan-T5 (LLM) based summarization model that is finetuned with custom dataset by John Snow Labs to avoid using clinical jargon on the summaries. It can generate summaries up to 512 tokens given an input text (max 1024 tokens). Predicted Entities Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) summarizer = MedicalSummarizer.pretrained(&quot;summarizer_clinical_laymen_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;summary&quot;)\ .setMaxNewTokens(512) pipeline = Pipeline(stages=[ document_assembler, summarizer ]) text =&quot;&quot;&quot;Olivia Smith was seen in my office for evaluation for elective surgical weight loss on October 6, 2008. Olivia Smith is a 34-year-old female with a BMI of 43. She is 5'6&quot; tall and weighs 267 pounds. She is motivated to attempt surgical weight loss because she has been overweight for over 20 years and wants to have more energy and improve her self-image. She is not only affected physically, but also socially by her weight. When she loses weight she always regains it and she always gains back more weight than she has lost. At one time, she lost 100 pounds and gained the weight back within a year. She has tried numerous commercial weight loss programs including Weight Watcher's for four months in 1992 with 15-pound weight loss, RS for two months in 1990 with six-pound weight loss, Slim Fast for six weeks in 2004 with eight-pound weight loss, an exercise program for two months in 2007 with a five-pound weight loss, Atkin's Diet for three months in 2008 with a ten-pound weight loss, and Dexatrim for one month in 2005 with a five-pound weight loss. She has also tried numerous fat reduction or fad diets. She was on Redux for nine months with a 100-pound weight loss.\n\nPAST MEDICAL HISTORY: She has a history of hypertension and shortness of breath.\n\nPAST SURGICAL HISTORY: Pertinent for cholecystectomy.\n\nPSYCHOLOGICAL HISTORY: Negative.\n\nSOCIAL HISTORY: She is single. She drinks alcohol once a week. She does not smoke.\n\nFAMILY HISTORY: Pertinent for obesity and hypertension.\n\nMEDICATIONS: Include Topamax 100 mg twice daily, Zoloft 100 mg twice daily, Abilify 5 mg daily, Motrin 800 mg daily, and a multivitamin.\n\nALLERGIES: She has no known drug allergies.\n\nREVIEW OF SYSTEMS: Negative.\n\nPHYSICAL EXAM: This is a pleasant female in no acute distress. Alert and oriented x 3. HEENT: Normocephalic, atraumatic. Extraocular muscles intact, nonicteric sclerae. Chest is clear to auscultation bilaterally. Cardiovascular is normal sinus rhythm. Abdomen is obese, soft, nontender and nondistended. Extremities show no edema, clubbing or cyanosis.\n\nASSESSMENT/PLAN: This is a 34-year-old female with a BMI of 43 who is interested in surgical weight via the gastric bypass as opposed to Lap-Band. Olivia Smith will be asking for a letter of medical necessity from Dr. Andrew Johnson. She will also see my nutritionist and social worker and have an upper endoscopy. Once this is completed, we will submit her to her insurance company for approval. &quot;&quot;&quot; data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val summarizer = MedicalSummarizer.pretrained(&quot;summarizer_clinical_laymen_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;summary&quot;) .setMaxNewTokens(512) val pipeline = new Pipeline().setStages(Array(document_assembler, summarizer)) val data = Seq(&quot;&quot;&quot;Olivia Smith was seen in my office for evaluation for elective surgical weight loss on October 6, 2008. Olivia Smith is a 34-year-old female with a BMI of 43. She is 5'6&quot; tall and weighs 267 pounds. She is motivated to attempt surgical weight loss because she has been overweight for over 20 years and wants to have more energy and improve her self-image. She is not only affected physically, but also socially by her weight. When she loses weight she always regains it and she always gains back more weight than she has lost. At one time, she lost 100 pounds and gained the weight back within a year. She has tried numerous commercial weight loss programs including Weight Watcher's for four months in 1992 with 15-pound weight loss, RS for two months in 1990 with six-pound weight loss, Slim Fast for six weeks in 2004 with eight-pound weight loss, an exercise program for two months in 2007 with a five-pound weight loss, Atkin's Diet for three months in 2008 with a ten-pound weight loss, and Dexatrim for one month in 2005 with a five-pound weight loss. She has also tried numerous fat reduction or fad diets. She was on Redux for nine months with a 100-pound weight loss.\n\nPAST MEDICAL HISTORY: She has a history of hypertension and shortness of breath.\n\nPAST SURGICAL HISTORY: Pertinent for cholecystectomy.\n\nPSYCHOLOGICAL HISTORY: Negative.\n\nSOCIAL HISTORY: She is single. She drinks alcohol once a week. She does not smoke.\n\nFAMILY HISTORY: Pertinent for obesity and hypertension.\n\nMEDICATIONS: Include Topamax 100 mg twice daily, Zoloft 100 mg twice daily, Abilify 5 mg daily, Motrin 800 mg daily, and a multivitamin.\n\nALLERGIES: She has no known drug allergies.\n\nREVIEW OF SYSTEMS: Negative.\n\nPHYSICAL EXAM: This is a pleasant female in no acute distress. Alert and oriented x 3. HEENT: Normocephalic, atraumatic. Extraocular muscles intact, nonicteric sclerae. Chest is clear to auscultation bilaterally. Cardiovascular is normal sinus rhythm. Abdomen is obese, soft, nontender and nondistended. Extremities show no edema, clubbing or cyanosis.\n\nASSESSMENT/PLAN: This is a 34-year-old female with a BMI of 43 who is interested in surgical weight via the gastric bypass as opposed to Lap-Band. Olivia Smith will be asking for a letter of medical necessity from Dr. Andrew Johnson. She will also see my nutritionist and social worker and have an upper endoscopy. Once this is completed, we will submit her to her insurance company for approval.&quot;&quot;&quot;).toDS().toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results ['This is a clinical note about a 34-year-old woman who is interested in having weight loss surgery. She has been overweight for over 20 years and wants to have more energy and improve her self-image. She has tried many diets and weight loss programs, but has not been successful in keeping the weight off. She has a history of hypertension and shortness of breath, but is not allergic to any medications. She will have an upper endoscopy and will be contacted by a nutritionist and social worker. The plan is to have her weight loss surgery through the gastric bypass, rather than Lap-Band.'] Model Information Model Name: summarizer_clinical_laymen_onnx Compatibility: Healthcare NLP 5.0.1+ License: Licensed Edition: Official Language: en Size: 1.0 GB</summary></entry><entry><title type="html">Pipeline to Map Abbreviations and Acronyms</title><link href="/2023/08/16/abbreviation_pipeline_en.html" rel="alternate" type="text/html" title="Pipeline to Map Abbreviations and Acronyms" /><published>2023-08-16T00:00:00+00:00</published><updated>2023-08-16T00:00:00+00:00</updated><id>/2023/08/16/abbreviation_pipeline_en</id><content type="html" xml:base="/2023/08/16/abbreviation_pipeline_en.html">## Description

A pretrained pipeline to detect abbreviations and acronyms of medical regulatory activities as well as map them with their definitions and categories.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/abbreviation_pipeline_en_5.0.1_3.0_1692200371184.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/abbreviation_pipeline_en_5.0.1_3.0_1692200371184.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
from sparknlp.pretrained import PretrainedPipeline

abbr_pipeline = PretrainedPipeline(&quot;abbreviation_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

result = abbr_pipeline.fullAnnotate(&quot;&quot;&quot;Gravid with estimated fetal weight of 6-6/12 pounds.
           LABORATORY DATA: Laboratory tests include a CBC which is normal. 
           VDRL: Nonreactive
           HIV: Negative. One-Hour Glucose: 117. Group B strep has not been done as yet.&quot;&quot;&quot;)
```
```scala
import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline

val abbr_pipeline = new PretrainedPipeline(&quot;abbreviation_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

val result = abbr_pipeline.fullAnnotate(&quot;&quot;&quot;Gravid with estimated fetal weight of 6-6/12 pounds.
           LABORATORY DATA: Laboratory tests include a CBC which is normal. 
           VDRL: Nonreactive
           HIV: Negative. One-Hour Glucose: 117. Group B strep has not been done as yet.&quot;&quot;&quot;)
```
&lt;/div&gt;

## Results

```bash

+-----+------+-----------------+----------------------------------------+
|chunk|entity|category_mappings|                     definition_mappings|
+-----+------+-----------------+----------------------------------------+
|  CBC|  ABBR|          general|complete blood count                 ...|
| VDRL|  ABBR|    clinical_dept|  Venereal Disease Research Laboratories|
|  HIV|  ABBR|medical_condition|            Human immunodeficiency virus|
+-----+------+-----------------+----------------------------------------+

```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|abbreviation_pipeline|
|Type:|pipeline|
|Compatibility:|Healthcare NLP 5.0.1+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|1.7 GB|

## Included Models

- DocumentAssembler
- SentenceDetector
- TokenizerModel
- WordEmbeddingsModel
- MedicalNerModel
- NerConverter
- ChunkMapperModel
- ChunkMapperModel</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="en" /><category term="clinical" /><category term="abbreviation" /><category term="acronym" /><summary type="html">Description A pretrained pipeline to detect abbreviations and acronyms of medical regulatory activities as well as map them with their definitions and categories. Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU from sparknlp.pretrained import PretrainedPipeline abbr_pipeline = PretrainedPipeline(&quot;abbreviation_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) result = abbr_pipeline.fullAnnotate(&quot;&quot;&quot;Gravid with estimated fetal weight of 6-6/12 pounds. LABORATORY DATA: Laboratory tests include a CBC which is normal. VDRL: Nonreactive HIV: Negative. One-Hour Glucose: 117. Group B strep has not been done as yet.&quot;&quot;&quot;) import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline val abbr_pipeline = new PretrainedPipeline(&quot;abbreviation_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) val result = abbr_pipeline.fullAnnotate(&quot;&quot;&quot;Gravid with estimated fetal weight of 6-6/12 pounds. LABORATORY DATA: Laboratory tests include a CBC which is normal. VDRL: Nonreactive HIV: Negative. One-Hour Glucose: 117. Group B strep has not been done as yet.&quot;&quot;&quot;) Results +-----+------+-----------------+----------------------------------------+ |chunk|entity|category_mappings| definition_mappings| +-----+------+-----------------+----------------------------------------+ | CBC| ABBR| general|complete blood count ...| | VDRL| ABBR| clinical_dept| Venereal Disease Research Laboratories| | HIV| ABBR|medical_condition| Human immunodeficiency virus| +-----+------+-----------------+----------------------------------------+ Model Information Model Name: abbreviation_pipeline Type: pipeline Compatibility: Healthcare NLP 5.0.1+ License: Licensed Edition: Official Language: en Size: 1.7 GB Included Models DocumentAssembler SentenceDetector TokenizerModel WordEmbeddingsModel MedicalNerModel NerConverter ChunkMapperModel ChunkMapperModel</summary></entry><entry><title type="html">ICD-10-CM Code Mapping Pipeline</title><link href="/2023/08/16/icd10cm_multi_mapper_pipeline_en.html" rel="alternate" type="text/html" title="ICD-10-CM Code Mapping Pipeline" /><published>2023-08-16T00:00:00+00:00</published><updated>2023-08-16T00:00:00+00:00</updated><id>/2023/08/16/icd10cm_multi_mapper_pipeline_en</id><content type="html" xml:base="/2023/08/16/icd10cm_multi_mapper_pipeline_en.html">## Description

This pretrained pipeline maps ICD-10-CM codes to their corresponding billable mappings, hcc codes, cause mappings, claim mappings, SNOMED codes, UMLS codes and ICD-9 codes without using any text data. You’ll just feed white space-delimited ICD-10-CM codes and get the result.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/icd10cm_multi_mapper_pipeline_en_5.0.1_3.0_1692200975604.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/icd10cm_multi_mapper_pipeline_en_5.0.1_3.0_1692200975604.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
from sparknlp.pretrained import PretrainedPipeline

icd10cm_pipeline = PretrainedPipeline(&quot;icd10cm_multi_mapper_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

result = icd10cm_pipeline.fullAnnotate(&quot;&quot;&quot;Z833 D66 G43.83&quot;&quot;&quot;)
```
```scala
import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline

val icd10cm_pipeline = new PretrainedPipeline(&quot;icd10cm_multi_mapper_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

val result = icd10cm_pipeline.fullAnnotate(&quot;&quot;&quot;Z833 D66 G43.83&quot;&quot;&quot;)
```
&lt;/div&gt;

## Results

```bash

|    | icd10cm_code   | bill_mappings   | hcc_mappings   | cause_mappings           | claim_mappings   | snomed_mappings   | umls_mappings   | icd9_mappings   |
|---:|:---------------|:----------------|:---------------|:-------------------------|:-----------------|:------------------|:----------------|:----------------|
|  0 | D66            | 1               | 46             | Nutritional deficiencies | NONE             | 438599002         | C0019069        | 2860            |
|  1 | Z833           | NONE            | NONE           | NONE                     | NONE             | 160402005         | C0260526        | V180            |
|  2 | G43.83         | 0               | 0              | Headache disorders       | G43.83           | NONE              | NONE            | NONE            |

```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|icd10cm_multi_mapper_pipeline|
|Type:|pipeline|
|Compatibility:|Healthcare NLP 5.0.1+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|5.9 MB|

## Included Models

- DocumentAssembler
- TokenizerModel
- DocMapperModel
- DocMapperModel
- ChunkMapperModel
- ChunkMapperModel
- ChunkMapperModel
- ChunkMapperModel
- ChunkMapperModel</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="en" /><category term="clinical" /><category term="icd10cm" /><category term="pipeline" /><summary type="html">Description This pretrained pipeline maps ICD-10-CM codes to their corresponding billable mappings, hcc codes, cause mappings, claim mappings, SNOMED codes, UMLS codes and ICD-9 codes without using any text data. You’ll just feed white space-delimited ICD-10-CM codes and get the result. Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU from sparknlp.pretrained import PretrainedPipeline icd10cm_pipeline = PretrainedPipeline(&quot;icd10cm_multi_mapper_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) result = icd10cm_pipeline.fullAnnotate(&quot;&quot;&quot;Z833 D66 G43.83&quot;&quot;&quot;) import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline val icd10cm_pipeline = new PretrainedPipeline(&quot;icd10cm_multi_mapper_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) val result = icd10cm_pipeline.fullAnnotate(&quot;&quot;&quot;Z833 D66 G43.83&quot;&quot;&quot;) Results | | icd10cm_code | bill_mappings | hcc_mappings | cause_mappings | claim_mappings | snomed_mappings | umls_mappings | icd9_mappings | |---:|:---------------|:----------------|:---------------|:-------------------------|:-----------------|:------------------|:----------------|:----------------| | 0 | D66 | 1 | 46 | Nutritional deficiencies | NONE | 438599002 | C0019069 | 2860 | | 1 | Z833 | NONE | NONE | NONE | NONE | 160402005 | C0260526 | V180 | | 2 | G43.83 | 0 | 0 | Headache disorders | G43.83 | NONE | NONE | NONE | Model Information Model Name: icd10cm_multi_mapper_pipeline Type: pipeline Compatibility: Healthcare NLP 5.0.1+ License: Licensed Edition: Official Language: en Size: 5.9 MB Included Models DocumentAssembler TokenizerModel DocMapperModel DocMapperModel ChunkMapperModel ChunkMapperModel ChunkMapperModel ChunkMapperModel ChunkMapperModel</summary></entry><entry><title type="html">Detect Problems, Tests, and Treatments (Portuguese)</title><link href="/2023/08/16/ner_clinical_pt.html" rel="alternate" type="text/html" title="Detect Problems, Tests, and Treatments (Portuguese)" /><published>2023-08-16T00:00:00+00:00</published><updated>2023-08-16T00:00:00+00:00</updated><id>/2023/08/16/ner_clinical_pt</id><content type="html" xml:base="/2023/08/16/ner_clinical_pt.html">## Description

Pretrained named entity recognition deep learning model for clinical terms in Portuguese. The SparkNLP deep learning model (MedicalNerModel) is inspired by a former state-of-the-art model for NER: Chiu &amp; Nicols, Named Entity Recognition with Bidirectional LSTM-CNN.

## Predicted Entities

`PROBLEM`, `TEST`, `TREATMENT`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_clinical_pt_5.0.1_3.0_1692216634922.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_clinical_pt_5.0.1_3.0_1692216634922.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl&quot;, &quot;en&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer()\
    .setInputCols([&quot;sentence&quot;])\
    .setOutputCol(&quot;token&quot;)

embeddings = WordEmbeddingsModel.pretrained(&quot;w2v_cc_300d&quot;,&quot;pt&quot;) \
.setInputCols([&quot;document&quot;, &quot;token&quot;]) \
.setOutputCol(&quot;embeddings&quot;)

ner_model = MedicalNerModel.pretrained(&quot;ner_clinical&quot;, &quot;pt&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverterInternal()\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\
    .setOutputCol(&quot;ner_chunk&quot;)

pipeline = Pipeline(stages=[
    document_assembler, 
    sentence_detector,
    tokenizer,
    embeddings,
    ner_model,
    ner_converter   
    ])

sample_text = &quot;&quot;&quot;A paciente apresenta sensibilidade dentária ao consumir alimentos quentes e frios.
Realizou-se um exame clínico e radiográfico para avaliar possíveis cáries ou problemas na raiz do dente.
Identificou-se uma cárie próxima à raiz do dente. Foi realizado um tratamento de restauração para resolver o problema.&quot;&quot;&quot;

data = spark.createDataFrame([[sample_text]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)

val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl&quot;, &quot;en&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)

val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)

val embeddings = WordEmbeddingsModel.pretrained(&quot;w2v_cc_300d&quot;,&quot;pt&quot;)
    .setInputCols(Array(&quot;document&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)

val ner_model = MedicalNerModel.pretrained(&quot;ner_clinical&quot;, &quot;pt&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)

val ner_converter = new NerConverterInternal()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

val pipeline = new Pipeline().setStages(Array(
    document_assembler, 
    sentence_detector,
    tokenizer,
    embeddings,
    ner_model,
    ner_converter   
    ])

val sample_data = Seq(&quot;&quot;&quot;A paciente apresenta sensibilidade dentária ao consumir alimentos quentes e frios.
Realizou-se um exame clínico e radiográfico para avaliar possíveis cáries ou problemas na raiz do dente.
Identificou-se uma cárie próxima à raiz do dente. Foi realizado um tratamento de restauração para resolver o problema.&quot;&quot;&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(sample_data).transform(sample_data)
```
&lt;/div&gt;

## Results

```bash
+--------------------------+-----+---+---------+
|chunk                     |begin|end|ner_label|
+--------------------------+-----+---+---------+
|sensibilidade dentária    |21   |42 |PROBLEM  |
|alimentos                 |56   |64 |TREATMENT|
|exame clínico             |98   |110|TEST     |
|cáries                    |150  |155|PROBLEM  |
|problemas na raiz do dente|160  |185|PROBLEM  |
|uma cárie                 |203  |211|PROBLEM  |
|tratamento de restauração |255  |279|TREATMENT|
|problema                  |297  |304|PROBLEM  |
+--------------------------+-----+---+---------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_clinical|
|Compatibility:|Healthcare NLP 5.0.1+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|pt|
|Size:|2.9 MB|

## Benchmarking

```bash
       label  precision    recall  f1-score   support
   TREATMENT       0.83      0.66      0.73       480
        TEST       0.93      0.79      0.85       500
     PROBLEM       0.83      0.83      0.83      1037
   micro-avg       0.85      0.78      0.81      2017
   macro-avg       0.86      0.76      0.81      2017
weighted-avg       0.85      0.78      0.81      2017
```</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="clinical" /><category term="ner" /><category term="pt" /><summary type="html">Description Pretrained named entity recognition deep learning model for clinical terms in Portuguese. The SparkNLP deep learning model (MedicalNerModel) is inspired by a former state-of-the-art model for NER: Chiu &amp;amp; Nicols, Named Entity Recognition with Bidirectional LSTM-CNN. Predicted Entities PROBLEM, TEST, TREATMENT Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl&quot;, &quot;en&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer()\ .setInputCols([&quot;sentence&quot;])\ .setOutputCol(&quot;token&quot;) embeddings = WordEmbeddingsModel.pretrained(&quot;w2v_cc_300d&quot;,&quot;pt&quot;) \ .setInputCols([&quot;document&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner_model = MedicalNerModel.pretrained(&quot;ner_clinical&quot;, &quot;pt&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverterInternal()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;) pipeline = Pipeline(stages=[ document_assembler, sentence_detector, tokenizer, embeddings, ner_model, ner_converter ]) sample_text = &quot;&quot;&quot;A paciente apresenta sensibilidade dentária ao consumir alimentos quentes e frios. Realizou-se um exame clínico e radiográfico para avaliar possíveis cáries ou problemas na raiz do dente. Identificou-se uma cárie próxima à raiz do dente. Foi realizado um tratamento de restauração para resolver o problema.&quot;&quot;&quot; data = spark.createDataFrame([[sample_text]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl&quot;, &quot;en&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val embeddings = WordEmbeddingsModel.pretrained(&quot;w2v_cc_300d&quot;,&quot;pt&quot;) .setInputCols(Array(&quot;document&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner_model = MedicalNerModel.pretrained(&quot;ner_clinical&quot;, &quot;pt&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pipeline = new Pipeline().setStages(Array( document_assembler, sentence_detector, tokenizer, embeddings, ner_model, ner_converter ]) val sample_data = Seq(&quot;&quot;&quot;A paciente apresenta sensibilidade dentária ao consumir alimentos quentes e frios. Realizou-se um exame clínico e radiográfico para avaliar possíveis cáries ou problemas na raiz do dente. Identificou-se uma cárie próxima à raiz do dente. Foi realizado um tratamento de restauração para resolver o problema.&quot;&quot;&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(sample_data).transform(sample_data) Results +--------------------------+-----+---+---------+ |chunk |begin|end|ner_label| +--------------------------+-----+---+---------+ |sensibilidade dentária |21 |42 |PROBLEM | |alimentos |56 |64 |TREATMENT| |exame clínico |98 |110|TEST | |cáries |150 |155|PROBLEM | |problemas na raiz do dente|160 |185|PROBLEM | |uma cárie |203 |211|PROBLEM | |tratamento de restauração |255 |279|TREATMENT| |problema |297 |304|PROBLEM | +--------------------------+-----+---+---------+ Model Information Model Name: ner_clinical Compatibility: Healthcare NLP 5.0.1+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: pt Size: 2.9 MB Benchmarking label precision recall f1-score support TREATMENT 0.83 0.66 0.73 480 TEST 0.93 0.79 0.85 500 PROBLEM 0.83 0.83 0.83 1037 micro-avg 0.85 0.78 0.81 2017 macro-avg 0.86 0.76 0.81 2017 weighted-avg 0.85 0.78 0.81 2017</summary></entry></feed>