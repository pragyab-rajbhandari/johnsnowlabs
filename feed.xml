<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-08-16T11:54:53+00:00</updated><id>/feed.xml</id><title type="html">Spark NLP</title><subtitle>High Performance NLP with Apache Spark
</subtitle><author><name>{&quot;type&quot;=&gt;nil, &quot;name&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;avatar&quot;=&gt;nil, &quot;bio&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;facebook&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;weibo&quot;=&gt;nil, &quot;googleplus&quot;=&gt;nil, &quot;telegram&quot;=&gt;nil, &quot;medium&quot;=&gt;nil, &quot;zhihu&quot;=&gt;nil, &quot;douban&quot;=&gt;nil, &quot;linkedin&quot;=&gt;nil, &quot;github&quot;=&gt;nil, &quot;npm&quot;=&gt;nil}</name></author><entry><title type="html">Legal NER on Subpoenas (Small)</title><link href="/2023/08/07/legner_bert_subpoenas_sm_en.html" rel="alternate" type="text/html" title="Legal NER on Subpoenas (Small)" /><published>2023-08-07T00:00:00+00:00</published><updated>2023-08-07T00:00:00+00:00</updated><id>/2023/08/07/legner_bert_subpoenas_sm_en</id><content type="html" xml:base="/2023/08/07/legner_bert_subpoenas_sm_en.html">## Description

This is a Legal NER model aimed to extract 19 entities from subpoenas. This is called a small version because it has been trained on more generic labels. The larger versions of this model will be available on models hub.

## Predicted Entities

`COURT`, `APPOINTMENT_DATE`, `DEADLINE_DATE`, `DOCUMENT_DATE_FROM`, `ADDRESS`, `APPOINTMENT_HOUR`, `DOCUMENT_DATE_TO`, `DOCUMENT_PERSON`, `DOCUMENT_DATE_YEAR`, `STATE`, `MATTER_VS`, `CASE`, `COUNTY`, `DOCUMENT_TOPIC`, `MATTER`, `SUBPOENA_DATE`, `SIGNER`, `RECEIVER`, `DOCUMENT_TYPE`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/legal/models/legner_bert_subpoenas_sm_en_1.0.0_3.0_1691423741988.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/legal/models/legner_bert_subpoenas_sm_en_1.0.0_3.0_1691423741988.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
from pyspark.sql import functions as F

document_assembler = nlp.DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)\

sentence_detector = nlp.SentenceDetector()\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)\

tokenizer = nlp.Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

ner_model = legal.BertForTokenClassification.pretrained(&quot;legner_bert_subpoenas_sm&quot;, &quot;en&quot;, &quot;legal/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
    .setOutputCol(&quot;ner&quot;)\
    .setCaseSensitive(True)\
    .setMaxSentenceLength(512)

ner_converter = nlp.NerConverter()\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\
    .setOutputCol(&quot;ner_chunk&quot;)

pipeline =  nlp.Pipeline(stages=[
    document_assembler,
    sentence_detector,
    tokenizer,
    ner_model,
    ner_converter
])


empty_data = spark.createDataFrame([[&quot;&quot;]]).toDF(&quot;text&quot;)

model = pipeline.fit(empty_data)

text = &quot;&quot;&quot;In addition , in an earlier motion for summary disposition in which all Respondents joined , and which this Court denied in its Order of April30 , 2013 , Respondent Deloitte Touche Tohmatsu Certified Public Accountants Ltd .&quot;&quot;&quot;
data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;)

result = model.transform(data)

result.select(F.explode(F.arrays_zip('ner_chunk.result', 'ner_chunk.metadata')).alias(&quot;cols&quot;)) \
          .select(F.expr(&quot;cols['0']&quot;).alias(&quot;chunk&quot;),
                       F.expr(&quot;cols['1']['entity']&quot;).alias(&quot;label&quot;)).show(50, truncate = False)
```

&lt;/div&gt;

## Results

```bash
+------------------------+---------------+
|chunk                   |label          |
+------------------------+---------------+
|summary disposition     |DOCUMENT_TYPE  |
|Deloitte Touche Tohmatsu|DOCUMENT_PERSON|
+------------------------+---------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|legner_bert_subpoenas_sm|
|Compatibility:|Legal NLP 1.0.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[document, token]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|401.1 MB|
|Case sensitive:|true|
|Max sentence length:|128|

## References

In House annotated dataset

## Benchmarking

```bash
label                      precision    recall  f1-score   support
             B-COURT       1.00      0.60      0.75        30
  I-APPOINTMENT_DATE       0.57      0.65      0.60        20
             I-COURT       0.93      0.89      0.91       166
  B-APPOINTMENT_DATE       0.67      0.44      0.53         9
     I-DEADLINE_DATE       0.83      0.26      0.40        19
B-DOCUMENT_DATE_FROM       0.80      1.00      0.89        16
           I-ADDRESS       0.87      0.94      0.90      1046
  B-APPOINTMENT_HOUR       0.43      0.92      0.59        13
  B-DOCUMENT_DATE_TO       0.88      1.00      0.93         7
  I-APPOINTMENT_HOUR       1.00      0.15      0.26        20
   B-DOCUMENT_PERSON       0.79      0.84      0.82      2919
B-DOCUMENT_DATE_YEAR       0.00      0.00      0.00         5
             B-STATE       0.59      0.79      0.68        24
         I-MATTER_VS       0.65      0.79      0.71       150
              I-CASE       0.00      0.00      0.00        11
            I-COUNTY       0.00      0.00      0.00         0
    B-DOCUMENT_TOPIC       0.64      0.77      0.70       208
            B-COUNTY       0.00      0.00      0.00         0
            B-MATTER       0.85      0.86      0.86       328
I-DOCUMENT_DATE_FROM       0.87      1.00      0.93        48
     I-SUBPOENA_DATE       0.56      0.28      0.38        53
            I-SIGNER       0.56      0.46      0.50        59
  I-DOCUMENT_DATE_TO       0.83      1.00      0.91        25
          I-RECEIVER       0.71      0.52      0.60        98
            B-SIGNER       0.76      0.49      0.59        39
    I-DOCUMENT_TOPIC       0.83      0.80      0.81       725
             I-STATE       0.67      0.29      0.40        14
         B-MATTER_VS       0.78      0.82      0.80       136
     I-DOCUMENT_TYPE       0.83      0.87      0.85       621
     B-DEADLINE_DATE       0.00      0.00      0.00         6
            I-MATTER       0.88      0.82      0.85       479
     B-DOCUMENT_TYPE       0.87      0.90      0.88      1714
           B-ADDRESS       0.81      0.83      0.82       101
     B-SUBPOENA_DATE       0.42      0.28      0.33        18
              B-CASE       0.91      0.97      0.94       312
   I-DOCUMENT_PERSON       0.80      0.83      0.81      3672
          B-RECEIVER       0.76      0.63      0.69        46
           micro-avg       0.82      0.84      0.83     13157
           macro-avg       0.66      0.61      0.61     13157
        weighted-avg       0.82      0.84      0.83     13157
```</content><author><name>John Snow Labs</name></author><category term="en" /><category term="licensed" /><category term="tensorflow" /><summary type="html">Description This is a Legal NER model aimed to extract 19 entities from subpoenas. This is called a small version because it has been trained on more generic labels. The larger versions of this model will be available on models hub. Predicted Entities COURT, APPOINTMENT_DATE, DEADLINE_DATE, DOCUMENT_DATE_FROM, ADDRESS, APPOINTMENT_HOUR, DOCUMENT_DATE_TO, DOCUMENT_PERSON, DOCUMENT_DATE_YEAR, STATE, MATTER_VS, CASE, COUNTY, DOCUMENT_TOPIC, MATTER, SUBPOENA_DATE, SIGNER, RECEIVER, DOCUMENT_TYPE Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU from pyspark.sql import functions as F document_assembler = nlp.DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;)\ sentence_detector = nlp.SentenceDetector()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;)\ tokenizer = nlp.Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) ner_model = legal.BertForTokenClassification.pretrained(&quot;legner_bert_subpoenas_sm&quot;, &quot;en&quot;, &quot;legal/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;ner&quot;)\ .setCaseSensitive(True)\ .setMaxSentenceLength(512) ner_converter = nlp.NerConverter()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;) pipeline = nlp.Pipeline(stages=[ document_assembler, sentence_detector, tokenizer, ner_model, ner_converter ]) empty_data = spark.createDataFrame([[&quot;&quot;]]).toDF(&quot;text&quot;) model = pipeline.fit(empty_data) text = &quot;&quot;&quot;In addition , in an earlier motion for summary disposition in which all Respondents joined , and which this Court denied in its Order of April30 , 2013 , Respondent Deloitte Touche Tohmatsu Certified Public Accountants Ltd .&quot;&quot;&quot; data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;) result = model.transform(data) result.select(F.explode(F.arrays_zip('ner_chunk.result', 'ner_chunk.metadata')).alias(&quot;cols&quot;)) \ .select(F.expr(&quot;cols['0']&quot;).alias(&quot;chunk&quot;), F.expr(&quot;cols['1']['entity']&quot;).alias(&quot;label&quot;)).show(50, truncate = False) Results +------------------------+---------------+ |chunk |label | +------------------------+---------------+ |summary disposition |DOCUMENT_TYPE | |Deloitte Touche Tohmatsu|DOCUMENT_PERSON| +------------------------+---------------+ Model Information Model Name: legner_bert_subpoenas_sm Compatibility: Legal NLP 1.0.0+ License: Licensed Edition: Official Input Labels: [document, token] Output Labels: [ner] Language: en Size: 401.1 MB Case sensitive: true Max sentence length: 128 References In House annotated dataset Benchmarking label precision recall f1-score support B-COURT 1.00 0.60 0.75 30 I-APPOINTMENT_DATE 0.57 0.65 0.60 20 I-COURT 0.93 0.89 0.91 166 B-APPOINTMENT_DATE 0.67 0.44 0.53 9 I-DEADLINE_DATE 0.83 0.26 0.40 19 B-DOCUMENT_DATE_FROM 0.80 1.00 0.89 16 I-ADDRESS 0.87 0.94 0.90 1046 B-APPOINTMENT_HOUR 0.43 0.92 0.59 13 B-DOCUMENT_DATE_TO 0.88 1.00 0.93 7 I-APPOINTMENT_HOUR 1.00 0.15 0.26 20 B-DOCUMENT_PERSON 0.79 0.84 0.82 2919 B-DOCUMENT_DATE_YEAR 0.00 0.00 0.00 5 B-STATE 0.59 0.79 0.68 24 I-MATTER_VS 0.65 0.79 0.71 150 I-CASE 0.00 0.00 0.00 11 I-COUNTY 0.00 0.00 0.00 0 B-DOCUMENT_TOPIC 0.64 0.77 0.70 208 B-COUNTY 0.00 0.00 0.00 0 B-MATTER 0.85 0.86 0.86 328 I-DOCUMENT_DATE_FROM 0.87 1.00 0.93 48 I-SUBPOENA_DATE 0.56 0.28 0.38 53 I-SIGNER 0.56 0.46 0.50 59 I-DOCUMENT_DATE_TO 0.83 1.00 0.91 25 I-RECEIVER 0.71 0.52 0.60 98 B-SIGNER 0.76 0.49 0.59 39 I-DOCUMENT_TOPIC 0.83 0.80 0.81 725 I-STATE 0.67 0.29 0.40 14 B-MATTER_VS 0.78 0.82 0.80 136 I-DOCUMENT_TYPE 0.83 0.87 0.85 621 B-DEADLINE_DATE 0.00 0.00 0.00 6 I-MATTER 0.88 0.82 0.85 479 B-DOCUMENT_TYPE 0.87 0.90 0.88 1714 B-ADDRESS 0.81 0.83 0.82 101 B-SUBPOENA_DATE 0.42 0.28 0.33 18 B-CASE 0.91 0.97 0.94 312 I-DOCUMENT_PERSON 0.80 0.83 0.81 3672 B-RECEIVER 0.76 0.63 0.69 46 micro-avg 0.82 0.84 0.83 13157 macro-avg 0.66 0.61 0.61 13157 weighted-avg 0.82 0.84 0.83 13157</summary></entry><entry><title type="html">Legal Law Stack Exchange Classifier in Domain-Specific Documents</title><link href="/2023/08/04/legclf_law_stack_exchange_en.html" rel="alternate" type="text/html" title="Legal Law Stack Exchange Classifier in Domain-Specific Documents" /><published>2023-08-04T00:00:00+00:00</published><updated>2023-08-04T00:00:00+00:00</updated><id>/2023/08/04/legclf_law_stack_exchange_en</id><content type="html" xml:base="/2023/08/04/legclf_law_stack_exchange_en.html">## Description

This model is a multi-class classification model that can classify a wide variety of legal issues. The model demonstrates remarkable proficiency in predicting `business`, `constitutional-law`, `contract-law`, `copyright`, `criminal-law`, `employment`, `liability`, `privacy`, `tax-law`, and `trademark`.

## Predicted Entities

`business`, `constitutional-law`, `contract-law`, `copyright`, `criminal-law`, `employment`, `liability`, `privacy`, `tax-law`, `trademark`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/legal/models/legclf_law_stack_exchange_en_1.0.0_3.0_1691173181059.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/legal/models/legclf_law_stack_exchange_en_1.0.0_3.0_1691173181059.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
document_assembler = nlp.DocumentAssembler() \
    .setInputCol('text') \
    .setOutputCol('document')

tokenizer = nlp.Tokenizer() \
    .setInputCols(['document']) \
    .setOutputCol('token')

sequenceClassifier = legal.BertForSequenceClassification.pretrained(&quot;legclf_law_stack_exchange&quot;, &quot;en&quot;, &quot;legal/models&quot;) \
    .setInputCols([&quot;document&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;class&quot;)

pipeline = nlp.Pipeline(stages=[
    document_assembler,
    tokenizer,
    sequenceClassifier
])

# couple of simple examples
example = spark.createDataFrame([[&quot;I have been helping a nonprofit by developing a piece of software that they needed. The software is more-or-less built to their specs in a 'functional' way, but I wrote 100% of the code: they are not programmers. Anyhow, we didn't make any kind of contract at the beginning verbally or otherwise. Who owns the copyright to all of this? Do they have any rights to it at all for providing 'ideas'?&quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(example).transform(example)

# result is a DataFrame
result.select(&quot;text&quot;, &quot;class.result&quot;).show(truncate=100)
```

&lt;/div&gt;

## Results

```bash
+----------------------------------------------------------------------------------------------------+-----------+
|                                                                                                text|     result|
+----------------------------------------------------------------------------------------------------+-----------+
|I have been helping a nonprofit by developing a piece of software that they needed. The software ...|[copyright]|
+----------------------------------------------------------------------------------------------------+-----------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|legclf_law_stack_exchange|
|Compatibility:|Legal NLP 1.0.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[document, token]|
|Output Labels:|[class]|
|Language:|en|
|Size:|410.1 MB|
|Case sensitive:|true|
|Max sentence length:|512|

## References

Train dataset available [here](https://huggingface.co/datasets/jonathanli/law-stack-exchange)

## Benchmarking

```bash
label               precision  recall  f1-score  support
business            0.50       0.24    0.32      17      
constitutional-law  0.94       0.68    0.79      25      
contract-law        0.88       0.85    0.86      91      
copyright           0.91       0.97    0.94      151     
criminal-law        0.80       0.91    0.85      75      
employment          0.74       0.93    0.82      30      
liability           0.67       0.31    0.42      13      
privacy             0.77       0.82    0.79      28      
tax-law             0.93       0.78    0.85      32      
trademark           0.89       0.91    0.90      44      
accuracy            -          -       0.86      506     
macro-avg           0.80       0.74    0.75      506     
weighted-avg        0.85       0.86    0.85      506 
```</content><author><name>John Snow Labs</name></author><category term="en" /><category term="licensed" /><category term="classification" /><category term="legal" /><category term="tensorflow" /><summary type="html">Description This model is a multi-class classification model that can classify a wide variety of legal issues. The model demonstrates remarkable proficiency in predicting business, constitutional-law, contract-law, copyright, criminal-law, employment, liability, privacy, tax-law, and trademark. Predicted Entities business, constitutional-law, contract-law, copyright, criminal-law, employment, liability, privacy, tax-law, trademark Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = nlp.DocumentAssembler() \ .setInputCol('text') \ .setOutputCol('document') tokenizer = nlp.Tokenizer() \ .setInputCols(['document']) \ .setOutputCol('token') sequenceClassifier = legal.BertForSequenceClassification.pretrained(&quot;legclf_law_stack_exchange&quot;, &quot;en&quot;, &quot;legal/models&quot;) \ .setInputCols([&quot;document&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;class&quot;) pipeline = nlp.Pipeline(stages=[ document_assembler, tokenizer, sequenceClassifier ]) # couple of simple examples example = spark.createDataFrame([[&quot;I have been helping a nonprofit by developing a piece of software that they needed. The software is more-or-less built to their specs in a 'functional' way, but I wrote 100% of the code: they are not programmers. Anyhow, we didn't make any kind of contract at the beginning verbally or otherwise. Who owns the copyright to all of this? Do they have any rights to it at all for providing 'ideas'?&quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(example).transform(example) # result is a DataFrame result.select(&quot;text&quot;, &quot;class.result&quot;).show(truncate=100) Results +----------------------------------------------------------------------------------------------------+-----------+ | text| result| +----------------------------------------------------------------------------------------------------+-----------+ |I have been helping a nonprofit by developing a piece of software that they needed. The software ...|[copyright]| +----------------------------------------------------------------------------------------------------+-----------+ Model Information Model Name: legclf_law_stack_exchange Compatibility: Legal NLP 1.0.0+ License: Licensed Edition: Official Input Labels: [document, token] Output Labels: [class] Language: en Size: 410.1 MB Case sensitive: true Max sentence length: 512 References Train dataset available here Benchmarking label precision recall f1-score support business 0.50 0.24 0.32 17 constitutional-law 0.94 0.68 0.79 25 contract-law 0.88 0.85 0.86 91 copyright 0.91 0.97 0.94 151 criminal-law 0.80 0.91 0.85 75 employment 0.74 0.93 0.82 30 liability 0.67 0.31 0.42 13 privacy 0.77 0.82 0.79 28 tax-law 0.93 0.78 0.85 32 trademark 0.89 0.91 0.90 44 accuracy - - 0.86 506 macro-avg 0.80 0.74 0.75 506 weighted-avg 0.85 0.86 0.85 506</summary></entry><entry><title type="html">Sentence Entity Resolver for LOINC (sbiobert_base_cased_mli embeddings)</title><link href="/2023/08/01/sbiobertresolve_loinc_augmented_en.html" rel="alternate" type="text/html" title="Sentence Entity Resolver for LOINC (sbiobert_base_cased_mli embeddings)" /><published>2023-08-01T00:00:00+00:00</published><updated>2023-08-01T00:00:00+00:00</updated><id>/2023/08/01/sbiobertresolve_loinc_augmented_en</id><content type="html" xml:base="/2023/08/01/sbiobertresolve_loinc_augmented_en.html">## Description

This model maps extracted clinical NER entities to Logical Observation Identifiers Names and Codes(LOINC) codes using `sbiobert_base_cased_mli` Sentence Bert Embeddings. It trained on the augmented version of the dataset which is used in previous LOINC resolver models. It also provides the official resolution of the codes within the brackets.

## Predicted Entities

`loinc_code`

{:.btn-box}
[Live Demo](https://demo.johnsnowlabs.com/healthcare/ER_LOINC/){:.button.button-orange}
[Open in Colab](https://colab.research.google.com/github/JohnSnowLabs/spark-nlp-workshop/blob/master/tutorials/Certification_Trainings/Healthcare/24.Improved_Entity_Resolvers_in_SparkNLP_with_sBert.ipynb){:.button.button-orange.button-orange-trans.co.button-icon}
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/sbiobertresolve_loinc_augmented_en_5.0.0_3.0_1690896071392.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/sbiobertresolve_loinc_augmented_en_5.0.0_3.0_1690896071392.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use

`sbiobertresolve_loinc_augmented` resolver model must be used with `sbiobert_base_cased_mli` as embeddings.


&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
documentAssembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentenceDetector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\
    .setInputCols(&quot;document&quot;)\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel.pretrained('embeddings_clinical','en', 'clinical/models')\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
    .setOutputCol(&quot;embeddings&quot;)

ner = MedicalNerModel.pretrained(&quot;ner_radiology&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverter() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \
    .setOutputCol(&quot;ner_chunk&quot;)\
    .setWhiteList(['Test'])

chunk2doc = Chunk2Doc().setInputCols(&quot;ner_chunk&quot;).setOutputCol(&quot;ner_chunk_doc&quot;)

sbert_embedder = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\
    .setInputCols([&quot;ner_chunk_doc&quot;])\
    .setOutputCol(&quot;sbert_embeddings&quot;)\
    .setCaseSensitive(False)


resolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_loinc_augmented&quot;,&quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sbert_embeddings&quot;]) \
    .setOutputCol(&quot;loinc_code&quot;)\
    .setDistanceFunction(&quot;EUCLIDEAN&quot;)

pipeline_loinc = Pipeline(stages = [documentAssembler, sentenceDetector, tokenizer, word_embeddings, ner, ner_converter, chunk2doc, sbert_embedder, resolver])

data = spark.createDataFrame([[&quot;&quot;&quot;The patient is a 22-year-old female with a history of obesity. She has a Body mass index (BMI) of 33.5 kg/m2, aspartate aminotransferase 64, and alanine aminotransferase 126.&quot;&quot;&quot;]]).toDF(&quot;text&quot;)

results = pipeline_loinc.fit(data).transform(data)
```
```scala
val documentAssembler = DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)

val sentenceDetector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)

val tokenizer = Tokenizer() 
    .setInputCols(Array(&quot;document&quot;))
    .setOutputCol(&quot;token&quot;)

val word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;,&quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)

val ner = MedicalNerModel.pretrained(&quot;ner_radiology&quot;, &quot;en&quot;, &quot;clinical/models&quot;) 
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) 
    .setOutputCol(&quot;ner&quot;)

val ner_converter = NerConverter() 
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) 
    .setOutputCol(&quot;ner_chunk&quot;)
    .setWhiteList(Array(&quot;Test&quot;))

val chunk2doc = Chunk2Doc() 
    .setInputCols(&quot;ner_chunk&quot;) 
    .setOutputCol(&quot;ner_chunk_doc&quot;)

val sbert_embedder = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;, &quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(Array(&quot;ner_chunk_doc&quot;))
    .setOutputCol(&quot;sbert_embeddings&quot;)\
    .setCaseSensitive(False)

val resolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_loinc_augmented&quot;, &quot;en&quot;, &quot;clinical/models&quot;) 
    .setInputCols(Array(&quot;ner_chunk&quot;, &quot;sbert_embeddings&quot;)) 
    .setOutputCol(&quot;loinc_code&quot;)
    .setDistanceFunction(&quot;EUCLIDEAN&quot;)

val pipeline_loinc = new Pipeline().setStages(Array(documentAssembler, sentenceDetector, tokenizer, word_embeddings, ner, ner_converter, chunk2doc, sbert_embedder, resolver))

val data = Seq(&quot;The patient is a 22-year-old female with a history of obesity. She has a Body mass index (BMI) of 33.5 kg/m2, aspartate aminotransferase 64, and alanine aminotransferase 126.&quot;).toDF(&quot;text&quot;)

val result = pipeline_loinc.fit(data).transform(data)
```

{:.nlu-block}
```python
import nlu
nlu.load(&quot;en.resolve.loinc.augmented&quot;).predict(&quot;&quot;&quot;The patient is a 22-year-old female with a history of obesity. She has a Body mass index (BMI) of 33.5 kg/m2, aspartate aminotransferase 64, and alanine aminotransferase 126.&quot;&quot;&quot;)
```
&lt;/div&gt;

## Results

```bash
+-------+--------------------------+------+----------+----------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------+
|sent_id|                 ner_chunk|entity|loinc_code|                                                                                           all_codes|                                                                                         resolutions|
+-------+--------------------------+------+----------+----------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------+
|      1|                       BMI|  Test|   39156-5|39156-5:::LP241982-0:::89270-3:::100847-3:::8277-6:::LP65821-8:::LP65822-6:::LP253556-7:::LA21328...|BMI [Body mass index]:::BFI [BFI]:::BMI Est [Body mass index]:::BldA [Gas &amp; ammonia panel]:::BSA ...|
|      1|aspartate aminotransferase|  Test|   14409-7|14409-7:::1916-6:::16324-6:::16325-3:::43822-6:::3082-5:::2325-9:::100739-2:::59245-1:::27344-1::...|Aspartate aminotransferase [Aspartate aminotransferase]:::Aspartate aminotransferase/Alanine amin...|
|      1|  alanine aminotransferase|  Test|   16324-6|16324-6:::16325-3:::1916-6:::14409-7:::59245-1:::100738-4:::25302-1:::1740-0:::43822-6:::76625-3:...|Alanine aminotransferase [Alanine aminotransferase]:::Alanine aminotransferase/Aspartate aminotra...|
+-------+--------------------------+------+----------+----------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|sbiobertresolve_loinc_augmented|
|Compatibility:|Healthcare NLP 5.0.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence_embeddings]|
|Output Labels:|[loinc_code]|
|Language:|en|
|Size:|912.5 MB|
|Case sensitive:|false|

## References

Trained on standard LOINC coding system.</content><author><name>John Snow Labs</name></author><category term="loinc" /><category term="entity_resolution" /><category term="clinical" /><category term="en" /><category term="licensed" /><summary type="html">Description This model maps extracted clinical NER entities to Logical Observation Identifiers Names and Codes(LOINC) codes using sbiobert_base_cased_mli Sentence Bert Embeddings. It trained on the augmented version of the dataset which is used in previous LOINC resolver models. It also provides the official resolution of the codes within the brackets. Predicted Entities loinc_code Live Demo Open in Colab Download Copy S3 URI How to use sbiobertresolve_loinc_augmented resolver model must be used with sbiobert_base_cased_mli as embeddings. PythonScalaNLU documentAssembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentenceDetector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\ .setInputCols(&quot;document&quot;)\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel.pretrained('embeddings_clinical','en', 'clinical/models')\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_radiology&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverter() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;)\ .setWhiteList(['Test']) chunk2doc = Chunk2Doc().setInputCols(&quot;ner_chunk&quot;).setOutputCol(&quot;ner_chunk_doc&quot;) sbert_embedder = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\ .setInputCols([&quot;ner_chunk_doc&quot;])\ .setOutputCol(&quot;sbert_embeddings&quot;)\ .setCaseSensitive(False) resolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_loinc_augmented&quot;,&quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sbert_embeddings&quot;]) \ .setOutputCol(&quot;loinc_code&quot;)\ .setDistanceFunction(&quot;EUCLIDEAN&quot;) pipeline_loinc = Pipeline(stages = [documentAssembler, sentenceDetector, tokenizer, word_embeddings, ner, ner_converter, chunk2doc, sbert_embedder, resolver]) data = spark.createDataFrame([[&quot;&quot;&quot;The patient is a 22-year-old female with a history of obesity. She has a Body mass index (BMI) of 33.5 kg/m2, aspartate aminotransferase 64, and alanine aminotransferase 126.&quot;&quot;&quot;]]).toDF(&quot;text&quot;) results = pipeline_loinc.fit(data).transform(data) val documentAssembler = DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentenceDetector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = Tokenizer() .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;,&quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_radiology&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = NerConverter() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) .setWhiteList(Array(&quot;Test&quot;)) val chunk2doc = Chunk2Doc() .setInputCols(&quot;ner_chunk&quot;) .setOutputCol(&quot;ner_chunk_doc&quot;) val sbert_embedder = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;, &quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(Array(&quot;ner_chunk_doc&quot;)) .setOutputCol(&quot;sbert_embeddings&quot;)\ .setCaseSensitive(False) val resolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_loinc_augmented&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;ner_chunk&quot;, &quot;sbert_embeddings&quot;)) .setOutputCol(&quot;loinc_code&quot;) .setDistanceFunction(&quot;EUCLIDEAN&quot;) val pipeline_loinc = new Pipeline().setStages(Array(documentAssembler, sentenceDetector, tokenizer, word_embeddings, ner, ner_converter, chunk2doc, sbert_embedder, resolver)) val data = Seq(&quot;The patient is a 22-year-old female with a history of obesity. She has a Body mass index (BMI) of 33.5 kg/m2, aspartate aminotransferase 64, and alanine aminotransferase 126.&quot;).toDF(&quot;text&quot;) val result = pipeline_loinc.fit(data).transform(data) import nlu nlu.load(&quot;en.resolve.loinc.augmented&quot;).predict(&quot;&quot;&quot;The patient is a 22-year-old female with a history of obesity. She has a Body mass index (BMI) of 33.5 kg/m2, aspartate aminotransferase 64, and alanine aminotransferase 126.&quot;&quot;&quot;) Results +-------+--------------------------+------+----------+----------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------+ |sent_id| ner_chunk|entity|loinc_code| all_codes| resolutions| +-------+--------------------------+------+----------+----------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------+ | 1| BMI| Test| 39156-5|39156-5:::LP241982-0:::89270-3:::100847-3:::8277-6:::LP65821-8:::LP65822-6:::LP253556-7:::LA21328...|BMI [Body mass index]:::BFI [BFI]:::BMI Est [Body mass index]:::BldA [Gas &amp;amp; ammonia panel]:::BSA ...| | 1|aspartate aminotransferase| Test| 14409-7|14409-7:::1916-6:::16324-6:::16325-3:::43822-6:::3082-5:::2325-9:::100739-2:::59245-1:::27344-1::...|Aspartate aminotransferase [Aspartate aminotransferase]:::Aspartate aminotransferase/Alanine amin...| | 1| alanine aminotransferase| Test| 16324-6|16324-6:::16325-3:::1916-6:::14409-7:::59245-1:::100738-4:::25302-1:::1740-0:::43822-6:::76625-3:...|Alanine aminotransferase [Alanine aminotransferase]:::Alanine aminotransferase/Aspartate aminotra...| +-------+--------------------------+------+----------+----------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------+ Model Information Model Name: sbiobertresolve_loinc_augmented Compatibility: Healthcare NLP 5.0.0+ License: Licensed Edition: Official Input Labels: [sentence_embeddings] Output Labels: [loinc_code] Language: en Size: 912.5 MB Case sensitive: false References Trained on standard LOINC coding system.</summary></entry><entry><title type="html">Sentence Entity Resolver for LOINC</title><link href="/2023/08/01/sbiobertresolve_loinc_numeric_en.html" rel="alternate" type="text/html" title="Sentence Entity Resolver for LOINC" /><published>2023-08-01T00:00:00+00:00</published><updated>2023-08-01T00:00:00+00:00</updated><id>/2023/08/01/sbiobertresolve_loinc_numeric_en</id><content type="html" xml:base="/2023/08/01/sbiobertresolve_loinc_numeric_en.html">## Description

This model maps extracted clinical NER entities to Logical Observation Identifiers Names and Codes(LOINC) codes using `sbiobert_base_cased_mli` Sentence Bert Embeddings. It is trained with the numeric LOINC codes, without the inclusion of LOINC &quot;Document Ontology&quot; codes starting with the letter &quot;L&quot;. It also provides the official resolution of the codes within the brackets.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/sbiobertresolve_loinc_numeric_en_5.0.0_3.0_1690914815831.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/sbiobertresolve_loinc_numeric_en_5.0.0_3.0_1690914815831.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python

documentAssembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentenceDetector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\
    .setInputCols(&quot;document&quot;)\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer()\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel.pretrained('embeddings_clinical','en', 'clinical/models')\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
    .setOutputCol(&quot;embeddings&quot;)

ner = MedicalNerModel.pretrained(&quot;ner_radiology&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverterInternal()\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\
    .setOutputCol(&quot;ner_chunk&quot;)
    .setWhiteList(['Test'])

chunk2doc = Chunk2Doc()\
    .setInputCols(&quot;ner_chunk&quot;)\
    .setOutputCol(&quot;ner_chunk_doc&quot;)

sbert_embedder = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\
    .setInputCols([&quot;ner_chunk_doc&quot;])\
    .setOutputCol(&quot;sbert_embeddings&quot;)\
    .setCaseSensitive(False)

resolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_loinc_numeric&quot;,&quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sbert_embeddings&quot;])\
    .setOutputCol(&quot;loinc_code&quot;)\
    .setDistanceFunction(&quot;EUCLIDEAN&quot;)

pipeline_loinc = Pipeline(
    stages = [
        documentAssembler,
        sentenceDetector,
        tokenizer,
        word_embeddings,
        ner,
        ner_converter,
        chunk2doc,
        sbert_embedder,
        resolver
    ])

data = spark.createDataFrame([[&quot;&quot;&quot;The patient is a 22-year-old female with a history of obesity. She has a Body mass index (BMI) of 33.5 kg/m2, aspartate aminotransferase 64, and alanine aminotransferase 126.&quot;&quot;&quot;]]).toDF(&quot;text&quot;)

results = pipeline_loinc.fit(data).transform(data)

```
```scala

val documentAssembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
    
val sentenceDetector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)
    
val tokenizer = new Tokenizer() 
    .setInputCols(Array(&quot;document&quot;))
    .setOutputCol(&quot;token&quot;)
    
val word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;,&quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)
    
val ner = MedicalNerModel.pretrained(&quot;ner_radiology&quot;, &quot;en&quot;, &quot;clinical/models&quot;) 
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) 
    .setOutputCol(&quot;ner&quot;)
    
val ner_converter = new NerConverterInternal() 
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) 
    .setOutputCol(&quot;ner_chunk&quot;)
    .setWhiteList(Array(&quot;Test&quot;))
    
val chunk2doc = new Chunk2Doc() 
    .setInputCols(&quot;ner_chunk&quot;) 
    .setOutputCol(&quot;ner_chunk_doc&quot;)
    
val sbert_embedder = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;, &quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(Array(&quot;ner_chunk_doc&quot;))
    .setOutputCol(&quot;sbert_embeddings&quot;)
    .setCaseSensitive(False)
    
val resolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_loinc_numeric&quot;, &quot;en&quot;, &quot;clinical/models&quot;) 
    .setInputCols(Array(&quot;ner_chunk&quot;, &quot;sbert_embeddings&quot;)) 
    .setOutputCol(&quot;loinc_code&quot;)
    .setDistanceFunction(&quot;EUCLIDEAN&quot;)
    
val pipeline_loinc = new Pipeline().setStages(Array(documentAssembler, 
                                                    sentenceDetector,
                                                    tokenizer,
                                                    word_embeddings,
                                                    ner,
                                                    ner_converter,
                                                    chunk2doc,
                                                    sbert_embedder,
                                                    resolver))
                                                    
val data = Seq(&quot;&quot;&quot;The patient is a 22-year-old female with a history of obesity. She has a Body mass index (BMI) of 33.5 kg/m2, aspartate aminotransferase 64, and alanine aminotransferase 126.&quot;&quot;&quot;&quot;).toDF(&quot;text&quot;)

val result = pipeline_loinc.fit(data).transform(data)

```
&lt;/div&gt;

## Results

```bash

+-------+--------------------------+------+----------+----------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------+
|sent_id|                 ner_chunk|entity|loinc_code|                                                                                           all_codes|                                                                                         resolutions|
+-------+--------------------------+------+----------+----------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------+
|      1|                       BMI|  Test|   39156-5|39156-5:::89270-3:::100847-3:::8277-6:::3140-1:::914-2:::37219-3:::11895-0:::30201-8:::3139-3:::2...|BMI [Body mass index]:::BMI Est [Body mass index]:::BldA [Gas &amp; ammonia panel]:::BSA [Body surfac...|
|      1|aspartate aminotransferase|  Test|   14409-7|14409-7:::1916-6:::16324-6:::16325-3:::43822-6:::1919-0:::3082-5:::2325-9:::100739-2:::1918-2:::5...|Aspartate aminotransferase [Aspartate aminotransferase]:::Aspartate aminotransferase/Alanine amin...|
|      1|  alanine aminotransferase|  Test|   16324-6|16324-6:::16325-3:::1916-6:::14409-7:::59245-1:::25302-1:::100738-4:::1740-0:::1742-6:::43822-6::...|Alanine aminotransferase [Alanine aminotransferase]:::Alanine aminotransferase/Aspartate aminotra...|
+-------+--------------------------+------+----------+----------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------+

```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|sbiobertresolve_loinc_numeric|
|Compatibility:|Healthcare NLP 5.0.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence_embeddings]|
|Output Labels:|[loinc_code]|
|Language:|en|
|Size:|748.0 MB|
|Case sensitive:|false|</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="en" /><category term="clinical" /><category term="loinc" /><category term="entity_resolution" /><summary type="html">Description This model maps extracted clinical NER entities to Logical Observation Identifiers Names and Codes(LOINC) codes using sbiobert_base_cased_mli Sentence Bert Embeddings. It is trained with the numeric LOINC codes, without the inclusion of LOINC “Document Ontology” codes starting with the letter “L”. It also provides the official resolution of the codes within the brackets. Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU documentAssembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentenceDetector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\ .setInputCols(&quot;document&quot;)\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel.pretrained('embeddings_clinical','en', 'clinical/models')\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_radiology&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverterInternal()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;) .setWhiteList(['Test']) chunk2doc = Chunk2Doc()\ .setInputCols(&quot;ner_chunk&quot;)\ .setOutputCol(&quot;ner_chunk_doc&quot;) sbert_embedder = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\ .setInputCols([&quot;ner_chunk_doc&quot;])\ .setOutputCol(&quot;sbert_embeddings&quot;)\ .setCaseSensitive(False) resolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_loinc_numeric&quot;,&quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sbert_embeddings&quot;])\ .setOutputCol(&quot;loinc_code&quot;)\ .setDistanceFunction(&quot;EUCLIDEAN&quot;) pipeline_loinc = Pipeline( stages = [ documentAssembler, sentenceDetector, tokenizer, word_embeddings, ner, ner_converter, chunk2doc, sbert_embedder, resolver ]) data = spark.createDataFrame([[&quot;&quot;&quot;The patient is a 22-year-old female with a history of obesity. She has a Body mass index (BMI) of 33.5 kg/m2, aspartate aminotransferase 64, and alanine aminotransferase 126.&quot;&quot;&quot;]]).toDF(&quot;text&quot;) results = pipeline_loinc.fit(data).transform(data) val documentAssembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentenceDetector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;,&quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_radiology&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) .setWhiteList(Array(&quot;Test&quot;)) val chunk2doc = new Chunk2Doc() .setInputCols(&quot;ner_chunk&quot;) .setOutputCol(&quot;ner_chunk_doc&quot;) val sbert_embedder = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;, &quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(Array(&quot;ner_chunk_doc&quot;)) .setOutputCol(&quot;sbert_embeddings&quot;) .setCaseSensitive(False) val resolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_loinc_numeric&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;ner_chunk&quot;, &quot;sbert_embeddings&quot;)) .setOutputCol(&quot;loinc_code&quot;) .setDistanceFunction(&quot;EUCLIDEAN&quot;) val pipeline_loinc = new Pipeline().setStages(Array(documentAssembler, sentenceDetector, tokenizer, word_embeddings, ner, ner_converter, chunk2doc, sbert_embedder, resolver)) val data = Seq(&quot;&quot;&quot;The patient is a 22-year-old female with a history of obesity. She has a Body mass index (BMI) of 33.5 kg/m2, aspartate aminotransferase 64, and alanine aminotransferase 126.&quot;&quot;&quot;&quot;).toDF(&quot;text&quot;) val result = pipeline_loinc.fit(data).transform(data) Results +-------+--------------------------+------+----------+----------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------+ |sent_id| ner_chunk|entity|loinc_code| all_codes| resolutions| +-------+--------------------------+------+----------+----------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------+ | 1| BMI| Test| 39156-5|39156-5:::89270-3:::100847-3:::8277-6:::3140-1:::914-2:::37219-3:::11895-0:::30201-8:::3139-3:::2...|BMI [Body mass index]:::BMI Est [Body mass index]:::BldA [Gas &amp;amp; ammonia panel]:::BSA [Body surfac...| | 1|aspartate aminotransferase| Test| 14409-7|14409-7:::1916-6:::16324-6:::16325-3:::43822-6:::1919-0:::3082-5:::2325-9:::100739-2:::1918-2:::5...|Aspartate aminotransferase [Aspartate aminotransferase]:::Aspartate aminotransferase/Alanine amin...| | 1| alanine aminotransferase| Test| 16324-6|16324-6:::16325-3:::1916-6:::14409-7:::59245-1:::25302-1:::100738-4:::1740-0:::1742-6:::43822-6::...|Alanine aminotransferase [Alanine aminotransferase]:::Alanine aminotransferase/Aspartate aminotra...| +-------+--------------------------+------+----------+----------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------+ Model Information Model Name: sbiobertresolve_loinc_numeric Compatibility: Healthcare NLP 5.0.0+ License: Licensed Edition: Official Input Labels: [sentence_embeddings] Output Labels: [loinc_code] Language: en Size: 748.0 MB Case sensitive: false</summary></entry><entry><title type="html">Detect Adverse Drug Events (langtest)</title><link href="/2023/07/31/ner_ade_clinical_langtest_en.html" rel="alternate" type="text/html" title="Detect Adverse Drug Events (langtest)" /><published>2023-07-31T00:00:00+00:00</published><updated>2023-07-31T00:00:00+00:00</updated><id>/2023/07/31/ner_ade_clinical_langtest_en</id><content type="html" xml:base="/2023/07/31/ner_ade_clinical_langtest_en.html">## Description

Detect adverse reactions of drugs in reviews, tweets, and medical text using pretrained NER model. This model is augmented version of [ner_ade_clinical](https://nlp.johnsnowlabs.com/2021/04/01/ner_ade_clinical_en.html)

## Predicted Entities

`DRUG`, `ADE`

{:.btn-box}
[Live Demo](https://demo.johnsnowlabs.com/healthcare/ADE/){:.button.button-orange}
[Open in Colab](https://colab.research.google.com/github/JohnSnowLabs/spark-nlp-workshop/blob/master/tutorials/Certification_Trainings/Healthcare/16.Adverse_Drug_Event_ADE_NER_and_Classifier.ipynb){:.button.button-orange.button-orange-trans.co.button-icon}
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_ade_clinical_langtest_en_5.0.0_3.0_1690825306693.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_ade_clinical_langtest_en_5.0.0_3.0_1690825306693.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)
         
sentence_detector = SentenceDetector()\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer()\
    .setInputCols([&quot;sentence&quot;])\
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
    .setOutputCol(&quot;embeddings&quot;)

clinical_ner = MedicalNerModel.pretrained(&quot;ner_ade_clinical_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverterInternal()\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\
    .setOutputCol(&quot;ner_chunk&quot;)
    
nlp_pipeline = Pipeline(
    stages=[
        document_assembler, 
        sentence_detector, 
        tokenizer, 
        word_embeddings, 
        clinical_ner, 
        ner_converter
    ])

text =&quot;&quot;&quot;I asked my doctor what could have caused this, and he said it was probably from the Lipitor. Recently I experienced extreme stomach pain that stretched to my side and back. The stomach pain came suddenly and it would come and go for a week before it became so bad I could not sleep. I had just gotten over a urinary tract infection (one of the side-effects) and I thought it had returned, but the symptoms were different. I still had the urge to urinate constantly, but it would come and go, and I would have no symptoms for a day, then it would return again. I remembered reading the pamphlet that comes with the prescription drugs, and it mentioning some of the symptoms that I was experiencing. I stopped taking the Lipitor for a day, and I did not have any more stomach pain or urgency. I also had been experiencing lack of energy for quite some time, and I attributed this to stress, but after reading this website, I feel it was due to the Lipitor also. I don't think I will take this drug anymore, and since I read that taking vitamin C can help you with your cholesterol, I think I will try this method instead. I think there should be a better alternative to lowering cholesterol than such a potent drug that can cause so many side effects. I don't want to be a case-study when they finally take this drug off the market.&quot;&quot;&quot;

data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;)

result = nlp_pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
         
val sentence_detector = new SentenceDetector()
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)

val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)

val embeddings_clinical = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)

val ner = MedicalNerModel.pretrained(&quot;ner_ade_clinical_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)

val ner_converter = new NerConverterInternal()
 	.setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
 	.setOutputCol(&quot;ner_chunk&quot;)

val pipeline = new Pipeline().setStages(Array(document_assembler, 
                                              sentence_detector, 
                                              tokenizer, 
                                              embeddings_clinical, 
                                              ner, 
                                              ner_converter))


text =&quot;&quot;&quot;I asked my doctor what could have caused this, and he said it was probably from the Lipitor. Recently I experienced extreme stomach pain that stretched to my side and back. The stomach pain came suddenly and it would come and go for a week before it became so bad I could not sleep. I had just gotten over a urinary tract infection (one of the side-effects) and I thought it had returned, but the symptoms were different. I still had the urge to urinate constantly, but it would come and go, and I would have no symptoms for a day, then it would return again. I remembered reading the pamphlet that comes with the prescription drugs, and it mentioning some of the symptoms that I was experiencing. I stopped taking the Lipitor for a day, and I did not have any more stomach pain or urgency. I also had been experiencing lack of energy for quite some time, and I attributed this to stress, but after reading this website, I feel it was due to the Lipitor also. I don't think I will take this drug anymore, and since I read that taking vitamin C can help you with your cholesterol, I think I will try this method instead. I think there should be a better alternative to lowering cholesterol than such a potent drug that can cause so many side effects. I don't want to be a case-study when they finally take this drug off the market.&quot;&quot;&quot;

val data = Seq(text).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+--------------------------+-----+----+---------+
|chunk                     |begin|end |ner_label|
+--------------------------+-----+----+---------+
|the Lipitor               |80   |90  |DRUG     |
|stomach pain              |124  |135 |ADE      |
|back                      |167  |170 |ADE      |
|stomach pain              |177  |188 |ADE      |
|urinary tract infection   |308  |330 |ADE      |
|urge to urinate constantly|438  |463 |ADE      |
|the prescription drugs    |610  |631 |DRUG     |
|the Lipitor               |715  |725 |DRUG     |
|lack of energy            |820  |833 |ADE      |
|Lipitor                   |946  |952 |DRUG     |
|vitamin C                 |1034 |1042|DRUG     |
|I don't                   |1250 |1256|DRUG     |
+--------------------------+-----+----+---------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_ade_clinical_langtest|
|Compatibility:|Healthcare NLP 5.0.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|2.8 MB|

## References

Trained by in-house dataset.

## Benchmarking

```bash
 label      tp      fp      fn   total  precision  recall      f1  
    DRUG  8482.0  1068.0  1113.0  9595.0     0.8882   0.884  0.8861  
     ADE  1881.0   769.0   811.0  2692.0     0.7098  0.6987  0.7042  
   macro      -       -       -       -       -       -      0.7951
   micro      -       -       -       -       -       -      0.8462
```</content><author><name>John Snow Labs</name></author><category term="ner" /><category term="clinical" /><category term="licensed" /><category term="en" /><category term="langtest" /><summary type="html">Description Detect adverse reactions of drugs in reviews, tweets, and medical text using pretrained NER model. This model is augmented version of ner_ade_clinical Predicted Entities DRUG, ADE Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetector()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer()\ .setInputCols([&quot;sentence&quot;])\ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) clinical_ner = MedicalNerModel.pretrained(&quot;ner_ade_clinical_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverterInternal()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;) nlp_pipeline = Pipeline( stages=[ document_assembler, sentence_detector, tokenizer, word_embeddings, clinical_ner, ner_converter ]) text =&quot;&quot;&quot;I asked my doctor what could have caused this, and he said it was probably from the Lipitor. Recently I experienced extreme stomach pain that stretched to my side and back. The stomach pain came suddenly and it would come and go for a week before it became so bad I could not sleep. I had just gotten over a urinary tract infection (one of the side-effects) and I thought it had returned, but the symptoms were different. I still had the urge to urinate constantly, but it would come and go, and I would have no symptoms for a day, then it would return again. I remembered reading the pamphlet that comes with the prescription drugs, and it mentioning some of the symptoms that I was experiencing. I stopped taking the Lipitor for a day, and I did not have any more stomach pain or urgency. I also had been experiencing lack of energy for quite some time, and I attributed this to stress, but after reading this website, I feel it was due to the Lipitor also. I don't think I will take this drug anymore, and since I read that taking vitamin C can help you with your cholesterol, I think I will try this method instead. I think there should be a better alternative to lowering cholesterol than such a potent drug that can cause so many side effects. I don't want to be a case-study when they finally take this drug off the market.&quot;&quot;&quot; data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;) result = nlp_pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = new SentenceDetector() .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val embeddings_clinical = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_ade_clinical_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, embeddings_clinical, ner, ner_converter)) text =&quot;&quot;&quot;I asked my doctor what could have caused this, and he said it was probably from the Lipitor. Recently I experienced extreme stomach pain that stretched to my side and back. The stomach pain came suddenly and it would come and go for a week before it became so bad I could not sleep. I had just gotten over a urinary tract infection (one of the side-effects) and I thought it had returned, but the symptoms were different. I still had the urge to urinate constantly, but it would come and go, and I would have no symptoms for a day, then it would return again. I remembered reading the pamphlet that comes with the prescription drugs, and it mentioning some of the symptoms that I was experiencing. I stopped taking the Lipitor for a day, and I did not have any more stomach pain or urgency. I also had been experiencing lack of energy for quite some time, and I attributed this to stress, but after reading this website, I feel it was due to the Lipitor also. I don't think I will take this drug anymore, and since I read that taking vitamin C can help you with your cholesterol, I think I will try this method instead. I think there should be a better alternative to lowering cholesterol than such a potent drug that can cause so many side effects. I don't want to be a case-study when they finally take this drug off the market.&quot;&quot;&quot; val data = Seq(text).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +--------------------------+-----+----+---------+ |chunk |begin|end |ner_label| +--------------------------+-----+----+---------+ |the Lipitor |80 |90 |DRUG | |stomach pain |124 |135 |ADE | |back |167 |170 |ADE | |stomach pain |177 |188 |ADE | |urinary tract infection |308 |330 |ADE | |urge to urinate constantly|438 |463 |ADE | |the prescription drugs |610 |631 |DRUG | |the Lipitor |715 |725 |DRUG | |lack of energy |820 |833 |ADE | |Lipitor |946 |952 |DRUG | |vitamin C |1034 |1042|DRUG | |I don't |1250 |1256|DRUG | +--------------------------+-----+----+---------+ Model Information Model Name: ner_ade_clinical_langtest Compatibility: Healthcare NLP 5.0.0+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 2.8 MB References Trained by in-house dataset. Benchmarking label tp fp fn total precision recall f1 DRUG 8482.0 1068.0 1113.0 9595.0 0.8882 0.884 0.8861 ADE 1881.0 769.0 811.0 2692.0 0.7098 0.6987 0.7042 macro - - - - - - 0.7951 micro - - - - - - 0.8462</summary></entry><entry><title type="html">Detect Clinical Entities (langtest)</title><link href="/2023/07/31/ner_jsl_langtest_en.html" rel="alternate" type="text/html" title="Detect Clinical Entities (langtest)" /><published>2023-07-31T00:00:00+00:00</published><updated>2023-07-31T00:00:00+00:00</updated><id>/2023/07/31/ner_jsl_langtest_en</id><content type="html" xml:base="/2023/07/31/ner_jsl_langtest_en.html">## Description

Pretrained named entity recognition deep learning model for clinical terminology. This NER model is trained with the embeddings_clinical word embeddings model, so be sure to use the same embeddings in the pipeline.. This model is augmented of [`ner_jsl`](https://nlp.johnsnowlabs.com/2022/10/19/ner_jsl_en.html).

## Predicted Entities

`Injury_or_Poisoning`, `Direction`, `Test`, `Admission_Discharge`, `Death_Entity`, `Relationship_Status`, `Duration`, `Respiration`, `Hyperlipidemia`, `Birth_Entity`, `Age`, `Labour_Delivery`, `Family_History_Header`, `BMI`, `Temperature`, `Alcohol`, `Kidney_Disease`, `Oncological`, `Medical_History_Header`, `Cerebrovascular_Disease`, `Oxygen_Therapy`, `O2_Saturation`, `Psychological_Condition`, `Heart_Disease`, `Employment`, `Obesity`, `Disease_Syndrome_Disorder`, `Pregnancy`, `ImagingFindings`, `Procedure`, `Medical_Device`, `Race_Ethnicity`, `Section_Header`, `Symptom`, `Treatment`, `Substance`, `Route`, `Drug_Ingredient`, `Blood_Pressure`, `Diet`, `External_body_part_or_region`, `LDL`, `VS_Finding`, `Allergen`, `EKG_Findings`, `Imaging_Technique`, `Triglycerides`, `RelativeTime`, `Gender`, `Pulse`, `Social_History_Header`, `Substance_Quantity`, `Diabetes`, `Modifier`, `Internal_organ_or_component`, `Clinical_Dept`, `Form`, `Drug_BrandName`, `Strength`, `Fetus_NewBorn`, `RelativeDate`, `Height`, `Test_Result`, `Sexually_Active_or_Sexual_Orientation`, `Frequency`, `Time`, `Weight`, `Vaccine`, `Vaccine_Name`, `Vital_Signs_Header`, `Communicable_Disease`, `Dosage`, `Overweight`, `Hypertension`, `HDL`, `Total_Cholesterol`, `Smoking`, `Date`

{:.btn-box}
[Live Demo](https://demo.johnsnowlabs.com/healthcare/NER_JSL/){:.button.button-orange}
[Open in Colab](https://colab.research.google.com/github/JohnSnowLabs/spark-nlp-workshop/blob/master/tutorials/Certification_Trainings/Healthcare/1.Clinical_Named_Entity_Recognition_Model.ipynb){:.button.button-orange.button-orange-trans.co.button-icon}
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_jsl_langtest_en_5.0.0_3.0_1690799624953.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_jsl_langtest_en_5.0.0_3.0_1690799624953.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}

  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetector()\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer()\
    .setInputCols([&quot;sentence&quot;])\
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
    .setOutputCol(&quot;embeddings&quot;)

clinical_ner = MedicalNerModel.pretrained(&quot;ner_jsl_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;,&quot;token&quot;,&quot;embeddings&quot;])\
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverterInternal()\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\
    .setOutputCol(&quot;ner_chunk&quot;)

nlp_pipeline = Pipeline(
    stages=[
        document_assembler, 
        sentence_detector, 
        tokenizer, 
        word_embeddings, 
        clinical_ner, 
        ner_converter
    ])

text =&quot;&quot;&quot;The patient is a 21-day-old Caucasian male here for 2 days of congestion - mom has been suctioning yellow discharge from the patient's nares, plus she has noticed some mild problems with his breathing while feeding (but negative for any perioral cyanosis or retractions). Additionally, there is no side effect observed after Influenza vaccine. One day ago, mom also noticed a tactile temperature and gave the patient Tylenol. Baby also has had some decreased p.o. intake. His normal breast-feeding is down from 20 minutes q.2h. to 5 to 10 minutes secondary to his respiratory congestion. He sleeps well, but has been more tired and has been fussy over the past 2 days. The parents noticed no improvement with albuterol treatments given in the ER. His urine output has also decreased; normally he has 8 to 10 wet and 5 dirty diapers per 24 hours, now he has down to 4 wet diapers per 24 hours. Mom denies any diarrhea. His bowel movements are yellow colored and soft in nature.&quot;&quot;&quot;

data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;)

result = nlp_pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)

val sentence_detector = new SentenceDetector()
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;) 

val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)   

val word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical_large&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))\
    .setOutputCol(&quot;embeddings&quot;)

val jsl_ner_model = MedicalNerModel.pretrained(&quot;ner_jsl_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;posology_ner&quot;)

val jsl_ner_converter = new NerConverterInternal()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;posology_ner_chunk&quot;)

val jsl_pipeline = new PipelineModel().setStages(Array(document_assembler,
                                                       sentence_detector,
                                                       tokenizer,
                                                       word_embeddings,
                                                       jsl_ner_model,
                                                       jsl_ner_converter))
 
text = &quot;&quot;&quot;The patient is a 21-day-old Caucasian male here for 2 days of congestion - mom has been suctioning yellow discharge from the patient's nares, plus she has noticed some mild problems with his breathing while feeding (but negative for any perioral cyanosis or retractions). Additionally, there is no side effect observed after Influenza vaccine. One day ago, mom also noticed a tactile temperature and gave the patient Tylenol. Baby also has had some decreased p.o. intake. His normal breast-feeding is down from 20 minutes q.2h. to 5 to 10 minutes secondary to his respiratory congestion. He sleeps well, but has been more tired and has been fussy over the past 2 days. The parents noticed no improvement with albuterol treatments given in the ER. His urine output has also decreased; normally he has 8 to 10 wet and 5 dirty diapers per 24 hours, now he has down to 4 wet diapers per 24 hours. Mom denies any diarrhea. His bowel movements are yellow colored and soft in nature.&quot;&quot;&quot;

val data = Seq(text).toDS.toDF(&quot;text&quot;)

val result = jsl_pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+--------------------+-----+---+--------------------+
|               chunk|begin|end|           ner_label|
+--------------------+-----+---+--------------------+
|          21-day-old|   17| 26|                 Age|
|           Caucasian|   28| 36|      Race_Ethnicity|
|                male|   38| 41|              Gender|
|          for 2 days|   48| 57|            Duration|
|          congestion|   62| 71|             Symptom|
|                 mom|   75| 77|              Gender|
|           discharge|  106|114| Admission_Discharge|
|               nares|  135|139|External_body_par...|
|                 she|  147|149|              Gender|
|                mild|  168|171|            Modifier|
|problems with his...|  173|213|             Symptom|
|   perioral cyanosis|  237|253|             Symptom|
|         retractions|  258|268|             Symptom|
|   Influenza vaccine|  325|341|        Vaccine_Name|
|         One day ago|  344|354|        RelativeDate|
|                 mom|  357|359|              Gender|
|             Tylenol|  417|423|      Drug_BrandName|
|                Baby|  426|429|                 Age|
|       decreased p.o|  449|461|             Symptom|
|                 His|  472|474|              Gender|
+--------------------+-----+---+--------------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_jsl_langtest|
|Compatibility:|Healthcare NLP 5.0.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|3.2 MB|

## References

trained by in-house dataset

## Benchmarking

```bash
                 label      tp      fp      fn   total  precision  recall      f1   
            VS_Finding   181.0    48.0    84.0   265.0     0.7904   0.683  0.7328  
             Direction  3422.0   522.0   560.0  3982.0     0.8676  0.8594  0.8635  
           Respiration    57.0     2.0    16.0    73.0     0.9661  0.7808  0.8636  
  Cerebrovascular_D...    74.0    36.0    29.0   103.0     0.6727  0.7184  0.6948  
  Family_History_He...    79.0     6.0     2.0    81.0     0.9294  0.9753  0.9518  
         Heart_Disease   395.0    87.0   133.0   528.0     0.8195  0.7481  0.7822  
       ImagingFindings    38.0    55.0   137.0   175.0     0.4086  0.2171  0.2836  
          RelativeTime   102.0    70.0    90.0   192.0      0.593  0.5313  0.5604  
              Strength   598.0    48.0    58.0   656.0     0.9257  0.9116  0.9186  
               Smoking   124.0     2.0     5.0   129.0     0.9841  0.9612  0.9725  
        Medical_Device  2714.0   482.0   471.0  3185.0     0.8492  0.8521  0.8507  
              Allergen     1.0     4.0    13.0    14.0        0.2  0.0714  0.1053  
          EKG_Findings    28.0    19.0    37.0    65.0     0.5957  0.4308     0.5  
                 Pulse   102.0    29.0    15.0   117.0     0.7786  0.8718  0.8226  
  Psychological_Con...    88.0    12.0    20.0   108.0       0.88  0.8148  0.8462  
            Overweight     2.0     2.0     4.0     6.0        0.5  0.3333     0.4  
         Triglycerides     2.0     0.0     1.0     3.0        1.0  0.6667     0.8  
               Obesity    41.0     7.0     6.0    47.0     0.8542  0.8723  0.8632  
   Admission_Discharge   309.0    28.0     9.0   318.0     0.9169  0.9717  0.9435  
                   HDL     2.0     2.0     1.0     3.0        0.5  0.6667  0.5714  
              Diabetes    91.0    17.0    12.0   103.0     0.8426  0.8835  0.8626  
        Section_Header  3272.0   167.0   167.0  3439.0     0.9514  0.9514  0.9514  
                   Age   558.0    83.0    95.0   653.0     0.8705  0.8545  0.8624  
         O2_Saturation    30.0     8.0    12.0    42.0     0.7895  0.7143    0.75  
        Kidney_Disease    94.0    12.0    24.0   118.0     0.8868  0.7966  0.8393  
                  Test  2145.0   623.0   497.0  2642.0     0.7749  0.8119   0.793  
  Communicable_Disease    16.0    15.0    32.0    48.0     0.5161  0.3333  0.4051  
          Hypertension   139.0     8.0     9.0   148.0     0.9456  0.9392  0.9424  
  External_body_par...  2008.0   455.0   528.0  2536.0     0.8153  0.7918  0.8034  
        Oxygen_Therapy    54.0    15.0    27.0    81.0     0.7826  0.6667    0.72  
              Modifier  2045.0   480.0   677.0  2722.0     0.8099  0.7513  0.7795  
           Test_Result   753.0   203.0   272.0  1025.0     0.7877  0.7346  0.7602  
                   BMI     3.0     0.0     3.0     6.0        1.0     0.5  0.6667  
       Labour_Delivery    49.0    24.0    41.0    90.0     0.6712  0.5444  0.6012  
            Employment   207.0    31.0    64.0   271.0     0.8697  0.7638  0.8134  
         Fetus_NewBorn    40.0    25.0    64.0   104.0     0.6154  0.3846  0.4734  
         Clinical_Dept   806.0   136.0    95.0   901.0     0.8556  0.8946  0.8747  
                  Time    20.0    12.0    21.0    41.0      0.625  0.4878  0.5479  
             Procedure  2455.0   575.0   663.0  3118.0     0.8102  0.7874  0.7986  
                  Diet    29.0     6.0    50.0    79.0     0.8286  0.3671  0.5088  
           Oncological   344.0    82.0    95.0   439.0     0.8075  0.7836  0.7954  
                   LDL     0.0     0.0     3.0     3.0        0.0     0.0     0.0  
               Symptom  6190.0  1617.0  1426.0  7616.0     0.7929  0.8128  0.8027  
           Temperature    70.0    11.0    16.0    86.0     0.8642   0.814  0.8383  
    Vital_Signs_Header   183.0    26.0    22.0   205.0     0.8756  0.8927  0.8841  
     Total_Cholesterol     8.0     1.0     1.0     9.0     0.8889  0.8889  0.8889  
   Relationship_Status    40.0     4.0     5.0    45.0     0.9091  0.8889  0.8989  
        Blood_Pressure   126.0    36.0    24.0   150.0     0.7778    0.84  0.8077  
   Injury_or_Poisoning   380.0   112.0   151.0   531.0     0.7724  0.7156  0.7429  
       Drug_Ingredient  1439.0   177.0   167.0  1606.0     0.8905   0.896  0.8932  
             Treatment   109.0    28.0    82.0   191.0     0.7956  0.5707  0.6646  
             Pregnancy   101.0    20.0    75.0   176.0     0.8347  0.5739  0.6801  
               Vaccine     0.0     0.0     9.0     9.0        0.0     0.0     0.0  
  Disease_Syndrome_...  2543.0   688.0   643.0  3186.0     0.7871  0.7982  0.7926  
                Height    18.0     3.0     9.0    27.0     0.8571  0.6667    0.75  
             Frequency   504.0   108.0   155.0   659.0     0.8235  0.7648  0.7931  
                 Route   737.0   114.0    79.0   816.0      0.866  0.9032  0.8842  
              Duration   277.0   100.0   121.0   398.0     0.7347   0.696  0.7148  
          Death_Entity    37.0    17.0     3.0    40.0     0.6852   0.925  0.7872  
  Internal_organ_or...  5461.0  1326.0  1107.0  6568.0     0.8046  0.8315  0.8178  
          Vaccine_Name     0.0     0.0    12.0    12.0        0.0     0.0     0.0  
               Alcohol    76.0    12.0     9.0    85.0     0.8636  0.8941  0.8786  
    Substance_Quantity     0.0     0.0     6.0     6.0        0.0     0.0     0.0  
                  Date   440.0    16.0    13.0   453.0     0.9649  0.9713  0.9681  
        Hyperlipidemia    30.0     0.0     4.0    34.0        1.0  0.8824  0.9375  
  Social_History_He...    78.0     9.0     8.0    86.0     0.8966   0.907  0.9017  
     Imaging_Technique    26.0    12.0    37.0    63.0     0.6842  0.4127  0.5149  
        Race_Ethnicity   102.0     2.0     5.0   107.0     0.9808  0.9533  0.9668  
        Drug_BrandName   886.0    81.0    86.0   972.0     0.9162  0.9115  0.9139  
          RelativeDate   502.0   153.0   137.0   639.0     0.7664  0.7856  0.7759  
                Gender  5536.0    88.0    66.0  5602.0     0.9844  0.9882  0.9863  
                  Form   183.0    49.0    66.0   249.0     0.7888  0.7349  0.7609  
                Dosage   235.0    44.0    82.0   317.0     0.8423  0.7413  0.7886  
  Medical_History_H...   100.0     7.0    10.0   110.0     0.9346  0.9091  0.9217  
          Birth_Entity     0.0     0.0     6.0     6.0        0.0     0.0     0.0  
             Substance    64.0    13.0    23.0    87.0     0.8312  0.7356  0.7805  
  Sexually_Active_o...     4.0     0.0     0.0     4.0        1.0     1.0     1.0  
                Weight    64.0    18.0    29.0    93.0     0.7805  0.6882  0.7314   
                 macro      -       -       -       -       -       -      0.7224
                 micro      -       -       -       -       -       -      0.8377
```</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="clinical" /><category term="ner" /><category term="en" /><category term="langtest" /><summary type="html">Description Pretrained named entity recognition deep learning model for clinical terminology. This NER model is trained with the embeddings_clinical word embeddings model, so be sure to use the same embeddings in the pipeline.. This model is augmented of ner_jsl. Predicted Entities Injury_or_Poisoning, Direction, Test, Admission_Discharge, Death_Entity, Relationship_Status, Duration, Respiration, Hyperlipidemia, Birth_Entity, Age, Labour_Delivery, Family_History_Header, BMI, Temperature, Alcohol, Kidney_Disease, Oncological, Medical_History_Header, Cerebrovascular_Disease, Oxygen_Therapy, O2_Saturation, Psychological_Condition, Heart_Disease, Employment, Obesity, Disease_Syndrome_Disorder, Pregnancy, ImagingFindings, Procedure, Medical_Device, Race_Ethnicity, Section_Header, Symptom, Treatment, Substance, Route, Drug_Ingredient, Blood_Pressure, Diet, External_body_part_or_region, LDL, VS_Finding, Allergen, EKG_Findings, Imaging_Technique, Triglycerides, RelativeTime, Gender, Pulse, Social_History_Header, Substance_Quantity, Diabetes, Modifier, Internal_organ_or_component, Clinical_Dept, Form, Drug_BrandName, Strength, Fetus_NewBorn, RelativeDate, Height, Test_Result, Sexually_Active_or_Sexual_Orientation, Frequency, Time, Weight, Vaccine, Vaccine_Name, Vital_Signs_Header, Communicable_Disease, Dosage, Overweight, Hypertension, HDL, Total_Cholesterol, Smoking, Date Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetector()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer()\ .setInputCols([&quot;sentence&quot;])\ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) clinical_ner = MedicalNerModel.pretrained(&quot;ner_jsl_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;,&quot;token&quot;,&quot;embeddings&quot;])\ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverterInternal()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;) nlp_pipeline = Pipeline( stages=[ document_assembler, sentence_detector, tokenizer, word_embeddings, clinical_ner, ner_converter ]) text =&quot;&quot;&quot;The patient is a 21-day-old Caucasian male here for 2 days of congestion - mom has been suctioning yellow discharge from the patient's nares, plus she has noticed some mild problems with his breathing while feeding (but negative for any perioral cyanosis or retractions). Additionally, there is no side effect observed after Influenza vaccine. One day ago, mom also noticed a tactile temperature and gave the patient Tylenol. Baby also has had some decreased p.o. intake. His normal breast-feeding is down from 20 minutes q.2h. to 5 to 10 minutes secondary to his respiratory congestion. He sleeps well, but has been more tired and has been fussy over the past 2 days. The parents noticed no improvement with albuterol treatments given in the ER. His urine output has also decreased; normally he has 8 to 10 wet and 5 dirty diapers per 24 hours, now he has down to 4 wet diapers per 24 hours. Mom denies any diarrhea. His bowel movements are yellow colored and soft in nature.&quot;&quot;&quot; data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;) result = nlp_pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = new SentenceDetector() .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical_large&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))\ .setOutputCol(&quot;embeddings&quot;) val jsl_ner_model = MedicalNerModel.pretrained(&quot;ner_jsl_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;posology_ner&quot;) val jsl_ner_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;posology_ner_chunk&quot;) val jsl_pipeline = new PipelineModel().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, jsl_ner_model, jsl_ner_converter)) text = &quot;&quot;&quot;The patient is a 21-day-old Caucasian male here for 2 days of congestion - mom has been suctioning yellow discharge from the patient's nares, plus she has noticed some mild problems with his breathing while feeding (but negative for any perioral cyanosis or retractions). Additionally, there is no side effect observed after Influenza vaccine. One day ago, mom also noticed a tactile temperature and gave the patient Tylenol. Baby also has had some decreased p.o. intake. His normal breast-feeding is down from 20 minutes q.2h. to 5 to 10 minutes secondary to his respiratory congestion. He sleeps well, but has been more tired and has been fussy over the past 2 days. The parents noticed no improvement with albuterol treatments given in the ER. His urine output has also decreased; normally he has 8 to 10 wet and 5 dirty diapers per 24 hours, now he has down to 4 wet diapers per 24 hours. Mom denies any diarrhea. His bowel movements are yellow colored and soft in nature.&quot;&quot;&quot; val data = Seq(text).toDS.toDF(&quot;text&quot;) val result = jsl_pipeline.fit(data).transform(data) Results +--------------------+-----+---+--------------------+ | chunk|begin|end| ner_label| +--------------------+-----+---+--------------------+ | 21-day-old| 17| 26| Age| | Caucasian| 28| 36| Race_Ethnicity| | male| 38| 41| Gender| | for 2 days| 48| 57| Duration| | congestion| 62| 71| Symptom| | mom| 75| 77| Gender| | discharge| 106|114| Admission_Discharge| | nares| 135|139|External_body_par...| | she| 147|149| Gender| | mild| 168|171| Modifier| |problems with his...| 173|213| Symptom| | perioral cyanosis| 237|253| Symptom| | retractions| 258|268| Symptom| | Influenza vaccine| 325|341| Vaccine_Name| | One day ago| 344|354| RelativeDate| | mom| 357|359| Gender| | Tylenol| 417|423| Drug_BrandName| | Baby| 426|429| Age| | decreased p.o| 449|461| Symptom| | His| 472|474| Gender| +--------------------+-----+---+--------------------+ Model Information Model Name: ner_jsl_langtest Compatibility: Healthcare NLP 5.0.0+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 3.2 MB References trained by in-house dataset Benchmarking label tp fp fn total precision recall f1 VS_Finding 181.0 48.0 84.0 265.0 0.7904 0.683 0.7328 Direction 3422.0 522.0 560.0 3982.0 0.8676 0.8594 0.8635 Respiration 57.0 2.0 16.0 73.0 0.9661 0.7808 0.8636 Cerebrovascular_D... 74.0 36.0 29.0 103.0 0.6727 0.7184 0.6948 Family_History_He... 79.0 6.0 2.0 81.0 0.9294 0.9753 0.9518 Heart_Disease 395.0 87.0 133.0 528.0 0.8195 0.7481 0.7822 ImagingFindings 38.0 55.0 137.0 175.0 0.4086 0.2171 0.2836 RelativeTime 102.0 70.0 90.0 192.0 0.593 0.5313 0.5604 Strength 598.0 48.0 58.0 656.0 0.9257 0.9116 0.9186 Smoking 124.0 2.0 5.0 129.0 0.9841 0.9612 0.9725 Medical_Device 2714.0 482.0 471.0 3185.0 0.8492 0.8521 0.8507 Allergen 1.0 4.0 13.0 14.0 0.2 0.0714 0.1053 EKG_Findings 28.0 19.0 37.0 65.0 0.5957 0.4308 0.5 Pulse 102.0 29.0 15.0 117.0 0.7786 0.8718 0.8226 Psychological_Con... 88.0 12.0 20.0 108.0 0.88 0.8148 0.8462 Overweight 2.0 2.0 4.0 6.0 0.5 0.3333 0.4 Triglycerides 2.0 0.0 1.0 3.0 1.0 0.6667 0.8 Obesity 41.0 7.0 6.0 47.0 0.8542 0.8723 0.8632 Admission_Discharge 309.0 28.0 9.0 318.0 0.9169 0.9717 0.9435 HDL 2.0 2.0 1.0 3.0 0.5 0.6667 0.5714 Diabetes 91.0 17.0 12.0 103.0 0.8426 0.8835 0.8626 Section_Header 3272.0 167.0 167.0 3439.0 0.9514 0.9514 0.9514 Age 558.0 83.0 95.0 653.0 0.8705 0.8545 0.8624 O2_Saturation 30.0 8.0 12.0 42.0 0.7895 0.7143 0.75 Kidney_Disease 94.0 12.0 24.0 118.0 0.8868 0.7966 0.8393 Test 2145.0 623.0 497.0 2642.0 0.7749 0.8119 0.793 Communicable_Disease 16.0 15.0 32.0 48.0 0.5161 0.3333 0.4051 Hypertension 139.0 8.0 9.0 148.0 0.9456 0.9392 0.9424 External_body_par... 2008.0 455.0 528.0 2536.0 0.8153 0.7918 0.8034 Oxygen_Therapy 54.0 15.0 27.0 81.0 0.7826 0.6667 0.72 Modifier 2045.0 480.0 677.0 2722.0 0.8099 0.7513 0.7795 Test_Result 753.0 203.0 272.0 1025.0 0.7877 0.7346 0.7602 BMI 3.0 0.0 3.0 6.0 1.0 0.5 0.6667 Labour_Delivery 49.0 24.0 41.0 90.0 0.6712 0.5444 0.6012 Employment 207.0 31.0 64.0 271.0 0.8697 0.7638 0.8134 Fetus_NewBorn 40.0 25.0 64.0 104.0 0.6154 0.3846 0.4734 Clinical_Dept 806.0 136.0 95.0 901.0 0.8556 0.8946 0.8747 Time 20.0 12.0 21.0 41.0 0.625 0.4878 0.5479 Procedure 2455.0 575.0 663.0 3118.0 0.8102 0.7874 0.7986 Diet 29.0 6.0 50.0 79.0 0.8286 0.3671 0.5088 Oncological 344.0 82.0 95.0 439.0 0.8075 0.7836 0.7954 LDL 0.0 0.0 3.0 3.0 0.0 0.0 0.0 Symptom 6190.0 1617.0 1426.0 7616.0 0.7929 0.8128 0.8027 Temperature 70.0 11.0 16.0 86.0 0.8642 0.814 0.8383 Vital_Signs_Header 183.0 26.0 22.0 205.0 0.8756 0.8927 0.8841 Total_Cholesterol 8.0 1.0 1.0 9.0 0.8889 0.8889 0.8889 Relationship_Status 40.0 4.0 5.0 45.0 0.9091 0.8889 0.8989 Blood_Pressure 126.0 36.0 24.0 150.0 0.7778 0.84 0.8077 Injury_or_Poisoning 380.0 112.0 151.0 531.0 0.7724 0.7156 0.7429 Drug_Ingredient 1439.0 177.0 167.0 1606.0 0.8905 0.896 0.8932 Treatment 109.0 28.0 82.0 191.0 0.7956 0.5707 0.6646 Pregnancy 101.0 20.0 75.0 176.0 0.8347 0.5739 0.6801 Vaccine 0.0 0.0 9.0 9.0 0.0 0.0 0.0 Disease_Syndrome_... 2543.0 688.0 643.0 3186.0 0.7871 0.7982 0.7926 Height 18.0 3.0 9.0 27.0 0.8571 0.6667 0.75 Frequency 504.0 108.0 155.0 659.0 0.8235 0.7648 0.7931 Route 737.0 114.0 79.0 816.0 0.866 0.9032 0.8842 Duration 277.0 100.0 121.0 398.0 0.7347 0.696 0.7148 Death_Entity 37.0 17.0 3.0 40.0 0.6852 0.925 0.7872 Internal_organ_or... 5461.0 1326.0 1107.0 6568.0 0.8046 0.8315 0.8178 Vaccine_Name 0.0 0.0 12.0 12.0 0.0 0.0 0.0 Alcohol 76.0 12.0 9.0 85.0 0.8636 0.8941 0.8786 Substance_Quantity 0.0 0.0 6.0 6.0 0.0 0.0 0.0 Date 440.0 16.0 13.0 453.0 0.9649 0.9713 0.9681 Hyperlipidemia 30.0 0.0 4.0 34.0 1.0 0.8824 0.9375 Social_History_He... 78.0 9.0 8.0 86.0 0.8966 0.907 0.9017 Imaging_Technique 26.0 12.0 37.0 63.0 0.6842 0.4127 0.5149 Race_Ethnicity 102.0 2.0 5.0 107.0 0.9808 0.9533 0.9668 Drug_BrandName 886.0 81.0 86.0 972.0 0.9162 0.9115 0.9139 RelativeDate 502.0 153.0 137.0 639.0 0.7664 0.7856 0.7759 Gender 5536.0 88.0 66.0 5602.0 0.9844 0.9882 0.9863 Form 183.0 49.0 66.0 249.0 0.7888 0.7349 0.7609 Dosage 235.0 44.0 82.0 317.0 0.8423 0.7413 0.7886 Medical_History_H... 100.0 7.0 10.0 110.0 0.9346 0.9091 0.9217 Birth_Entity 0.0 0.0 6.0 6.0 0.0 0.0 0.0 Substance 64.0 13.0 23.0 87.0 0.8312 0.7356 0.7805 Sexually_Active_o... 4.0 0.0 0.0 4.0 1.0 1.0 1.0 Weight 64.0 18.0 29.0 93.0 0.7805 0.6882 0.7314 macro - - - - - - 0.7224 micro - - - - - - 0.8377</summary></entry><entry><title type="html">Social Determinants of Health (LangTest)</title><link href="/2023/07/31/ner_sdoh_langtest_en.html" rel="alternate" type="text/html" title="Social Determinants of Health (LangTest)" /><published>2023-07-31T00:00:00+00:00</published><updated>2023-07-31T00:00:00+00:00</updated><id>/2023/07/31/ner_sdoh_langtest_en</id><content type="html" xml:base="/2023/07/31/ner_sdoh_langtest_en.html">## Description

SDOH NER model is designed to detect and label social determinants of health (SDOH) entities within text data. Social determinants of health are crucial factors that influence individuals’ health outcomes, encompassing various social, economic, and environmental element. The model has been trained using advanced machine learning techniques on a diverse range of text sources. The model can accurately recognize and classify a wide range of SDOH entities, including but not limited to factors such as socioeconomic status, education level, housing conditions, access to healthcare services, employment status, cultural and ethnic background, neighborhood characteristics, and environmental factors. The model’s accuracy and precision have been carefully validated against expert-labeled data to ensure reliable and consistent results. This model is augmented version of [ner_sdoh](https://nlp.johnsnowlabs.com/2023/06/13/ner_sdoh_en.html)

## Predicted Entities

`Access_To_Care`, `Age`, `Alcohol`, `Childhood_Event`, `Community_Safety`, `Diet`, `Disability`, `Eating_Disorder`, `Education`, `Employment`, `Environmental_Condition`, `Exercise`, `Family_Member`, `Financial_Status`, `Food_Insecurity`, `Gender`, `Geographic_Entity`, `Healthcare_Institution`, `Housing`, `Hyperlipidemia`, `Hypertension`, `Income`, `Insurance_Status`, `Language`, `Legal_Issues`, `Marital_Status`, `Mental_Health`, `Obesity`, `Other_Disease`, `Other_SDoH_Keywords`, `Population_Group`, `Quality_Of_Life`, `Race_Ethnicity`, `Sexual_Activity`, `Sexual_Orientation`, `Smoking`, `Social_Exclusion`, `Social_Support`, `Spiritual_Beliefs`, `Substance_Duration`, `Substance_Frequency`, `Substance_Quantity`, `Substance_Use`, `Transportation`, `Violence_Or_Abuse`

{:.btn-box}
[Live Demo](https://demo.johnsnowlabs.com/healthcare/SOCIAL_DETERMINANT_NER/){:.button.button-orange}
[Open in Colab](https://colab.research.google.com/github/JohnSnowLabs/spark-nlp-workshop/blob/master/tutorials/streamlit_notebooks/healthcare/SOCIAL_DETERMINANT_NER.ipynb){:.button.button-orange.button-orange-trans.co.button-icon}
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_sdoh_langtest_en_5.0.0_3.0_1690799658986.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_sdoh_langtest_en_5.0.0_3.0_1690799658986.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetector()\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer()\
    .setInputCols([&quot;sentence&quot;])\
    .setOutputCol(&quot;token&quot;)

clinical_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
    .setOutputCol(&quot;embeddings&quot;)

ner_model = MedicalNerModel.pretrained(&quot;ner_sdoh_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverterInternal()\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\
    .setOutputCol(&quot;ner_chunk&quot;)

pipeline = Pipeline(stages=[
    document_assembler, 
    sentence_detector,
    tokenizer,
    clinical_embeddings,
    ner_model,
    ner_converter   
    ])

sample_texts = [[&quot;&quot;&quot;Smith is 55 years old, living in New York, a divorced Mexcian American woman with financial problems. She speaks Spanish and Portuguese. She lives in an apartment. She has been struggling with diabetes for the past 10 years and has recently been experiencing frequent hospitalizations due to uncontrolled blood sugar levels. Smith works as a cleaning assistant and cannot access health insurance or paid sick leave. She has a son, a student at college. Pt with likely long-standing depression. She is aware she needs rehab. Pt reports having her catholic faith as a means of support as well.  She has a long history of etoh abuse, beginning in her teens. She reports she has been a daily drinker for 30 years, most recently drinking beer daily. She smokes a pack of cigarettes a day. She had DUI in April and was due to court this week.&quot;&quot;&quot;]]
             
data = spark.createDataFrame(sample_texts).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)

val sentence_detector = SentenceDetector()
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)

val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)

val clinical_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)

val ner_model = MedicalNerModel.pretrained(&quot;ner_sdoh_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)

val ner_converter = new NerConverterInternal()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

val pipeline = new Pipeline().setStages(Array(
    document_assembler, 
    sentence_detector,
    tokenizer,
    clinical_embeddings,
    ner_model,
    ner_converter   
))

val data = Seq(&quot;&quot;&quot;Smith is 55 years old, living in New York, a divorced Mexcian American woman with financial problems. She speaks Spanish and Portuguese. She lives in an apartment. She has been struggling with diabetes for the past 10 years and has recently been experiencing frequent hospitalizations due to uncontrolled blood sugar levels. Smith works as a cleaning assistant and cannot access health insurance or paid sick leave. She has a son, a student at college. Pt with likely long-standing depression. She is aware she needs rehab. Pt reports having her catholic faith as a means of support as well.  She has a long history of etoh abuse, beginning in her teens. She reports she has been a daily drinker for 30 years, most recently drinking beer daily. She smokes a pack of cigarettes a day. She had DUI in April and was due to court this week.&quot;&quot;&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+--------------------+-----+---+-------------------+
|               chunk|begin|end|          ner_label|
+--------------------+-----+---+-------------------+
|        55 years old|    9| 20|                Age|
|            New York|   33| 40|  Geographic_Entity|
|            divorced|   45| 52|     Marital_Status|
|    Mexcian American|   54| 69|     Race_Ethnicity|
|               woman|   71| 75|             Gender|
|  financial problems|   82| 99|   Financial_Status|
|                 She|  102|104|             Gender|
|             Spanish|  113|119|           Language|
|          Portuguese|  125|134|           Language|
|                 She|  137|139|             Gender|
|           apartment|  153|161|            Housing|
|                 She|  164|166|             Gender|
|            diabetes|  193|200|      Other_Disease|
|    hospitalizations|  268|283|Other_SDoH_Keywords|
|  cleaning assistant|  342|359|         Employment|
|access health ins...|  372|394|   Insurance_Status|
|                 She|  416|418|             Gender|
|                 son|  426|428|      Family_Member|
|             student|  433|439|          Education|
|             college|  444|450|          Education|
|          depression|  482|491|      Mental_Health|
|                 She|  494|496|             Gender|
|                 she|  507|509|             Gender|
|               rehab|  517|521|     Access_To_Care|
|                 her|  542|544|             Gender|
|      catholic faith|  546|559|  Spiritual_Beliefs|
|             support|  575|581|     Social_Support|
|                 She|  593|595|             Gender|
|          etoh abuse|  619|628|            Alcohol|
|                 her|  644|646|             Gender|
|               teens|  648|652|                Age|
|                 She|  655|657|             Gender|
|                 she|  667|669|             Gender|
|               daily|  682|686|Substance_Frequency|
|             drinker|  688|694|            Alcohol|
|            30 years|  700|707| Substance_Duration|
|            drinking|  724|731|            Alcohol|
|                beer|  733|736|            Alcohol|
|               daily|  738|742|Substance_Frequency|
|                 She|  745|747|             Gender|
|              smokes|  749|754|            Smoking|
|              a pack|  756|761| Substance_Quantity|
|          cigarettes|  766|775|            Smoking|
|               a day|  777|781|Substance_Frequency|
|                 She|  784|786|             Gender|
|                 DUI|  792|794|       Legal_Issues|
+--------------------+-----+---+-------------------+

```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_sdoh_langtest|
|Compatibility:|Healthcare NLP 5.0.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|3.0 MB|

## Benchmarking

```bash
                 label       tp     fp     fn    total  precision  recall      f1  
   Other_SDoH_Keywords    359.0  123.0   99.0    458.0     0.7448  0.7838  0.7638  
             Education     96.0   24.0   19.0    115.0        0.8  0.8348   0.817  
      Population_Group     14.0    1.0   14.0     28.0     0.9333     0.5  0.6512  
       Quality_Of_Life     78.0   25.0   20.0     98.0     0.7573  0.7959  0.7761  
       Food_Insecurity     29.0    5.0    3.0     32.0     0.8529  0.9063  0.8788  
               Housing    321.0   57.0   67.0    388.0     0.8492  0.8273  0.8381  
               Smoking    134.0    7.0    5.0    139.0     0.9504   0.964  0.9571  
   Substance_Frequency    104.0   14.0   23.0    127.0     0.8814  0.8189   0.849  
       Eating_Disorder     53.0    2.0    0.0     53.0     0.9636     1.0  0.9815  
  Environmental_Con...     34.0    3.0    5.0     39.0     0.9189  0.8718  0.8947  
               Obesity     13.0    2.0    2.0     15.0     0.8667  0.8667  0.8667  
  Healthcare_Instit...   1350.0   23.0   43.0   1393.0     0.9832  0.9691  0.9761  
      Financial_Status     94.0   26.0   35.0    129.0     0.7833  0.7287   0.755  
                   Age    509.0   65.0   53.0    562.0     0.8868  0.9057  0.8961  
              Exercise     87.0   10.0   27.0    114.0     0.8969  0.7632  0.8246  
  Communicable_Disease     73.0    6.0    9.0     82.0     0.9241  0.8902  0.9068  
          Hypertension     56.0    1.0    5.0     61.0     0.9825   0.918  0.9492  
         Other_Disease    644.0   91.0  103.0    747.0     0.8762  0.8621  0.8691  
     Violence_Or_Abuse     86.0   35.0   40.0    126.0     0.7107  0.6825  0.6964  
     Spiritual_Beliefs     71.0   10.0    7.0     78.0     0.8765  0.9103  0.8931  
            Employment   3424.0  210.0  233.0   3657.0     0.9422  0.9363  0.9392  
      Social_Exclusion     33.0    5.0    3.0     36.0     0.8684  0.9167  0.8919  
        Access_To_Care    464.0  112.0   87.0    551.0     0.8056  0.8421  0.8234  
        Marital_Status    189.0    8.0    2.0    191.0     0.9594  0.9895  0.9742  
                Income     55.0    7.0   10.0     65.0     0.8871  0.8462  0.8661  
                  Diet     52.0   15.0   16.0     68.0     0.7761  0.7647  0.7704  
        Social_Support    866.0  161.0  115.0    981.0     0.8432  0.8828  0.8625  
      Community_Safety     39.0   12.0    5.0     44.0     0.7647  0.8864  0.8211  
            Disability     94.0    2.0    3.0     97.0     0.9792  0.9691  0.9741  
         Mental_Health    740.0  107.0  100.0    840.0     0.8737   0.881  0.8773  
               Alcohol    508.0   39.0   33.0    541.0     0.9287   0.939  0.9338  
      Insurance_Status     99.0   31.0   19.0    118.0     0.7615   0.839  0.7984  
    Substance_Quantity     84.0    9.0   22.0    106.0     0.9032  0.7925  0.8442  
        Hyperlipidemia     11.0    0.0    2.0     13.0        1.0  0.8462  0.9167  
         Family_Member   4118.0  103.0   63.0   4181.0     0.9756  0.9849  0.9802  
          Legal_Issues     58.0   15.0   17.0     75.0     0.7945  0.7733  0.7838  
        Race_Ethnicity     70.0    7.0    3.0     73.0     0.9091  0.9589  0.9333  
                Gender  10175.0  233.0  197.0  10372.0     0.9776   0.981  0.9793  
     Geographic_Entity    170.0   17.0   17.0    187.0     0.9091  0.9091  0.9091  
       Childhood_Event     19.0    0.0    5.0     24.0        1.0  0.7917  0.8837  
    Sexual_Orientation     35.0    9.0   17.0     52.0     0.7955  0.6731  0.7292  
        Transportation     72.0    7.0   14.0     86.0     0.9114  0.8372  0.8727  
    Substance_Duration     34.0   17.0   16.0     50.0     0.6667    0.68  0.6733  
       Sexual_Activity     38.0   29.0    8.0     46.0     0.5672  0.8261  0.6726  
              Language     29.0    3.0    6.0     35.0     0.9063  0.8286  0.8657  
         Substance_Use    312.0   44.0   20.0    332.0     0.8764  0.9398   0.907  
                 macro      -      -      -        -          -       -    0.8592  
                 micro      -      -      -        -          -       -    0.9396   
```</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="clinical" /><category term="en" /><category term="social_determinants" /><category term="ner" /><category term="public_health" /><category term="sdoh" /><category term="langtest" /><summary type="html">Description SDOH NER model is designed to detect and label social determinants of health (SDOH) entities within text data. Social determinants of health are crucial factors that influence individuals’ health outcomes, encompassing various social, economic, and environmental element. The model has been trained using advanced machine learning techniques on a diverse range of text sources. The model can accurately recognize and classify a wide range of SDOH entities, including but not limited to factors such as socioeconomic status, education level, housing conditions, access to healthcare services, employment status, cultural and ethnic background, neighborhood characteristics, and environmental factors. The model’s accuracy and precision have been carefully validated against expert-labeled data to ensure reliable and consistent results. This model is augmented version of ner_sdoh Predicted Entities Access_To_Care, Age, Alcohol, Childhood_Event, Community_Safety, Diet, Disability, Eating_Disorder, Education, Employment, Environmental_Condition, Exercise, Family_Member, Financial_Status, Food_Insecurity, Gender, Geographic_Entity, Healthcare_Institution, Housing, Hyperlipidemia, Hypertension, Income, Insurance_Status, Language, Legal_Issues, Marital_Status, Mental_Health, Obesity, Other_Disease, Other_SDoH_Keywords, Population_Group, Quality_Of_Life, Race_Ethnicity, Sexual_Activity, Sexual_Orientation, Smoking, Social_Exclusion, Social_Support, Spiritual_Beliefs, Substance_Duration, Substance_Frequency, Substance_Quantity, Substance_Use, Transportation, Violence_Or_Abuse Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetector()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer()\ .setInputCols([&quot;sentence&quot;])\ .setOutputCol(&quot;token&quot;) clinical_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) ner_model = MedicalNerModel.pretrained(&quot;ner_sdoh_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverterInternal()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;) pipeline = Pipeline(stages=[ document_assembler, sentence_detector, tokenizer, clinical_embeddings, ner_model, ner_converter ]) sample_texts = [[&quot;&quot;&quot;Smith is 55 years old, living in New York, a divorced Mexcian American woman with financial problems. She speaks Spanish and Portuguese. She lives in an apartment. She has been struggling with diabetes for the past 10 years and has recently been experiencing frequent hospitalizations due to uncontrolled blood sugar levels. Smith works as a cleaning assistant and cannot access health insurance or paid sick leave. She has a son, a student at college. Pt with likely long-standing depression. She is aware she needs rehab. Pt reports having her catholic faith as a means of support as well. She has a long history of etoh abuse, beginning in her teens. She reports she has been a daily drinker for 30 years, most recently drinking beer daily. She smokes a pack of cigarettes a day. She had DUI in April and was due to court this week.&quot;&quot;&quot;]] data = spark.createDataFrame(sample_texts).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetector() .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val clinical_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner_model = MedicalNerModel.pretrained(&quot;ner_sdoh_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pipeline = new Pipeline().setStages(Array( document_assembler, sentence_detector, tokenizer, clinical_embeddings, ner_model, ner_converter )) val data = Seq(&quot;&quot;&quot;Smith is 55 years old, living in New York, a divorced Mexcian American woman with financial problems. She speaks Spanish and Portuguese. She lives in an apartment. She has been struggling with diabetes for the past 10 years and has recently been experiencing frequent hospitalizations due to uncontrolled blood sugar levels. Smith works as a cleaning assistant and cannot access health insurance or paid sick leave. She has a son, a student at college. Pt with likely long-standing depression. She is aware she needs rehab. Pt reports having her catholic faith as a means of support as well. She has a long history of etoh abuse, beginning in her teens. She reports she has been a daily drinker for 30 years, most recently drinking beer daily. She smokes a pack of cigarettes a day. She had DUI in April and was due to court this week.&quot;&quot;&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +--------------------+-----+---+-------------------+ | chunk|begin|end| ner_label| +--------------------+-----+---+-------------------+ | 55 years old| 9| 20| Age| | New York| 33| 40| Geographic_Entity| | divorced| 45| 52| Marital_Status| | Mexcian American| 54| 69| Race_Ethnicity| | woman| 71| 75| Gender| | financial problems| 82| 99| Financial_Status| | She| 102|104| Gender| | Spanish| 113|119| Language| | Portuguese| 125|134| Language| | She| 137|139| Gender| | apartment| 153|161| Housing| | She| 164|166| Gender| | diabetes| 193|200| Other_Disease| | hospitalizations| 268|283|Other_SDoH_Keywords| | cleaning assistant| 342|359| Employment| |access health ins...| 372|394| Insurance_Status| | She| 416|418| Gender| | son| 426|428| Family_Member| | student| 433|439| Education| | college| 444|450| Education| | depression| 482|491| Mental_Health| | She| 494|496| Gender| | she| 507|509| Gender| | rehab| 517|521| Access_To_Care| | her| 542|544| Gender| | catholic faith| 546|559| Spiritual_Beliefs| | support| 575|581| Social_Support| | She| 593|595| Gender| | etoh abuse| 619|628| Alcohol| | her| 644|646| Gender| | teens| 648|652| Age| | She| 655|657| Gender| | she| 667|669| Gender| | daily| 682|686|Substance_Frequency| | drinker| 688|694| Alcohol| | 30 years| 700|707| Substance_Duration| | drinking| 724|731| Alcohol| | beer| 733|736| Alcohol| | daily| 738|742|Substance_Frequency| | She| 745|747| Gender| | smokes| 749|754| Smoking| | a pack| 756|761| Substance_Quantity| | cigarettes| 766|775| Smoking| | a day| 777|781|Substance_Frequency| | She| 784|786| Gender| | DUI| 792|794| Legal_Issues| +--------------------+-----+---+-------------------+ Model Information Model Name: ner_sdoh_langtest Compatibility: Healthcare NLP 5.0.0+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 3.0 MB Benchmarking label tp fp fn total precision recall f1 Other_SDoH_Keywords 359.0 123.0 99.0 458.0 0.7448 0.7838 0.7638 Education 96.0 24.0 19.0 115.0 0.8 0.8348 0.817 Population_Group 14.0 1.0 14.0 28.0 0.9333 0.5 0.6512 Quality_Of_Life 78.0 25.0 20.0 98.0 0.7573 0.7959 0.7761 Food_Insecurity 29.0 5.0 3.0 32.0 0.8529 0.9063 0.8788 Housing 321.0 57.0 67.0 388.0 0.8492 0.8273 0.8381 Smoking 134.0 7.0 5.0 139.0 0.9504 0.964 0.9571 Substance_Frequency 104.0 14.0 23.0 127.0 0.8814 0.8189 0.849 Eating_Disorder 53.0 2.0 0.0 53.0 0.9636 1.0 0.9815 Environmental_Con... 34.0 3.0 5.0 39.0 0.9189 0.8718 0.8947 Obesity 13.0 2.0 2.0 15.0 0.8667 0.8667 0.8667 Healthcare_Instit... 1350.0 23.0 43.0 1393.0 0.9832 0.9691 0.9761 Financial_Status 94.0 26.0 35.0 129.0 0.7833 0.7287 0.755 Age 509.0 65.0 53.0 562.0 0.8868 0.9057 0.8961 Exercise 87.0 10.0 27.0 114.0 0.8969 0.7632 0.8246 Communicable_Disease 73.0 6.0 9.0 82.0 0.9241 0.8902 0.9068 Hypertension 56.0 1.0 5.0 61.0 0.9825 0.918 0.9492 Other_Disease 644.0 91.0 103.0 747.0 0.8762 0.8621 0.8691 Violence_Or_Abuse 86.0 35.0 40.0 126.0 0.7107 0.6825 0.6964 Spiritual_Beliefs 71.0 10.0 7.0 78.0 0.8765 0.9103 0.8931 Employment 3424.0 210.0 233.0 3657.0 0.9422 0.9363 0.9392 Social_Exclusion 33.0 5.0 3.0 36.0 0.8684 0.9167 0.8919 Access_To_Care 464.0 112.0 87.0 551.0 0.8056 0.8421 0.8234 Marital_Status 189.0 8.0 2.0 191.0 0.9594 0.9895 0.9742 Income 55.0 7.0 10.0 65.0 0.8871 0.8462 0.8661 Diet 52.0 15.0 16.0 68.0 0.7761 0.7647 0.7704 Social_Support 866.0 161.0 115.0 981.0 0.8432 0.8828 0.8625 Community_Safety 39.0 12.0 5.0 44.0 0.7647 0.8864 0.8211 Disability 94.0 2.0 3.0 97.0 0.9792 0.9691 0.9741 Mental_Health 740.0 107.0 100.0 840.0 0.8737 0.881 0.8773 Alcohol 508.0 39.0 33.0 541.0 0.9287 0.939 0.9338 Insurance_Status 99.0 31.0 19.0 118.0 0.7615 0.839 0.7984 Substance_Quantity 84.0 9.0 22.0 106.0 0.9032 0.7925 0.8442 Hyperlipidemia 11.0 0.0 2.0 13.0 1.0 0.8462 0.9167 Family_Member 4118.0 103.0 63.0 4181.0 0.9756 0.9849 0.9802 Legal_Issues 58.0 15.0 17.0 75.0 0.7945 0.7733 0.7838 Race_Ethnicity 70.0 7.0 3.0 73.0 0.9091 0.9589 0.9333 Gender 10175.0 233.0 197.0 10372.0 0.9776 0.981 0.9793 Geographic_Entity 170.0 17.0 17.0 187.0 0.9091 0.9091 0.9091 Childhood_Event 19.0 0.0 5.0 24.0 1.0 0.7917 0.8837 Sexual_Orientation 35.0 9.0 17.0 52.0 0.7955 0.6731 0.7292 Transportation 72.0 7.0 14.0 86.0 0.9114 0.8372 0.8727 Substance_Duration 34.0 17.0 16.0 50.0 0.6667 0.68 0.6733 Sexual_Activity 38.0 29.0 8.0 46.0 0.5672 0.8261 0.6726 Language 29.0 3.0 6.0 35.0 0.9063 0.8286 0.8657 Substance_Use 312.0 44.0 20.0 332.0 0.8764 0.9398 0.907 macro - - - - - - 0.8592 micro - - - - - - 0.9396</summary></entry><entry><title type="html">Detect Posology concepts (langtest)</title><link href="/2023/07/28/ner_posology_langtest_en.html" rel="alternate" type="text/html" title="Detect Posology concepts (langtest)" /><published>2023-07-28T00:00:00+00:00</published><updated>2023-07-28T00:00:00+00:00</updated><id>/2023/07/28/ner_posology_langtest_en</id><content type="html" xml:base="/2023/07/28/ner_posology_langtest_en.html">## Description

Pretrained named entity recognition deep learning model for posological entity detection in clinical notes. This NER model is an augmented version of [`ner_posology`](https://nlp.johnsnowlabs.com/2021/03/31/ner_posology_en.html) model and trained with the `embeddings_clinical` word embeddings model, so be sure to use the same embeddings in the pipeline.

## Predicted Entities

`DOSAGE`, `DRUG`, `DURATION`, `FORM`, `FREQUENCY`, `ROUTE`, `STRENGTH`

{:.btn-box}
[Live Demo](https://demo.johnsnowlabs.com/healthcare/NER_POSOLOGY/){:.button.button-orange}
[Open in Colab](https://colab.research.google.com/github/JohnSnowLabs/spark-nlp-workshop/blob/master/tutorials/streamlit_notebooks/healthcare/NER_POSOLOGY.ipynb){:.button.button-orange.button-orange-trans.co.button-icon}
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_posology_langtest_en_5.0.0_3.0_1690552227340.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_posology_langtest_en_5.0.0_3.0_1690552227340.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetector()\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer()\
    .setInputCols([&quot;sentence&quot;])\
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
    .setOutputCol(&quot;embeddings&quot;)

clinical_ner = MedicalNerModel.pretrained(&quot;ner_posology_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverterInternal()\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\
    .setOutputCol(&quot;ner_chunk&quot;)

nlp_pipeline = Pipeline(
    stages=[
        document_assembler, 
        sentence_detector, 
        tokenizer, 
        word_embeddings, 
        clinical_ner, 
        ner_converter
    ])

text = &quot;&quot;&quot;The patient is a 30-year-old female with a long history of insulin dependent diabetes, type 2; coronary artery disease; chronic renal insufficiency; peripheral vascular disease, also secondary to diabetes; who was originally admitted to an outside hospital for what appeared to be acute paraplegia, lower extremities. She did receive a course of Bactrim for 14 days for UTI. Evidently, at some point in time, the patient was noted to develop a pressure-type wound on the sole of her left foot and left great toe. She was also noted to have a large sacral wound; this is in a similar location with her previous laminectomy, and this continues to receive daily care. The patient was transferred secondary to inability to participate in full physical and occupational therapy and continue medical management of her diabetes, the sacral decubitus, left foot pressure wound, and associated complications of diabetes. She is given Fragmin 5000 units subcutaneously daily, Xenaderm to wounds topically b.i.d., Lantus 40 units subcutaneously at bedtime, OxyContin 30 mg p.o. q.12 h., folic acid 1 mg daily, levothyroxine 0.1 mg p.o. daily, Prevacid 30 mg daily, Avandia 4 mg daily, Norvasc 10 mg daily, Lexapro 20 mg daily, aspirin 81 mg daily, Senna 2 tablets p.o. q.a.m., Neurontin 400 mg p.o. t.i.d., Percocet 5/325 mg 2 tablets q.4 h. p.r.n., magnesium citrate 1 bottle p.o. p.r.n., sliding scale coverage insulin, Wellbutrin 100 mg p.o. daily, and Bactrim DS b.i.d.&quot;&quot;&quot;

data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;)

result = nlp_pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)

val sentence_detector = new SentenceDetector()
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)

val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)
    
val word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical_large&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))\
    .setOutputCol(&quot;embeddings&quot;)

val posology_ner_model = MedicalNerModel.pretrained(&quot;ner_posology_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;posology_ner&quot;)

val posology_ner_converter = new NerConverterInternal()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;posology_ner_chunk&quot;)

val posology_pipeline = new PipelineModel().setStages(Array(document_assembler, 
                                                   sentence_detector,
                                                   tokenizer,
                                                   word_embeddings,
                                                   posology_ner_model,
                                                   posology_ner_converter))

text = &quot;&quot;&quot;The patient is a 30-year-old female with a long history of insulin dependent diabetes, type 2; coronary artery disease; chronic renal insufficiency; peripheral vascular disease, also secondary to diabetes; who was originally admitted to an outside hospital for what appeared to be acute paraplegia, lower extremities. She did receive a course of Bactrim for 14 days for UTI. Evidently, at some point in time, the patient was noted to develop a pressure-type wound on the sole of her left foot and left great toe. She was also noted to have a large sacral wound; this is in a similar location with her previous laminectomy, and this continues to receive daily care. The patient was transferred secondary to inability to participate in full physical and occupational therapy and continue medical management of her diabetes, the sacral decubitus, left foot pressure wound, and associated complications of diabetes. She is given Fragmin 5000 units subcutaneously daily, Xenaderm to wounds topically b.i.d., Lantus 40 units subcutaneously at bedtime, OxyContin 30 mg p.o. q.12 h., folic acid 1 mg daily, levothyroxine 0.1 mg p.o. daily, Prevacid 30 mg daily, Avandia 4 mg daily, Norvasc 10 mg daily, Lexapro 20 mg daily, aspirin 81 mg daily, Senna 2 tablets p.o. q.a.m., Neurontin 400 mg p.o. t.i.d., Percocet 5/325 mg 2 tablets q.4 h. p.r.n., magnesium citrate 1 bottle p.o. p.r.n., sliding scale coverage insulin, Wellbutrin 100 mg p.o. daily, and Bactrim DS b.i.d.&quot;&quot;&quot;

val data = Seq(text).toDS.toDF(&quot;text&quot;)

val result = posology_pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+--------------+---------+
|         chunk|ner_label|
+--------------+---------+
|       insulin|     DRUG|
|       Bactrim|     DRUG|
|   for 14 days| DURATION|
|       Fragmin|     DRUG|
|    5000 units|   DOSAGE|
|subcutaneously|    ROUTE|
|         daily|FREQUENCY|
|     topically|    ROUTE|
|         b.i.d|FREQUENCY|
|        Lantus|     DRUG|
|      40 units|   DOSAGE|
|subcutaneously|    ROUTE|
|    at bedtime|FREQUENCY|
|     OxyContin|     DRUG|
|         30 mg| STRENGTH|
|           p.o|    ROUTE|
|        q.12 h|FREQUENCY|
|    folic acid|     DRUG|
|          1 mg| STRENGTH|
|         daily|FREQUENCY|
+--------------+---------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_posology_langtest|
|Compatibility:|Healthcare NLP 5.0.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|2.8 MB|

## References

trained by in-house dataset

## Benchmarking

```bash
    label      tp     fp     fn   total  precision  recall      f1
 DURATION   175.0   25.0   39.0   214.0      0.875  0.8178  0.8454
     DRUG  1373.0  153.0  167.0  1540.0     0.8997  0.8916  0.8956
   DOSAGE   153.0   52.0   71.0   224.0     0.7463   0.683  0.7133
    ROUTE   283.0   29.0   47.0   330.0     0.9071  0.8576  0.8816
FREQUENCY   744.0  109.0  108.0   852.0     0.8722  0.8732  0.8727
     FORM   556.0   83.0   76.0   632.0     0.8701  0.8797  0.8749
 STRENGTH   826.0  145.0  143.0   969.0     0.8507  0.8524  0.8515
    macro      -       -     -       -        -      -      0.8479
    micro      -       -     -       -        -      -      0.8680
```</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="clinical" /><category term="en" /><category term="posology" /><category term="ner" /><category term="langtest" /><summary type="html">Description Pretrained named entity recognition deep learning model for posological entity detection in clinical notes. This NER model is an augmented version of ner_posology model and trained with the embeddings_clinical word embeddings model, so be sure to use the same embeddings in the pipeline. Predicted Entities DOSAGE, DRUG, DURATION, FORM, FREQUENCY, ROUTE, STRENGTH Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetector()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer()\ .setInputCols([&quot;sentence&quot;])\ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) clinical_ner = MedicalNerModel.pretrained(&quot;ner_posology_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverterInternal()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;) nlp_pipeline = Pipeline( stages=[ document_assembler, sentence_detector, tokenizer, word_embeddings, clinical_ner, ner_converter ]) text = &quot;&quot;&quot;The patient is a 30-year-old female with a long history of insulin dependent diabetes, type 2; coronary artery disease; chronic renal insufficiency; peripheral vascular disease, also secondary to diabetes; who was originally admitted to an outside hospital for what appeared to be acute paraplegia, lower extremities. She did receive a course of Bactrim for 14 days for UTI. Evidently, at some point in time, the patient was noted to develop a pressure-type wound on the sole of her left foot and left great toe. She was also noted to have a large sacral wound; this is in a similar location with her previous laminectomy, and this continues to receive daily care. The patient was transferred secondary to inability to participate in full physical and occupational therapy and continue medical management of her diabetes, the sacral decubitus, left foot pressure wound, and associated complications of diabetes. She is given Fragmin 5000 units subcutaneously daily, Xenaderm to wounds topically b.i.d., Lantus 40 units subcutaneously at bedtime, OxyContin 30 mg p.o. q.12 h., folic acid 1 mg daily, levothyroxine 0.1 mg p.o. daily, Prevacid 30 mg daily, Avandia 4 mg daily, Norvasc 10 mg daily, Lexapro 20 mg daily, aspirin 81 mg daily, Senna 2 tablets p.o. q.a.m., Neurontin 400 mg p.o. t.i.d., Percocet 5/325 mg 2 tablets q.4 h. p.r.n., magnesium citrate 1 bottle p.o. p.r.n., sliding scale coverage insulin, Wellbutrin 100 mg p.o. daily, and Bactrim DS b.i.d.&quot;&quot;&quot; data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;) result = nlp_pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = new SentenceDetector() .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical_large&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))\ .setOutputCol(&quot;embeddings&quot;) val posology_ner_model = MedicalNerModel.pretrained(&quot;ner_posology_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;posology_ner&quot;) val posology_ner_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;posology_ner_chunk&quot;) val posology_pipeline = new PipelineModel().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, posology_ner_model, posology_ner_converter)) text = &quot;&quot;&quot;The patient is a 30-year-old female with a long history of insulin dependent diabetes, type 2; coronary artery disease; chronic renal insufficiency; peripheral vascular disease, also secondary to diabetes; who was originally admitted to an outside hospital for what appeared to be acute paraplegia, lower extremities. She did receive a course of Bactrim for 14 days for UTI. Evidently, at some point in time, the patient was noted to develop a pressure-type wound on the sole of her left foot and left great toe. She was also noted to have a large sacral wound; this is in a similar location with her previous laminectomy, and this continues to receive daily care. The patient was transferred secondary to inability to participate in full physical and occupational therapy and continue medical management of her diabetes, the sacral decubitus, left foot pressure wound, and associated complications of diabetes. She is given Fragmin 5000 units subcutaneously daily, Xenaderm to wounds topically b.i.d., Lantus 40 units subcutaneously at bedtime, OxyContin 30 mg p.o. q.12 h., folic acid 1 mg daily, levothyroxine 0.1 mg p.o. daily, Prevacid 30 mg daily, Avandia 4 mg daily, Norvasc 10 mg daily, Lexapro 20 mg daily, aspirin 81 mg daily, Senna 2 tablets p.o. q.a.m., Neurontin 400 mg p.o. t.i.d., Percocet 5/325 mg 2 tablets q.4 h. p.r.n., magnesium citrate 1 bottle p.o. p.r.n., sliding scale coverage insulin, Wellbutrin 100 mg p.o. daily, and Bactrim DS b.i.d.&quot;&quot;&quot; val data = Seq(text).toDS.toDF(&quot;text&quot;) val result = posology_pipeline.fit(data).transform(data) Results +--------------+---------+ | chunk|ner_label| +--------------+---------+ | insulin| DRUG| | Bactrim| DRUG| | for 14 days| DURATION| | Fragmin| DRUG| | 5000 units| DOSAGE| |subcutaneously| ROUTE| | daily|FREQUENCY| | topically| ROUTE| | b.i.d|FREQUENCY| | Lantus| DRUG| | 40 units| DOSAGE| |subcutaneously| ROUTE| | at bedtime|FREQUENCY| | OxyContin| DRUG| | 30 mg| STRENGTH| | p.o| ROUTE| | q.12 h|FREQUENCY| | folic acid| DRUG| | 1 mg| STRENGTH| | daily|FREQUENCY| +--------------+---------+ Model Information Model Name: ner_posology_langtest Compatibility: Healthcare NLP 5.0.0+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 2.8 MB References trained by in-house dataset Benchmarking label tp fp fn total precision recall f1 DURATION 175.0 25.0 39.0 214.0 0.875 0.8178 0.8454 DRUG 1373.0 153.0 167.0 1540.0 0.8997 0.8916 0.8956 DOSAGE 153.0 52.0 71.0 224.0 0.7463 0.683 0.7133 ROUTE 283.0 29.0 47.0 330.0 0.9071 0.8576 0.8816 FREQUENCY 744.0 109.0 108.0 852.0 0.8722 0.8732 0.8727 FORM 556.0 83.0 76.0 632.0 0.8701 0.8797 0.8749 STRENGTH 826.0 145.0 143.0 969.0 0.8507 0.8524 0.8515 macro - - - - - - 0.8479 micro - - - - - - 0.8680</summary></entry><entry><title type="html">Extract Section Headers and Diagnoses from Clinical Documents</title><link href="/2023/07/26/ner_section_header_diagnosis_en.html" rel="alternate" type="text/html" title="Extract Section Headers and Diagnoses from Clinical Documents" /><published>2023-07-26T00:00:00+00:00</published><updated>2023-07-26T00:00:00+00:00</updated><id>/2023/07/26/ner_section_header_diagnosis_en</id><content type="html" xml:base="/2023/07/26/ner_section_header_diagnosis_en.html">## Description

This NER model extracts valuable information from clinical documents, concentrating on various medical conditions and crucial sections of patient records. With defined labels encompassing diseases such as heart disease, diabetes, and Alzheimer's, it offers deeper insights into diagnosis and treatment patterns.

Definitions of Predicted Entities

`Heart disease`: References to any diagnosed cardiovascular pathology that compromises the heart's structure or function.

`Cerebrovascular disease`: References to diagnosed pathologies that affect cerebral circulation or blood vessels within the brain.

`Oncological Disease`: Refers to confirmed diagnoses associated with malignant growths or tumors, which arise from uncontrolled and abnormal cell division.

`Respiratory disease`: References to diagnosed pathologies that compromise the structure or function of the respiratory tract.

`Obesity`: Diagnosis of the condition characterized by excessive body fat that adversely affects a patient's health. (overweight and BMI will not be extracted under this label).

`Diabetes`: Diagnosis of any form of diabetes mellitus, chronic disease that occurs either when the pancreas does not produce enough insulin or when the body cannot effectively use the insulin it produces.

`Infectious disease`: Diagnosed conditions that pertain to diseases caused by infectious pathogens, such as bacteria, viruses, fungi, or parasites.

`Kidney disease`: Diagnoses related to pathologies that compromise the renal function or structure.

`Mental disorder`: Diagnoses encompassing a wide array of psychiatric or psychological disorders that affect cognitive, emotional, or behavioral function.

`Alzheimer Disease`: Specific diagnosis of Alzheimer's disease, a neurodegenerative disorder characterized by progressive cognitive decline.

`Patient info header`: The section of a document that contains essential details about the patient such as the patient's full name, date of birth, gender, contact information, insurance details and any other pertinent demographic data necessary for accurate patient identification.

`Medical History Header`: Identifies the section of a medical document that contains a summary of the patient's medical conditions. It encompasses details about the patient's overall health, including chronic illnesses, past injuries, and significant events related to their health.

`Clinical History Header`: Identifies section headers that refer to the patient's clinical history, including previous and ongoing healthcare encounters and interventions.

`History of Present Illness Header`: Identifies section headers that refer to the narrative description of the development of the patient's present illness from the first sign or symptom until the present.

`Medications Header`: Identifies section headers that pertain to the patient's current and past medications.

`Allergies Header`: Identifies section headers that detail the patient's known allergies, including drug allergies and other types of hypersensitivity reactions.

`Laboratory Results Header`: Identifies section headers that include results of lab tests, such as blood tests, urine tests, or other laboratory examinations.

`Imaging Studies Header`: Identifies section headers that summarize the findings of imaging studies, such as X-rays, CT scans, or MRI scans.

`Diagnosis Header`: Identifies section headers that list the patient's current and past diagnoses.

`Treatment Plan Header`: Identifies section headers that outline the patient's management plan, including medications, therapies, surgeries, or other interventions.

## Predicted Entities

`Heart disease`, `Cerebrovascular disease`, `Respiratory disease`, `Alzheimer Disease`, `Obesity`, `Oncological Disease`, `Diabetes`, `Infectious disease`, `Kidney disease`, `Mental disorder`, `Patient info header`, `Medical History Header`, `Clinical History Header`, `History of Present Illness Header`, `Medications Header`, `Allergies Header`, `Laboratory Results Header`, `Imaging Studies Header`, `Diagnosis Header`, `Treatment Plan Header`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_section_header_diagnosis_en_5.0.0_3.0_1690389774550.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_section_header_diagnosis_en_5.0.0_3.0_1690389774550.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
documentAssembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)
        
sentenceDetector = SentenceDetector()\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)
 
tokenizer = Tokenizer()\
    .setInputCols([&quot;sentence&quot;])\
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;,&quot;token&quot;])\
    .setOutputCol(&quot;embeddings&quot;)

clinical_ner = MedicalNerModel.pretrained(&quot;ner_section_header_diagnosis&quot;, &quot;en&quot;,&quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;,&quot;token&quot;,&quot;embeddings&quot;])\
    .setOutputCol(&quot;ner&quot;)\
    .setLabelCasing(&quot;upper&quot;) #decide if we want to return the tags in upper or lower case 

ner_converter = NerConverterInternal()\
    .setInputCols([&quot;sentence&quot;,&quot;token&quot;,&quot;ner&quot;])\
    .setOutputCol(&quot;ner_chunk&quot;)

nlpPipeline = Pipeline(stages=[
        documentAssembler,
        sentenceDetector,
        tokenizer,
        word_embeddings,
        clinical_ner,
        ner_converter])


text = '''
Patient Name: Samantha Johnson
Age: 52
Gender: Female
Patient Info:
Name: Samantha Johnson
Age: 52
Gender: Female
Medical History:
Patient has a history of Chronic respiratory disease.
Clinical History:
Patient presented with shortness of breath and chest pain.
Chief Complaint:
Patient complained of chest pain and difficulty breathing.
History of Present Illness:
Patient has been experiencing chest pain and shortness of breath for the past week. Symptoms were relieved by medication at first but became worse over time.
Past Medical History:
Patient has a history of Asthma and was previously diagnosed with Bronchitis.
Medications:
Patient is currently taking Albuterol, Singulair, and Advair for respiratory issues.
Allergies:
Patient has a documented allergy to Penicillin.
Physical Examination:
Patient had diffuse wheezing and decreased breath sounds on lung auscultation. Heart rate and rhythm were regular.
Laboratory Results:
Pulmonary function test results showed a decrease in Forced Expiratory Volume in one second (FEV1).
Imaging Studies:
Chest x-ray showed bilateral infiltrates consistent with Chronic obstructive pulmonary disease (COPD).
Diagnosis:
The patient was diagnosed with COPD exacerbation.
Treatment Plan:
The patient was managed with nebulized bronchodilators, steroid therapy, and oxygen as needed. The patient was discharged with instructions to continue bronchodilator and steroid therapy and to follow up with primary care physician in two weeks.
'''


data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;)

result = nlpPipeline.fit(data).transform(data)
```
```scala
val documentAssembler = new DocumentAssembler()
  .setInputCol(&quot;text&quot;)
  .setOutputCol(&quot;document&quot;)

val sentenceDetector = new SentenceDetector()
  .setInputCols(Array(&quot;document&quot;))
  .setOutputCol(&quot;sentence&quot;)

val tokenizer = new Tokenizer()
  .setInputCols(Array(&quot;sentence&quot;))
  .setOutputCol(&quot;token&quot;)

val word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
  .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
  .setOutputCol(&quot;embeddings&quot;)

val clinical_ner = MedicalNerModel.pretrained(&quot;ner_section_header_diagnosis&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
  .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
  .setOutputCol(&quot;ner&quot;)
  .setLabelCasing(&quot;upper&quot;) // decide if we want to return the tags in upper or lower case

val ner_converter = new NerConverterInternal()
  .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
  .setOutputCol(&quot;ner_chunk&quot;)

val nlpPipeline = new Pipeline()
  .setStages(Array(documentAssembler, sentenceDetector, tokenizer, word_embeddings, clinical_ner, ner_converter))

val text = '''
Patient Name: Samantha Johnson
Age: 52
Gender: Female
Patient Info:
Name: Samantha Johnson
Age: 52
Gender: Female
Medical History:
Patient has a history of Chronic respiratory disease.
Clinical History:
Patient presented with shortness of breath and chest pain.
Chief Complaint:
Patient complained of chest pain and difficulty breathing.
History of Present Illness:
Patient has been experiencing chest pain and shortness of breath for the past week. Symptoms were relieved by medication at first but became worse over time.
Past Medical History:
Patient has a history of Asthma and was previously diagnosed with Bronchitis.
Medications:
Patient is currently taking Albuterol, Singulair, and Advair for respiratory issues.
Allergies:
Patient has a documented allergy to Penicillin.
Physical Examination:
Patient had diffuse wheezing and decreased breath sounds on lung auscultation. Heart rate and rhythm were regular.
Laboratory Results:
Pulmonary function test results showed a decrease in Forced Expiratory Volume in one second (FEV1).
Imaging Studies:
Chest x-ray showed bilateral infiltrates consistent with Chronic obstructive pulmonary disease (COPD).
Diagnosis:
The patient was diagnosed with COPD exacerbation.
Treatment Plan:
The patient was managed with nebulized bronchodilators, steroid therapy, and oxygen as needed. The patient was discharged with instructions to continue bronchodilator and steroid therapy and to follow up with primary care physician in two weeks.
'''

val data: DataFrame = Seq(text).toDS.toDF(&quot;text&quot;)

val result = nlpPipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
|index|chunks|begin|end|sentence\_id|entities|confidence|
|---|---|---|---|---|---|---|
|0|Patient Info|55|66|0|PATIENT\_INFO\_HEADER|0\.91190004|
|1|Medical History|115|129|0|MEDICAL\_HISTORY\_HEADER|0\.8115|
|2|Chronic respiratory disease|157|183|0|RESPIRATORY\_DISEASE|0\.7356667|
|3|Clinical History|186|201|1|CLINICAL\_HISTORY\_HEADER|0\.76595|
|4|Chief Complaint|263|277|2|CHIEF\_COMPLAINT\_HEADER|0\.8484|
|5|History of Present Illness|339|364|3|HISTORY\_PRES\_ILNESS\_HEADER|0\.9933|
|6|Past Medical History|525|544|5|MEDICAL\_HISTORY\_HEADER|0\.7084667|
|7|Asthma|572|577|5|RESPIRATORY\_DISEASE|0\.9994|
|8|Bronchitis|613|622|5|RESPIRATORY\_DISEASE|0\.8429|
|9|Medications|625|635|6|MEDICATIONS\_HEADER|0\.9991|
|10|Allergies|723|731|7|ALLERGIES\_HEADER|0\.9999|
|11|Laboratory Results|919|936|10|LAB\_RESULTS\_HEADER|0\.95780003|
|12|Imaging Studies|1039|1053|11|IMAGING\_HEADER|0\.93614995|
|13|Chronic obstructive pulmonary disease|1113|1149|11|RESPIRATORY\_DISEASE|0\.816625|
|14|COPD|1152|1155|11|RESPIRATORY\_DISEASE|0\.9985|
|15|Diagnosis|1159|1167|12|DIAGNOSIS\_HEADER|0\.9993|
|16|COPD exacerbation|1201|1217|12|RESPIRATORY\_DISEASE|0\.87365|
|17|Treatment Plan|1220|1233|13|TREATMENT\_PLAN\_HEADER|0\.95054996|
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_section_header_diagnosis|
|Compatibility:|Healthcare NLP 5.0.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|3.0 MB|

## References

trained by  in-house datasets

## Benchmarking

```bash
                       label   tp  fp  fn  total  precision   recall       f1
          B-Allergies_header  165   2   3    168   0.988024 0.982143 0.985075
          I-Allergies_header   72   4   2     74   0.947368 0.972973 0.960000
                 B-Alzheimer  372   5   2    374   0.986737 0.994652 0.990679
                 I-Alzheimer  253   3   2    255   0.988281 0.992157 0.990215
   B-Cerebrovascular_disease  298  23  23    321   0.928349 0.928349 0.928349
   I-Cerebrovascular_disease  304  15  11    315   0.952978 0.965079 0.958991
    B-Chief_complaint_header  216   5  22    238   0.977376 0.907563 0.941176
    I-Chief_complaint_header  204   5  27    231   0.976077 0.883117 0.927273
   B-Clinical_history_header  165  40   4    169   0.804878 0.976331 0.882353
   I-Clinical_history_header  165  40   5    170   0.804878 0.970588 0.880000
                  B-Diabetes  806  19  14    820   0.976970 0.982927 0.979939
                  I-Diabetes  742  16   5    747   0.978892 0.993307 0.986047
          B-Diagnosis_header  251   8  12    263   0.969112 0.954373 0.961686
          I-Diagnosis_header   13   5   6     19   0.722222 0.684211 0.702703
             B-Heart_disease  846  24  31    877   0.972414 0.964652 0.968517
             I-Heart_disease  666  25  25    691   0.963821 0.963821 0.963821
B-History_pres_ilness_header  217   2   1    218   0.990868 0.995413 0.993135
I-History_pres_ilness_header  729  12   5    734   0.983806 0.993188 0.988475
            B-Imaging_header  181   6   5    186   0.967914 0.973118 0.970509
            I-Imaging_header  203   6   3    206   0.971292 0.985437 0.978313
        B-Infectious_disease  279  41  19    298   0.871875 0.936242 0.902913
        I-Infectious_disease  278  22  14    292   0.926667 0.952055 0.939189
            B-Kidney_disease  520   1   5    525   0.998081 0.990476 0.994264
            I-Kidney_disease  915   0   6    921   1.000000 0.993485 0.996732
        B-Lab_results_header  213   0  12    225   1.000000 0.946667 0.972603
        I-Lab_results_header  259   1  18    277   0.996154 0.935018 0.964618
    B-Medical_history_header  443  23  21    464   0.950644 0.954741 0.952688
    I-Medical_history_header  751  40  28    779   0.949431 0.964056 0.956688
        B-Medications_header  226   7   9    235   0.969957 0.961702 0.965812
        I-Medications_header   70   8   8     78   0.897436 0.897436 0.897436
           B-Mental_disorder  467  26  28    495   0.947262 0.943434 0.945344
           I-Mental_disorder  320  18  19    339   0.946746 0.943953 0.945347
                   B-Obesity  605   0   8    613   1.000000 0.986949 0.993432
       B-Oncological_disease  398  23   8    406   0.945368 0.980296 0.962515
       I-Oncological_disease  411  12   5    416   0.971631 0.987981 0.979738
       B-Patient_info_header  285   8   5    290   0.972696 0.982759 0.977702
       I-Patient_info_header  291   8   4    295   0.973244 0.986441 0.979798
       B-Respiratory_disease 1077  18  14   1091   0.983562 0.987168 0.985361
       I-Respiratory_disease  585  11  14    599   0.981544 0.976628 0.979079
     B-Treatment_plan_header  263  15   9    272   0.946043 0.966912 0.956364
     I-Treatment_plan_header  263  15   1    264   0.946043 0.996212 0.970480
               Macro-average  15787 562 463  -     0.951869  0.95936  0.95560
               Micro-average  15787 562 463  -     0.965624  0.97150  0.96855
```</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="clinical" /><category term="en" /><category term="ner" /><category term="diagnosis" /><category term="section_header" /><category term="common_diagnosis" /><summary type="html">Description This NER model extracts valuable information from clinical documents, concentrating on various medical conditions and crucial sections of patient records. With defined labels encompassing diseases such as heart disease, diabetes, and Alzheimer’s, it offers deeper insights into diagnosis and treatment patterns. Definitions of Predicted Entities Heart disease: References to any diagnosed cardiovascular pathology that compromises the heart’s structure or function. Cerebrovascular disease: References to diagnosed pathologies that affect cerebral circulation or blood vessels within the brain. Oncological Disease: Refers to confirmed diagnoses associated with malignant growths or tumors, which arise from uncontrolled and abnormal cell division. Respiratory disease: References to diagnosed pathologies that compromise the structure or function of the respiratory tract. Obesity: Diagnosis of the condition characterized by excessive body fat that adversely affects a patient’s health. (overweight and BMI will not be extracted under this label). Diabetes: Diagnosis of any form of diabetes mellitus, chronic disease that occurs either when the pancreas does not produce enough insulin or when the body cannot effectively use the insulin it produces. Infectious disease: Diagnosed conditions that pertain to diseases caused by infectious pathogens, such as bacteria, viruses, fungi, or parasites. Kidney disease: Diagnoses related to pathologies that compromise the renal function or structure. Mental disorder: Diagnoses encompassing a wide array of psychiatric or psychological disorders that affect cognitive, emotional, or behavioral function. Alzheimer Disease: Specific diagnosis of Alzheimer’s disease, a neurodegenerative disorder characterized by progressive cognitive decline. Patient info header: The section of a document that contains essential details about the patient such as the patient’s full name, date of birth, gender, contact information, insurance details and any other pertinent demographic data necessary for accurate patient identification. Medical History Header: Identifies the section of a medical document that contains a summary of the patient’s medical conditions. It encompasses details about the patient’s overall health, including chronic illnesses, past injuries, and significant events related to their health. Clinical History Header: Identifies section headers that refer to the patient’s clinical history, including previous and ongoing healthcare encounters and interventions. History of Present Illness Header: Identifies section headers that refer to the narrative description of the development of the patient’s present illness from the first sign or symptom until the present. Medications Header: Identifies section headers that pertain to the patient’s current and past medications. Allergies Header: Identifies section headers that detail the patient’s known allergies, including drug allergies and other types of hypersensitivity reactions. Laboratory Results Header: Identifies section headers that include results of lab tests, such as blood tests, urine tests, or other laboratory examinations. Imaging Studies Header: Identifies section headers that summarize the findings of imaging studies, such as X-rays, CT scans, or MRI scans. Diagnosis Header: Identifies section headers that list the patient’s current and past diagnoses. Treatment Plan Header: Identifies section headers that outline the patient’s management plan, including medications, therapies, surgeries, or other interventions. Predicted Entities Heart disease, Cerebrovascular disease, Respiratory disease, Alzheimer Disease, Obesity, Oncological Disease, Diabetes, Infectious disease, Kidney disease, Mental disorder, Patient info header, Medical History Header, Clinical History Header, History of Present Illness Header, Medications Header, Allergies Header, Laboratory Results Header, Imaging Studies Header, Diagnosis Header, Treatment Plan Header Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU documentAssembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentenceDetector = SentenceDetector()\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer()\ .setInputCols([&quot;sentence&quot;])\ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;,&quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) clinical_ner = MedicalNerModel.pretrained(&quot;ner_section_header_diagnosis&quot;, &quot;en&quot;,&quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;,&quot;token&quot;,&quot;embeddings&quot;])\ .setOutputCol(&quot;ner&quot;)\ .setLabelCasing(&quot;upper&quot;) #decide if we want to return the tags in upper or lower case ner_converter = NerConverterInternal()\ .setInputCols([&quot;sentence&quot;,&quot;token&quot;,&quot;ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;) nlpPipeline = Pipeline(stages=[ documentAssembler, sentenceDetector, tokenizer, word_embeddings, clinical_ner, ner_converter]) text = ''' Patient Name: Samantha Johnson Age: 52 Gender: Female Patient Info: Name: Samantha Johnson Age: 52 Gender: Female Medical History: Patient has a history of Chronic respiratory disease. Clinical History: Patient presented with shortness of breath and chest pain. Chief Complaint: Patient complained of chest pain and difficulty breathing. History of Present Illness: Patient has been experiencing chest pain and shortness of breath for the past week. Symptoms were relieved by medication at first but became worse over time. Past Medical History: Patient has a history of Asthma and was previously diagnosed with Bronchitis. Medications: Patient is currently taking Albuterol, Singulair, and Advair for respiratory issues. Allergies: Patient has a documented allergy to Penicillin. Physical Examination: Patient had diffuse wheezing and decreased breath sounds on lung auscultation. Heart rate and rhythm were regular. Laboratory Results: Pulmonary function test results showed a decrease in Forced Expiratory Volume in one second (FEV1). Imaging Studies: Chest x-ray showed bilateral infiltrates consistent with Chronic obstructive pulmonary disease (COPD). Diagnosis: The patient was diagnosed with COPD exacerbation. Treatment Plan: The patient was managed with nebulized bronchodilators, steroid therapy, and oxygen as needed. The patient was discharged with instructions to continue bronchodilator and steroid therapy and to follow up with primary care physician in two weeks. ''' data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;) result = nlpPipeline.fit(data).transform(data) val documentAssembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentenceDetector = new SentenceDetector() .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(Array(&quot;sentence&quot;)) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val clinical_ner = MedicalNerModel.pretrained(&quot;ner_section_header_diagnosis&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) .setLabelCasing(&quot;upper&quot;) // decide if we want to return the tags in upper or lower case val ner_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val nlpPipeline = new Pipeline() .setStages(Array(documentAssembler, sentenceDetector, tokenizer, word_embeddings, clinical_ner, ner_converter)) val text = ''' Patient Name: Samantha Johnson Age: 52 Gender: Female Patient Info: Name: Samantha Johnson Age: 52 Gender: Female Medical History: Patient has a history of Chronic respiratory disease. Clinical History: Patient presented with shortness of breath and chest pain. Chief Complaint: Patient complained of chest pain and difficulty breathing. History of Present Illness: Patient has been experiencing chest pain and shortness of breath for the past week. Symptoms were relieved by medication at first but became worse over time. Past Medical History: Patient has a history of Asthma and was previously diagnosed with Bronchitis. Medications: Patient is currently taking Albuterol, Singulair, and Advair for respiratory issues. Allergies: Patient has a documented allergy to Penicillin. Physical Examination: Patient had diffuse wheezing and decreased breath sounds on lung auscultation. Heart rate and rhythm were regular. Laboratory Results: Pulmonary function test results showed a decrease in Forced Expiratory Volume in one second (FEV1). Imaging Studies: Chest x-ray showed bilateral infiltrates consistent with Chronic obstructive pulmonary disease (COPD). Diagnosis: The patient was diagnosed with COPD exacerbation. Treatment Plan: The patient was managed with nebulized bronchodilators, steroid therapy, and oxygen as needed. The patient was discharged with instructions to continue bronchodilator and steroid therapy and to follow up with primary care physician in two weeks. ''' val data: DataFrame = Seq(text).toDS.toDF(&quot;text&quot;) val result = nlpPipeline.fit(data).transform(data) Results |index|chunks|begin|end|sentence\_id|entities|confidence| |---|---|---|---|---|---|---| |0|Patient Info|55|66|0|PATIENT\_INFO\_HEADER|0\.91190004| |1|Medical History|115|129|0|MEDICAL\_HISTORY\_HEADER|0\.8115| |2|Chronic respiratory disease|157|183|0|RESPIRATORY\_DISEASE|0\.7356667| |3|Clinical History|186|201|1|CLINICAL\_HISTORY\_HEADER|0\.76595| |4|Chief Complaint|263|277|2|CHIEF\_COMPLAINT\_HEADER|0\.8484| |5|History of Present Illness|339|364|3|HISTORY\_PRES\_ILNESS\_HEADER|0\.9933| |6|Past Medical History|525|544|5|MEDICAL\_HISTORY\_HEADER|0\.7084667| |7|Asthma|572|577|5|RESPIRATORY\_DISEASE|0\.9994| |8|Bronchitis|613|622|5|RESPIRATORY\_DISEASE|0\.8429| |9|Medications|625|635|6|MEDICATIONS\_HEADER|0\.9991| |10|Allergies|723|731|7|ALLERGIES\_HEADER|0\.9999| |11|Laboratory Results|919|936|10|LAB\_RESULTS\_HEADER|0\.95780003| |12|Imaging Studies|1039|1053|11|IMAGING\_HEADER|0\.93614995| |13|Chronic obstructive pulmonary disease|1113|1149|11|RESPIRATORY\_DISEASE|0\.816625| |14|COPD|1152|1155|11|RESPIRATORY\_DISEASE|0\.9985| |15|Diagnosis|1159|1167|12|DIAGNOSIS\_HEADER|0\.9993| |16|COPD exacerbation|1201|1217|12|RESPIRATORY\_DISEASE|0\.87365| |17|Treatment Plan|1220|1233|13|TREATMENT\_PLAN\_HEADER|0\.95054996| Model Information Model Name: ner_section_header_diagnosis Compatibility: Healthcare NLP 5.0.0+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 3.0 MB References trained by in-house datasets Benchmarking label tp fp fn total precision recall f1 B-Allergies_header 165 2 3 168 0.988024 0.982143 0.985075 I-Allergies_header 72 4 2 74 0.947368 0.972973 0.960000 B-Alzheimer 372 5 2 374 0.986737 0.994652 0.990679 I-Alzheimer 253 3 2 255 0.988281 0.992157 0.990215 B-Cerebrovascular_disease 298 23 23 321 0.928349 0.928349 0.928349 I-Cerebrovascular_disease 304 15 11 315 0.952978 0.965079 0.958991 B-Chief_complaint_header 216 5 22 238 0.977376 0.907563 0.941176 I-Chief_complaint_header 204 5 27 231 0.976077 0.883117 0.927273 B-Clinical_history_header 165 40 4 169 0.804878 0.976331 0.882353 I-Clinical_history_header 165 40 5 170 0.804878 0.970588 0.880000 B-Diabetes 806 19 14 820 0.976970 0.982927 0.979939 I-Diabetes 742 16 5 747 0.978892 0.993307 0.986047 B-Diagnosis_header 251 8 12 263 0.969112 0.954373 0.961686 I-Diagnosis_header 13 5 6 19 0.722222 0.684211 0.702703 B-Heart_disease 846 24 31 877 0.972414 0.964652 0.968517 I-Heart_disease 666 25 25 691 0.963821 0.963821 0.963821 B-History_pres_ilness_header 217 2 1 218 0.990868 0.995413 0.993135 I-History_pres_ilness_header 729 12 5 734 0.983806 0.993188 0.988475 B-Imaging_header 181 6 5 186 0.967914 0.973118 0.970509 I-Imaging_header 203 6 3 206 0.971292 0.985437 0.978313 B-Infectious_disease 279 41 19 298 0.871875 0.936242 0.902913 I-Infectious_disease 278 22 14 292 0.926667 0.952055 0.939189 B-Kidney_disease 520 1 5 525 0.998081 0.990476 0.994264 I-Kidney_disease 915 0 6 921 1.000000 0.993485 0.996732 B-Lab_results_header 213 0 12 225 1.000000 0.946667 0.972603 I-Lab_results_header 259 1 18 277 0.996154 0.935018 0.964618 B-Medical_history_header 443 23 21 464 0.950644 0.954741 0.952688 I-Medical_history_header 751 40 28 779 0.949431 0.964056 0.956688 B-Medications_header 226 7 9 235 0.969957 0.961702 0.965812 I-Medications_header 70 8 8 78 0.897436 0.897436 0.897436 B-Mental_disorder 467 26 28 495 0.947262 0.943434 0.945344 I-Mental_disorder 320 18 19 339 0.946746 0.943953 0.945347 B-Obesity 605 0 8 613 1.000000 0.986949 0.993432 B-Oncological_disease 398 23 8 406 0.945368 0.980296 0.962515 I-Oncological_disease 411 12 5 416 0.971631 0.987981 0.979738 B-Patient_info_header 285 8 5 290 0.972696 0.982759 0.977702 I-Patient_info_header 291 8 4 295 0.973244 0.986441 0.979798 B-Respiratory_disease 1077 18 14 1091 0.983562 0.987168 0.985361 I-Respiratory_disease 585 11 14 599 0.981544 0.976628 0.979079 B-Treatment_plan_header 263 15 9 272 0.946043 0.966912 0.956364 I-Treatment_plan_header 263 15 1 264 0.946043 0.996212 0.970480 Macro-average 15787 562 463 - 0.951869 0.95936 0.95560 Micro-average 15787 562 463 - 0.965624 0.97150 0.96855</summary></entry><entry><title type="html">Clinical Deidentification</title><link href="/2023/07/11/clinical_deidentification_en.html" rel="alternate" type="text/html" title="Clinical Deidentification" /><published>2023-07-11T00:00:00+00:00</published><updated>2023-07-11T00:00:00+00:00</updated><id>/2023/07/11/clinical_deidentification_en</id><content type="html" xml:base="/2023/07/11/clinical_deidentification_en.html">## Description

This pipeline can be used to deidentify PHI information from medical texts. The PHI information will be masked and obfuscated in the resulting text. The pipeline can mask and obfuscate `AGE`, `CONTACT`, `DATE`, `ID`, `LOCATION`, `NAME`, `PROFESSION`, `CITY`, `COUNTRY`, `DOCTOR`, `HOSPITAL`, `IDNUM`, `MEDICALRECORD`, `ORGANIZATION`, `PATIENT`, `PHONE`, `PROFESSION`,  `STREET`, `USERNAME`, `ZIP`, `ACCOUNT`, `LICENSE`, `VIN`, `SSN`, `DLN`, `PLATE`, `IPADDR` entities.

{:.btn-box}
[Live Demo](https://demo.johnsnowlabs.com/healthcare/DEID_PHI_TEXT_MULTI/){:.button.button-orange}
[Open in Colab](https://colab.research.google.com/github/JohnSnowLabs/spark-nlp-workshop/blob/master/tutorials/streamlit_notebooks/healthcare/DEID_PHI_TEXT_MULTI.ipynb){:.button.button-orange.button-orange-trans.co.button-icon}
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/clinical_deidentification_en_5.0.0_3.2_1689070825101.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/clinical_deidentification_en_5.0.0_3.2_1689070825101.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
from sparknlp.pretrained import PretrainedPipeline

deid_pipeline = PretrainedPipeline(&quot;clinical_deidentification&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

deid_pipeline.annotate(&quot;&quot;&quot;Record date : 2093-01-13, Name : Hendrickson, ORA, 25 years-old, #719435. IP: 203.120.223.13, the driver's license no:A334455B. The SSN: 324598674 and e-mail: hale@gmail.com. Patient's VIN : 1HGBH41JXMN109286. Date : 01/13/93, PCP : David Hale.&quot;&quot;&quot;)
```
```scala
import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline

val deid_pipeline = PretrainedPipeline(&quot;clinical_deidentification&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

val result = deid_pipeline.annotate(&quot;&quot;&quot;Record date : 2093-01-13, Name : Hendrickson, ORA, 25 years-old, #719435. IP: 203.120.223.13, the driver's license no:A334455B. The SSN: 324598674 and e-mail: hale@gmail.com. Patient's VIN : 1HGBH41JXMN109286. Date : 01/13/93, PCP : David Hale.&quot;&quot;&quot;)
```
&lt;/div&gt;

## Results

```bash
{'masked': ['Record date : &lt;DATE&gt;, Name : &lt;PATIENT&gt;, &lt;AGE&gt; years-old, &lt;MEDICALRECORD&gt;.',
  &quot;IP: &lt;IPADDR&gt;, the driver's license &lt;DLN&gt;.&quot;,
  'The SSN: &lt;SSN&gt; and e-mail: &lt;EMAIL&gt;.',
  &quot;Patient's VIN : &lt;VIN&gt;.&quot;,
  'Date : &lt;DATE&gt;, PCP : &lt;DOCTOR&gt;.'],
 'obfuscated': ['Record date : 2093-02-25, Name : Albertine Grates, 30 years-old, #100581.',
  &quot;IP: 003.003.003.003, the driver's license EL:I131599D.&quot;,
  'The SSN: 060014689 and e-mail: Tory@yahoo.com.',
  &quot;Patient's VIN : 8JFSU78UTYV898505.&quot;,
  'Date : 02/25/93, PCP : Elvera Maria.'],
 'ner_chunk': ['2093-01-13',
  'Hendrickson, ORA',
  '25',
  '#719435',
  '203.120.223.13',
  'no:A334455B',
  '324598674',
  'hale@gmail.com',
  '1HGBH41JXMN109286',
  '01/13/93',
  'David Hale'],
 'masked_fixed_length_chars': ['Record date : ****, Name : ****, **** years-old, ****.',
  &quot;IP: ****, the driver's license ****.&quot;,
  'The SSN: **** and e-mail: ****.',
  &quot;Patient's VIN : ****.&quot;,
  'Date : ****, PCP : ****.'],
 'sentence': ['Record date : 2093-01-13, Name : Hendrickson, ORA, 25 years-old, #719435.',
  &quot;IP: 203.120.223.13, the driver's license no:A334455B.&quot;,
  'The SSN: 324598674 and e-mail: hale@gmail.com.',
  &quot;Patient's VIN : 1HGBH41JXMN109286.&quot;,
  'Date : 01/13/93, PCP : David Hale.'],
 'masked_with_chars': ['Record date : [********], Name : [**************], ** years-old, [*****].',
  &quot;IP: [************], the driver's license [*********].&quot;,
  'The SSN: [*******] and e-mail: [************].',
  &quot;Patient's VIN : [***************].&quot;,
  'Date : [******], PCP : [********].']}
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|clinical_deidentification|
|Type:|pipeline|
|Compatibility:|Healthcare NLP 5.0.0+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|1.7 GB|

## Included Models

- DocumentAssembler
- SentenceDetectorDLModel
- TokenizerModel
- WordEmbeddingsModel
- MedicalNerModel
- NerConverter
- MedicalNerModel
- NerConverter
- ChunkMergeModel
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- TextMatcherModel
- ContextualParserModel
- RegexMatcherModel
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- ContextualParserModel
- ChunkMergeModel
- ChunkMergeModel
- DeIdentificationModel
- DeIdentificationModel
- DeIdentificationModel
- DeIdentificationModel
- Finisher</content><author><name>John Snow Labs</name></author><category term="deidentification" /><category term="licensed" /><category term="en" /><category term="pipeline" /><category term="clinical" /><category term="deid" /><summary type="html">Description This pipeline can be used to deidentify PHI information from medical texts. The PHI information will be masked and obfuscated in the resulting text. The pipeline can mask and obfuscate AGE, CONTACT, DATE, ID, LOCATION, NAME, PROFESSION, CITY, COUNTRY, DOCTOR, HOSPITAL, IDNUM, MEDICALRECORD, ORGANIZATION, PATIENT, PHONE, PROFESSION, STREET, USERNAME, ZIP, ACCOUNT, LICENSE, VIN, SSN, DLN, PLATE, IPADDR entities. Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU from sparknlp.pretrained import PretrainedPipeline deid_pipeline = PretrainedPipeline(&quot;clinical_deidentification&quot;, &quot;en&quot;, &quot;clinical/models&quot;) deid_pipeline.annotate(&quot;&quot;&quot;Record date : 2093-01-13, Name : Hendrickson, ORA, 25 years-old, #719435. IP: 203.120.223.13, the driver's license no:A334455B. The SSN: 324598674 and e-mail: hale@gmail.com. Patient's VIN : 1HGBH41JXMN109286. Date : 01/13/93, PCP : David Hale.&quot;&quot;&quot;) import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline val deid_pipeline = PretrainedPipeline(&quot;clinical_deidentification&quot;, &quot;en&quot;, &quot;clinical/models&quot;) val result = deid_pipeline.annotate(&quot;&quot;&quot;Record date : 2093-01-13, Name : Hendrickson, ORA, 25 years-old, #719435. IP: 203.120.223.13, the driver's license no:A334455B. The SSN: 324598674 and e-mail: hale@gmail.com. Patient's VIN : 1HGBH41JXMN109286. Date : 01/13/93, PCP : David Hale.&quot;&quot;&quot;) Results {'masked': ['Record date : &amp;lt;DATE&amp;gt;, Name : &amp;lt;PATIENT&amp;gt;, &amp;lt;AGE&amp;gt; years-old, &amp;lt;MEDICALRECORD&amp;gt;.', &quot;IP: &amp;lt;IPADDR&amp;gt;, the driver's license &amp;lt;DLN&amp;gt;.&quot;, 'The SSN: &amp;lt;SSN&amp;gt; and e-mail: &amp;lt;EMAIL&amp;gt;.', &quot;Patient's VIN : &amp;lt;VIN&amp;gt;.&quot;, 'Date : &amp;lt;DATE&amp;gt;, PCP : &amp;lt;DOCTOR&amp;gt;.'], 'obfuscated': ['Record date : 2093-02-25, Name : Albertine Grates, 30 years-old, #100581.', &quot;IP: 003.003.003.003, the driver's license EL:I131599D.&quot;, 'The SSN: 060014689 and e-mail: Tory@yahoo.com.', &quot;Patient's VIN : 8JFSU78UTYV898505.&quot;, 'Date : 02/25/93, PCP : Elvera Maria.'], 'ner_chunk': ['2093-01-13', 'Hendrickson, ORA', '25', '#719435', '203.120.223.13', 'no:A334455B', '324598674', 'hale@gmail.com', '1HGBH41JXMN109286', '01/13/93', 'David Hale'], 'masked_fixed_length_chars': ['Record date : ****, Name : ****, **** years-old, ****.', &quot;IP: ****, the driver's license ****.&quot;, 'The SSN: **** and e-mail: ****.', &quot;Patient's VIN : ****.&quot;, 'Date : ****, PCP : ****.'], 'sentence': ['Record date : 2093-01-13, Name : Hendrickson, ORA, 25 years-old, #719435.', &quot;IP: 203.120.223.13, the driver's license no:A334455B.&quot;, 'The SSN: 324598674 and e-mail: hale@gmail.com.', &quot;Patient's VIN : 1HGBH41JXMN109286.&quot;, 'Date : 01/13/93, PCP : David Hale.'], 'masked_with_chars': ['Record date : [********], Name : [**************], ** years-old, [*****].', &quot;IP: [************], the driver's license [*********].&quot;, 'The SSN: [*******] and e-mail: [************].', &quot;Patient's VIN : [***************].&quot;, 'Date : [******], PCP : [********].']} Model Information Model Name: clinical_deidentification Type: pipeline Compatibility: Healthcare NLP 5.0.0+ License: Licensed Edition: Official Language: en Size: 1.7 GB Included Models DocumentAssembler SentenceDetectorDLModel TokenizerModel WordEmbeddingsModel MedicalNerModel NerConverter MedicalNerModel NerConverter ChunkMergeModel ContextualParserModel ContextualParserModel ContextualParserModel ContextualParserModel ContextualParserModel ContextualParserModel TextMatcherModel ContextualParserModel RegexMatcherModel ContextualParserModel ContextualParserModel ContextualParserModel ContextualParserModel ContextualParserModel ContextualParserModel ChunkMergeModel ChunkMergeModel DeIdentificationModel DeIdentificationModel DeIdentificationModel DeIdentificationModel Finisher</summary></entry></feed>