<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-09-07T18:36:53+00:00</updated><id>/feed.xml</id><title type="html">Spark NLP</title><subtitle>High Performance NLP with Apache Spark
</subtitle><author><name>{&quot;type&quot;=&gt;nil, &quot;name&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;avatar&quot;=&gt;nil, &quot;bio&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;facebook&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;weibo&quot;=&gt;nil, &quot;googleplus&quot;=&gt;nil, &quot;telegram&quot;=&gt;nil, &quot;medium&quot;=&gt;nil, &quot;zhihu&quot;=&gt;nil, &quot;douban&quot;=&gt;nil, &quot;linkedin&quot;=&gt;nil, &quot;github&quot;=&gt;nil, &quot;npm&quot;=&gt;nil}</name></author><entry><title type="html">Extract Cancer Therapies and Granular Posology Information (langtest)</title><link href="/2023/09/04/ner_oncology_posology_langtest_en.html" rel="alternate" type="text/html" title="Extract Cancer Therapies and Granular Posology Information (langtest)" /><published>2023-09-04T00:00:00+00:00</published><updated>2023-09-04T00:00:00+00:00</updated><id>/2023/09/04/ner_oncology_posology_langtest_en</id><content type="html" xml:base="/2023/09/04/ner_oncology_posology_langtest_en.html">## Description

This model extracts cancer therapies (Cancer_Surgery, Radiotherapy, and Cancer_Therapy) and posology information at a granular level. It is the version of [ner_oncology_posology](https://nlp.johnsnowlabs.com/2022/11/24/ner_oncology_posology_en.html) model augmented with `langtest` library.

Definitions of Predicted Entities:

- `Cancer_Surgery`: Terms that indicate surgery as a form of cancer treatment.
- `Cancer_Therapy`: Any cancer treatment mentioned in text, excluding surgeries and radiotherapy.
- `Cycle_Count`: The total number of cycles being administered of an oncological therapy (e.g. &quot;5 cycles&quot;). 
- `Cycle_Day`: References to the day of the cycle of oncological therapy (e.g. &quot;day 5&quot;).
- `Cycle_Number`: The number of the cycle of an oncological therapy that is being applied (e.g. &quot;third cycle&quot;).
- `Dosage`: The quantity prescribed by the physician for an active ingredient.
- `Duration`: Words indicating the duration of a treatment (e.g. &quot;for 2 weeks&quot;).
- `Frequency`: Words indicating the frequency of treatment administration (e.g. &quot;daily&quot; or &quot;bid&quot;).
- `Radiotherapy`: Terms that indicate the use of Radiotherapy.
- `Radiation_Dose`: Dose used in radiotherapy.
- `Route`: Words indicating the type of administration route (such as &quot;PO&quot; or &quot;transdermal&quot;).

## Predicted Entities

`Cancer_Surgery`, `Cancer_Therapy`, `Cycle_Count`, `Cycle_Day`, `Cycle_Number`, `Dosage`, `Duration`, `Frequency`, `Radiotherapy`, `Radiation_Dose`, `Route`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_oncology_posology_langtest_en_5.0.2_3.0_1693828527870.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_oncology_posology_langtest_en_5.0.2_3.0_1693828527870.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)                

ner = MedicalNerModel.pretrained(&quot;ner_oncology_posology_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverter() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \
    .setOutputCol(&quot;ner_chunk&quot;)

pipeline = Pipeline(stages=[document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter])

data = spark.createDataFrame([[&quot;The patient underwent a regimen consisting of adriamycin (60 mg/m2) and cyclophosphamide (600 mg/m2) over six courses. She is currently receiving his second cycle of chemotherapy and is in good overall condition.&quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
    
val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)
    
val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)                
    
val ner = MedicalNerModel.pretrained(&quot;ner_oncology_posology_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)
    
val ner_converter = new NerConverter()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)
  
val pipeline = new Pipeline().setStages(Array(
                            document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter))    

val data = Seq(&quot;The patient underwent a regimen consisting of adriamycin (60 mg/m2) and cyclophosphamide (600 mg/m2) over six courses. She is currently receiving his second cycle of chemotherapy and is in good overall condition.&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+----------------+--------------+
|chunk           |ner_label     |
+----------------+--------------+
|adriamycin      |Cancer_Therapy|
|60 mg/m2        |Dosage        |
|cyclophosphamide|Cancer_Therapy|
|600 mg/m2       |Dosage        |
|six courses     |Cycle_Count   |
|second cycle    |Cycle_Number  |
|chemotherapy    |Cancer_Therapy|
+----------------+--------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_oncology_posology_langtest|
|Compatibility:|Healthcare NLP 5.0.2+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|14.7 MB|

## References

In-house annotated oncology case reports.

## Benchmarking

```bash
label             precision  recall  f1-score  support 
B-Cancer_Therapy  0.93       0.96    0.94      1185    
B-Dosage          0.90       0.88    0.89      258     
I-Dosage          0.90       0.94    0.92      752     
B-Frequency       0.92       0.92    0.92      157     
I-Frequency       0.92       0.86    0.89      218     
B-Cancer_Surgery  0.83       0.85    0.84      517     
I-Cancer_Therapy  0.81       0.86    0.83      507     
B-Radiotherapy    0.91       0.86    0.89      170     
I-Radiotherapy    0.91       0.75    0.82      120     
B-Duration        0.87       0.79    0.83      280     
I-Duration        0.89       0.85    0.87      537     
I-Cancer_Surgery  0.75       0.78    0.77      370     
B-Cycle_Number    0.89       0.61    0.72      41      
I-Cycle_Number    0.89       0.61    0.72      41      
B-Cycle_Count     0.82       0.87    0.84      128     
I-Cycle_Count     0.83       0.88    0.86      115     
I-Radiation_Dose  0.93       0.86    0.89      77      
B-Cycle_Day       0.85       0.85    0.85      124     
B-Route           0.91       0.92    0.92      114     
I-Cycle_Day       0.87       0.77    0.82      177     
I-Route           0.81       0.72    0.76      29      
B-Radiation_Dose  0.93       0.95    0.94      43      
micro-avg         0.88       0.88    0.88      5960    
macro-avg         0.88       0.83    0.85      5960    
weighted-avg      0.88       0.88    0.88      5960    
```</content><author><name>John Snow Labs</name></author><category term="en" /><category term="ner" /><category term="licensed" /><category term="clinical" /><category term="oncology" /><category term="posology" /><category term="langtest" /><summary type="html">Description This model extracts cancer therapies (Cancer_Surgery, Radiotherapy, and Cancer_Therapy) and posology information at a granular level. It is the version of ner_oncology_posology model augmented with langtest library. Definitions of Predicted Entities: Cancer_Surgery: Terms that indicate surgery as a form of cancer treatment. Cancer_Therapy: Any cancer treatment mentioned in text, excluding surgeries and radiotherapy. Cycle_Count: The total number of cycles being administered of an oncological therapy (e.g. “5 cycles”). Cycle_Day: References to the day of the cycle of oncological therapy (e.g. “day 5”). Cycle_Number: The number of the cycle of an oncological therapy that is being applied (e.g. “third cycle”). Dosage: The quantity prescribed by the physician for an active ingredient. Duration: Words indicating the duration of a treatment (e.g. “for 2 weeks”). Frequency: Words indicating the frequency of treatment administration (e.g. “daily” or “bid”). Radiotherapy: Terms that indicate the use of Radiotherapy. Radiation_Dose: Dose used in radiotherapy. Route: Words indicating the type of administration route (such as “PO” or “transdermal”). Predicted Entities Cancer_Surgery, Cancer_Therapy, Cycle_Count, Cycle_Day, Cycle_Number, Dosage, Duration, Frequency, Radiotherapy, Radiation_Dose, Route Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_oncology_posology_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverter() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;) pipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter]) data = spark.createDataFrame([[&quot;The patient underwent a regimen consisting of adriamycin (60 mg/m2) and cyclophosphamide (600 mg/m2) over six courses. She is currently receiving his second cycle of chemotherapy and is in good overall condition.&quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_oncology_posology_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverter() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pipeline = new Pipeline().setStages(Array( document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter)) val data = Seq(&quot;The patient underwent a regimen consisting of adriamycin (60 mg/m2) and cyclophosphamide (600 mg/m2) over six courses. She is currently receiving his second cycle of chemotherapy and is in good overall condition.&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +----------------+--------------+ |chunk |ner_label | +----------------+--------------+ |adriamycin |Cancer_Therapy| |60 mg/m2 |Dosage | |cyclophosphamide|Cancer_Therapy| |600 mg/m2 |Dosage | |six courses |Cycle_Count | |second cycle |Cycle_Number | |chemotherapy |Cancer_Therapy| +----------------+--------------+ Model Information Model Name: ner_oncology_posology_langtest Compatibility: Healthcare NLP 5.0.2+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 14.7 MB References In-house annotated oncology case reports. Benchmarking label precision recall f1-score support B-Cancer_Therapy 0.93 0.96 0.94 1185 B-Dosage 0.90 0.88 0.89 258 I-Dosage 0.90 0.94 0.92 752 B-Frequency 0.92 0.92 0.92 157 I-Frequency 0.92 0.86 0.89 218 B-Cancer_Surgery 0.83 0.85 0.84 517 I-Cancer_Therapy 0.81 0.86 0.83 507 B-Radiotherapy 0.91 0.86 0.89 170 I-Radiotherapy 0.91 0.75 0.82 120 B-Duration 0.87 0.79 0.83 280 I-Duration 0.89 0.85 0.87 537 I-Cancer_Surgery 0.75 0.78 0.77 370 B-Cycle_Number 0.89 0.61 0.72 41 I-Cycle_Number 0.89 0.61 0.72 41 B-Cycle_Count 0.82 0.87 0.84 128 I-Cycle_Count 0.83 0.88 0.86 115 I-Radiation_Dose 0.93 0.86 0.89 77 B-Cycle_Day 0.85 0.85 0.85 124 B-Route 0.91 0.92 0.92 114 I-Cycle_Day 0.87 0.77 0.82 177 I-Route 0.81 0.72 0.76 29 B-Radiation_Dose 0.93 0.95 0.94 43 micro-avg 0.88 0.88 0.88 5960 macro-avg 0.88 0.83 0.85 5960 weighted-avg 0.88 0.88 0.88 5960</summary></entry><entry><title type="html">Extract Mentions of Response to Cancer Treatment (langtest)</title><link href="/2023/09/04/ner_oncology_response_to_treatment_langtest_en.html" rel="alternate" type="text/html" title="Extract Mentions of Response to Cancer Treatment (langtest)" /><published>2023-09-04T00:00:00+00:00</published><updated>2023-09-04T00:00:00+00:00</updated><id>/2023/09/04/ner_oncology_response_to_treatment_langtest_en</id><content type="html" xml:base="/2023/09/04/ner_oncology_response_to_treatment_langtest_en.html">## Description

This model extracts entities related to the patient's response to the oncology treatment, including clinical response and changes in tumor size. It is the version of [ner_oncology_response_to_treatment](https://nlp.johnsnowlabs.com/2022/11/24/ner_oncology_response_to_treatment_en.html) model augmented with `langtest` library.

Definitions of Predicted Entities:

- `Line_Of_Therapy`: Explicit references to the line of therapy of an oncological therapy (e.g. &quot;first-line treatment&quot;).
- `Response_To_Treatment`: Terms related to clinical progress of the patient related to cancer treatment, including &quot;recurrence&quot;, &quot;bad response&quot; or &quot;improvement&quot;.
- `Size_Trend`: Terms related to the changes in the size of the tumor (such as &quot;growth&quot; or &quot;reduced in size&quot;).

## Predicted Entities

`Line_Of_Therapy`, `Response_To_Treatment`, `Size_Trend`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_oncology_response_to_treatment_langtest_en_5.0.2_3.0_1693826409453.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_oncology_response_to_treatment_langtest_en_5.0.2_3.0_1693826409453.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)\
    .setSplitChars(['-'])

word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)                

ner = MedicalNerModel.pretrained(&quot;ner_oncology_response_to_treatment_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverter() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \
    .setOutputCol(&quot;ner_chunk&quot;)

pipeline = Pipeline(stages=[document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter])

data = spark.createDataFrame([[&quot;She completed her first-line therapy, but some months later there was recurrence of the breast cancer. &quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
    
val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)
    .setSplitChars(['-'])
    
val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)                
    
val ner = MedicalNerModel.pretrained(&quot;ner_oncology_response_to_treatment_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)
    
val ner_converter = new NerConverter()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

        
val pipeline = new Pipeline().setStages(Array(document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter))    

val data = Seq(&quot;She completed her first-line therapy, but some months later there was recurrence of the breast cancer. &quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+----------+---------------------+
|chunk     |ner_label            |
+----------+---------------------+
|first-line|Line_Of_Therapy      |
|recurrence|Response_To_Treatment|
+----------+---------------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_oncology_response_to_treatment_langtest|
|Compatibility:|Healthcare NLP 5.0.2+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|14.7 MB|

## References

In-house annotated oncology case reports.

## Benchmarking

```bash
label                    precision  recall  f1-score  support 
B-Response_To_Treatment  0.83       0.83    0.83      289     
I-Response_To_Treatment  0.74       0.77    0.76      209     
B-Size_Trend             0.65       0.69    0.67      101     
I-Size_Trend             0.61       0.69    0.65      49      
B-Line_Of_Therapy        1.00       0.97    0.99      36      
I-Line_Of_Therapy        0.95       0.97    0.96      65      
micro-avg                0.78       0.81    0.79      749     
macro-avg                0.80       0.82    0.81      749     
weighted-avg             0.78       0.81    0.79      749     
```</content><author><name>John Snow Labs</name></author><category term="en" /><category term="ner" /><category term="licensed" /><category term="clinical" /><category term="oncology" /><category term="langtest" /><summary type="html">Description This model extracts entities related to the patient’s response to the oncology treatment, including clinical response and changes in tumor size. It is the version of ner_oncology_response_to_treatment model augmented with langtest library. Definitions of Predicted Entities: Line_Of_Therapy: Explicit references to the line of therapy of an oncological therapy (e.g. “first-line treatment”). Response_To_Treatment: Terms related to clinical progress of the patient related to cancer treatment, including “recurrence”, “bad response” or “improvement”. Size_Trend: Terms related to the changes in the size of the tumor (such as “growth” or “reduced in size”). Predicted Entities Line_Of_Therapy, Response_To_Treatment, Size_Trend Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;)\ .setSplitChars(['-']) word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_oncology_response_to_treatment_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverter() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;) pipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter]) data = spark.createDataFrame([[&quot;She completed her first-line therapy, but some months later there was recurrence of the breast cancer. &quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) .setSplitChars(['-']) val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_oncology_response_to_treatment_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverter() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter)) val data = Seq(&quot;She completed her first-line therapy, but some months later there was recurrence of the breast cancer. &quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +----------+---------------------+ |chunk |ner_label | +----------+---------------------+ |first-line|Line_Of_Therapy | |recurrence|Response_To_Treatment| +----------+---------------------+ Model Information Model Name: ner_oncology_response_to_treatment_langtest Compatibility: Healthcare NLP 5.0.2+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 14.7 MB References In-house annotated oncology case reports. Benchmarking label precision recall f1-score support B-Response_To_Treatment 0.83 0.83 0.83 289 I-Response_To_Treatment 0.74 0.77 0.76 209 B-Size_Trend 0.65 0.69 0.67 101 I-Size_Trend 0.61 0.69 0.65 49 B-Line_Of_Therapy 1.00 0.97 0.99 36 I-Line_Of_Therapy 0.95 0.97 0.96 65 micro-avg 0.78 0.81 0.79 749 macro-avg 0.80 0.82 0.81 749 weighted-avg 0.78 0.81 0.79 749</summary></entry><entry><title type="html">Legal Text Generation (MPRE)</title><link href="/2023/09/04/leggen_flant5_mpre_en.html" rel="alternate" type="text/html" title="Legal Text Generation (MPRE)" /><published>2023-09-04T00:00:00+00:00</published><updated>2023-09-04T00:00:00+00:00</updated><id>/2023/09/04/leggen_flant5_mpre_en</id><content type="html" xml:base="/2023/09/04/leggen_flant5_mpre_en.html">## Description

This Text generation model has been fine-tuned on FLANT5 using legal MPRE data. MPRE stands for Multistate Professional Responsibility Examination. The dataset contains examples of questions from past MPRE exams along with their answers and explanations. This model provides a powerful and efficient solution for accurately generating answers and delivering insightful information.

## Predicted Entities



{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/legal/models/leggen_flant5_mpre_en_1.0.0_3.0_1693847631770.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/legal/models/leggen_flant5_mpre_en_1.0.0_3.0_1693847631770.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
document_assembler = nlp.MultiDocumentAssembler()\
    .setInputCols(&quot;question&quot;, &quot;context&quot;)\
    .setOutputCols(&quot;document_question&quot;, &quot;document_context&quot;)

leg_gen = legal.TextGenerator.pretrained('leggen_flant5_mpre,'en','legal/models')\
    .setInputCols([&quot;question&quot;])\
    .setOutputCol(&quot;generated_text&quot;)\
    .setMaxNewTokens(150)\
    .setStopAtEos(True)

pipeline = nlp.Pipeline(stages=[document_assembler, leg_gen])

data = spark.createDataFrame([
   [1, &quot;&quot;&quot;question:
Conglomerate Corporation owns a little more than half the stock of Giant Company. Conglomerate’s stock, in turn, is public, available on the public stock exchange, as is the remainder of the stock in Giant Company. The president of Conglomerate Corporation has asked Attorney Stevenson to represent Giant Company in a deal by which Giant would make a proposed transfer of certain real property to Conglomerate Corporation. The property in question is unusual because it contains an underground particle collider used for scientific research, but also valuable farmland on the surface, as well as some valuable mineral rights in another part of the parcel. These factors make the property value difficult to assess by reference to the general real-estate market, which means it is difficult for anyone to determine the fairness of the transfer price in the proposed deal. Would it be proper for Attorney Stevenson to facilitate this property transfer at the behest of the president of Conglomerate, if Attorney Stevenson would be representing Giant as the client in this specific matter? Yes, because Conglomerate Corporation owns more than half of Giant Company, so the two corporate entities are one client for purposes of the rules regarding conflicts of interest. Yes, because the virtual impossibility of obtaining an appraisal of the fair market value of the property means that the lawyer does not have actual knowledge that the deal is unfair to either party. No, because the attorney would be unable to inform either client fully about whether the proposed transfer price would be in their best interest. No, not unless the attorney first obtains effective informed consent of the management of Giant Company, as well as that of Conglomerate, because the ownership of Conglomerate and Giant is not identical, and their interests materially differ in the proposed transaction.&quot;&quot;&quot;]]).toDF('id', 'text')

results = pipeline.fit(data).transform(data)

results.select(&quot;generated.result&quot;).show(truncate=False)
```

&lt;/div&gt;

## Results

```bash
+-----------------------------------------------------------------------------------------------------------------------------+
|result                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------+
|[Not if the attorney first obtainses efficient informed consent of the administration of Giants, as well and of Conglomerate]|
+-----------------------------------------------------------------------------------------------------------------------------+

```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|leggen_flant5_mpre|
|Compatibility:|Legal NLP 1.0.0+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|1.6 GB|

## References

In house annotated dataset</content><author><name>John Snow Labs</name></author><category term="legal" /><category term="text_generation" /><category term="mpre" /><category term="en" /><category term="licensed" /><category term="tensorflow" /><summary type="html">Description This Text generation model has been fine-tuned on FLANT5 using legal MPRE data. MPRE stands for Multistate Professional Responsibility Examination. The dataset contains examples of questions from past MPRE exams along with their answers and explanations. This model provides a powerful and efficient solution for accurately generating answers and delivering insightful information. Predicted Entities Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = nlp.MultiDocumentAssembler()\ .setInputCols(&quot;question&quot;, &quot;context&quot;)\ .setOutputCols(&quot;document_question&quot;, &quot;document_context&quot;) leg_gen = legal.TextGenerator.pretrained('leggen_flant5_mpre,'en','legal/models')\ .setInputCols([&quot;question&quot;])\ .setOutputCol(&quot;generated_text&quot;)\ .setMaxNewTokens(150)\ .setStopAtEos(True) pipeline = nlp.Pipeline(stages=[document_assembler, leg_gen]) data = spark.createDataFrame([ [1, &quot;&quot;&quot;question: Conglomerate Corporation owns a little more than half the stock of Giant Company. Conglomerate’s stock, in turn, is public, available on the public stock exchange, as is the remainder of the stock in Giant Company. The president of Conglomerate Corporation has asked Attorney Stevenson to represent Giant Company in a deal by which Giant would make a proposed transfer of certain real property to Conglomerate Corporation. The property in question is unusual because it contains an underground particle collider used for scientific research, but also valuable farmland on the surface, as well as some valuable mineral rights in another part of the parcel. These factors make the property value difficult to assess by reference to the general real-estate market, which means it is difficult for anyone to determine the fairness of the transfer price in the proposed deal. Would it be proper for Attorney Stevenson to facilitate this property transfer at the behest of the president of Conglomerate, if Attorney Stevenson would be representing Giant as the client in this specific matter? Yes, because Conglomerate Corporation owns more than half of Giant Company, so the two corporate entities are one client for purposes of the rules regarding conflicts of interest. Yes, because the virtual impossibility of obtaining an appraisal of the fair market value of the property means that the lawyer does not have actual knowledge that the deal is unfair to either party. No, because the attorney would be unable to inform either client fully about whether the proposed transfer price would be in their best interest. No, not unless the attorney first obtains effective informed consent of the management of Giant Company, as well as that of Conglomerate, because the ownership of Conglomerate and Giant is not identical, and their interests materially differ in the proposed transaction.&quot;&quot;&quot;]]).toDF('id', 'text') results = pipeline.fit(data).transform(data) results.select(&quot;generated.result&quot;).show(truncate=False) Results +-----------------------------------------------------------------------------------------------------------------------------+ |result | +-----------------------------------------------------------------------------------------------------------------------------+ |[Not if the attorney first obtainses efficient informed consent of the administration of Giants, as well and of Conglomerate]| +-----------------------------------------------------------------------------------------------------------------------------+ Model Information Model Name: leggen_flant5_mpre Compatibility: Legal NLP 1.0.0+ License: Licensed Edition: Official Language: en Size: 1.6 GB References In house annotated dataset</summary></entry><entry><title type="html">Legal Question Answering (MPRE)</title><link href="/2023/09/04/legqa_flant5_mpre_en.html" rel="alternate" type="text/html" title="Legal Question Answering (MPRE)" /><published>2023-09-04T00:00:00+00:00</published><updated>2023-09-04T00:00:00+00:00</updated><id>/2023/09/04/legqa_flant5_mpre_en</id><content type="html" xml:base="/2023/09/04/legqa_flant5_mpre_en.html">## Description

This Question Answering model has been fine-tuned on FLANT5 using legal MPRE data. MPRE stands for Multistate Professional Responsibility Examination. The dataset contains examples of questions from past MPRE exams along with their answers and explanations. This model provides a powerful and efficient solution for accurately answering the questions and delivering insightful information.

## Predicted Entities



{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/legal/models/legqa_flant5_mpre_en_1.0.0_3.0_1693846701106.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/legal/models/legqa_flant5_mpre_en_1.0.0_3.0_1693846701106.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
document_assembler = nlp.MultiDocumentAssembler()\
    .setInputCols(&quot;question&quot;, &quot;context&quot;)\
    .setOutputCols(&quot;document_question&quot;, &quot;document_context&quot;)

leg_qa = legal.QuestionAnswering.pretrained(&quot;legqa_flant5_mpre&quot;,&quot;en&quot;,&quot;legal/models&quot;)\
    .setInputCols([&quot;document_question&quot;, &quot;document_context&quot;])\
    .setCustomPrompt(&quot;question: {QUESTION} context: {CONTEXT}&quot;)\
    .setMaxNewTokens(50)\
    .setOutputCol(&quot;answer&quot;)

pipeline = nlp.Pipeline(stages=[document_assembler, leg_qa])

context = &quot;Mr. Burns, the chief executive officer of Conglomerate Corporation, now faces criminal charges of discussing prices with the president of a competing firm. If found guilty, both Mr. Burns and Conglomerate Corporation will be subject to civil and criminal penalties under state and federal antitrust laws. An attorney has been representing Conglomerate Corporation. She has conducted a thorough investigation of the matter, and she has personally concluded that no such pricing discussions occurred. Both Conglomerate Corporation and Mr. Burns plan to defend on that ground. Mr. Burns has asked the attorney to represent him, as well as Conglomerate Corporation, in the proceedings. The legal and factual defenses of Conglomerate Corporation and Mr. Burns seem completely consistent at the outset of the matter. Would the attorney need to obtain informed consent to a conflict of interest from both Mr.&quot;

question = &quot; Burns and a separate corporate officer at Conglomerate Corporation before proceeding with this dual representation?&quot;


data = spark.createDataFrame([[question, context]]).toDF(&quot;question&quot;, &quot;context&quot;)

result = pipeline.fit(data).transform(data)
```

&lt;/div&gt;

## Results

```bash
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|result                                                                                                                                                                                    |
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|[Yes, because the conflicting positions in the legal and factual defenses require the attorney to obtain the informed consent of both clients before proceeding with the representation. ]|
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|legqa_flant5_mpre|
|Compatibility:|Legal NLP 1.0.0+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|1.6 GB|
|Case sensitive:|true|

## References

In house annotated dataset</content><author><name>John Snow Labs</name></author><category term="qa" /><category term="question_answering" /><category term="legal" /><category term="mpre" /><category term="en" /><category term="licensed" /><category term="tensorflow" /><summary type="html">Description This Question Answering model has been fine-tuned on FLANT5 using legal MPRE data. MPRE stands for Multistate Professional Responsibility Examination. The dataset contains examples of questions from past MPRE exams along with their answers and explanations. This model provides a powerful and efficient solution for accurately answering the questions and delivering insightful information. Predicted Entities Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = nlp.MultiDocumentAssembler()\ .setInputCols(&quot;question&quot;, &quot;context&quot;)\ .setOutputCols(&quot;document_question&quot;, &quot;document_context&quot;) leg_qa = legal.QuestionAnswering.pretrained(&quot;legqa_flant5_mpre&quot;,&quot;en&quot;,&quot;legal/models&quot;)\ .setInputCols([&quot;document_question&quot;, &quot;document_context&quot;])\ .setCustomPrompt(&quot;question: {QUESTION} context: {CONTEXT}&quot;)\ .setMaxNewTokens(50)\ .setOutputCol(&quot;answer&quot;) pipeline = nlp.Pipeline(stages=[document_assembler, leg_qa]) context = &quot;Mr. Burns, the chief executive officer of Conglomerate Corporation, now faces criminal charges of discussing prices with the president of a competing firm. If found guilty, both Mr. Burns and Conglomerate Corporation will be subject to civil and criminal penalties under state and federal antitrust laws. An attorney has been representing Conglomerate Corporation. She has conducted a thorough investigation of the matter, and she has personally concluded that no such pricing discussions occurred. Both Conglomerate Corporation and Mr. Burns plan to defend on that ground. Mr. Burns has asked the attorney to represent him, as well as Conglomerate Corporation, in the proceedings. The legal and factual defenses of Conglomerate Corporation and Mr. Burns seem completely consistent at the outset of the matter. Would the attorney need to obtain informed consent to a conflict of interest from both Mr.&quot; question = &quot; Burns and a separate corporate officer at Conglomerate Corporation before proceeding with this dual representation?&quot; data = spark.createDataFrame([[question, context]]).toDF(&quot;question&quot;, &quot;context&quot;) result = pipeline.fit(data).transform(data) Results +------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ |result | +------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ |[Yes, because the conflicting positions in the legal and factual defenses require the attorney to obtain the informed consent of both clients before proceeding with the representation. ]| +------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ Model Information Model Name: legqa_flant5_mpre Compatibility: Legal NLP 1.0.0+ License: Licensed Edition: Official Language: en Size: 1.6 GB Case sensitive: true References In house annotated dataset</summary></entry><entry><title type="html">Extract Anatomical Entities from Oncology Texts (langtest)</title><link href="/2023/09/03/ner_oncology_anatomy_general_langtest_en.html" rel="alternate" type="text/html" title="Extract Anatomical Entities from Oncology Texts (langtest)" /><published>2023-09-03T00:00:00+00:00</published><updated>2023-09-03T00:00:00+00:00</updated><id>/2023/09/03/ner_oncology_anatomy_general_langtest_en</id><content type="html" xml:base="/2023/09/03/ner_oncology_anatomy_general_langtest_en.html">## Description

This model extracts anatomical entities using an unspecific label. It is the version of [ner_oncology_anatomy_general](https://nlp.johnsnowlabs.com/2022/11/24/ner_oncology_anatomy_general_en.html) model augmented with `langtest` library.

Definitions of Predicted Entities:

- `Anatomical_Site`: Relevant anatomical terms mentioned in the text.
- `Direction`: Directional and laterality terms, such as &quot;left&quot;, &quot;right&quot;, &quot;bilateral&quot;, &quot;upper&quot; and &quot;lower&quot;.

## Predicted Entities

`Anatomical_Site`, `Direction`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_oncology_anatomy_general_langtest_en_5.0.2_3.0_1693746369031.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_oncology_anatomy_general_langtest_en_5.0.2_3.0_1693746369031.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python

document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)                

ner = MedicalNerModel.pretrained(&quot;ner_oncology_anatomy_general_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverter() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \
    .setOutputCol(&quot;ner_chunk&quot;)

pipeline = Pipeline(stages=[document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter])

data = spark.createDataFrame([[&quot;The patient presented a mass in her left breast, and a possible metastasis in her lungs and in her liver.&quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
    
val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)
    
val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)                
    
val ner = MedicalNerModel.pretrained(&quot;ner_oncology_anatomy_general_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)
    
val ner_converter = new NerConverter()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

        
val pipeline = new Pipeline().setStages(Array(document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter))    

val data = Seq(&quot;The patient presented a mass in her left breast, and a possible metastasis in her lungs and in her liver.&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+------+---------------+
|chunk |ner_label      |
+------+---------------+
|left  |Direction      |
|breast|Anatomical_Site|
|lungs |Anatomical_Site|
|liver |Anatomical_Site|
+------+---------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_oncology_anatomy_general_langtest|
|Compatibility:|Healthcare NLP 5.0.2+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|14.7 MB|

## References

In-house annotated oncology case reports.

## Benchmarking

```bash
label              precision  recall  f1-score  support 
B-Direction        0.89       0.91    0.90      872     
B-Anatomical_Site  0.86       0.88    0.87      2361    
I-Anatomical_Site  0.76       0.86    0.81      1272    
I-Direction        0.79       0.81    0.80      83      
micro-avg          0.84       0.88    0.86      4588    
macro-avg          0.83       0.86    0.84      4588    
weighted-avg       0.84       0.88    0.86      4588    
```</content><author><name>John Snow Labs</name></author><category term="ner" /><category term="clinical" /><category term="oncology" /><category term="licensed" /><category term="en" /><category term="langtest" /><category term="anatomy" /><summary type="html">Description This model extracts anatomical entities using an unspecific label. It is the version of ner_oncology_anatomy_general model augmented with langtest library. Definitions of Predicted Entities: Anatomical_Site: Relevant anatomical terms mentioned in the text. Direction: Directional and laterality terms, such as “left”, “right”, “bilateral”, “upper” and “lower”. Predicted Entities Anatomical_Site, Direction Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_oncology_anatomy_general_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverter() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;) pipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter]) data = spark.createDataFrame([[&quot;The patient presented a mass in her left breast, and a possible metastasis in her lungs and in her liver.&quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_oncology_anatomy_general_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverter() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter)) val data = Seq(&quot;The patient presented a mass in her left breast, and a possible metastasis in her lungs and in her liver.&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +------+---------------+ |chunk |ner_label | +------+---------------+ |left |Direction | |breast|Anatomical_Site| |lungs |Anatomical_Site| |liver |Anatomical_Site| +------+---------------+ Model Information Model Name: ner_oncology_anatomy_general_langtest Compatibility: Healthcare NLP 5.0.2+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 14.7 MB References In-house annotated oncology case reports. Benchmarking label precision recall f1-score support B-Direction 0.89 0.91 0.90 872 B-Anatomical_Site 0.86 0.88 0.87 2361 I-Anatomical_Site 0.76 0.86 0.81 1272 I-Direction 0.79 0.81 0.80 83 micro-avg 0.84 0.88 0.86 4588 macro-avg 0.83 0.86 0.84 4588 weighted-avg 0.84 0.88 0.86 4588</summary></entry><entry><title type="html">Extract Granular Anatomical Entities from Oncology Texts (langtest)</title><link href="/2023/09/03/ner_oncology_anatomy_granular_langtest_en.html" rel="alternate" type="text/html" title="Extract Granular Anatomical Entities from Oncology Texts (langtest)" /><published>2023-09-03T00:00:00+00:00</published><updated>2023-09-03T00:00:00+00:00</updated><id>/2023/09/03/ner_oncology_anatomy_granular_langtest_en</id><content type="html" xml:base="/2023/09/03/ner_oncology_anatomy_granular_langtest_en.html">## Description

This model extracts mentions of anatomical entities using granular labels. It is the version of [ner_oncology_anatomy_granular](https://nlp.johnsnowlabs.com/2022/11/24/ner_oncology_anatomy_granular_en.html) model augmented with `langtest` library.

Definitions of Predicted Entities:

- `Direction`: Directional and laterality terms, such as &quot;left&quot;, &quot;right&quot;, &quot;bilateral&quot;, &quot;upper&quot; and &quot;lower&quot;.
- `Site_Bone`: Anatomical terms that refer to the human skeleton.
- `Site_Brain`: Anatomical terms that refer to the central nervous system (including the brain stem and the cerebellum).
- `Site_Breast`: Anatomical terms that refer to the breasts.
- `Site_Liver`: Anatomical terms that refer to the liver.
- `Site_Lung`: Anatomical terms that refer to the lungs.
- `Site_Lymph_Node`: Anatomical terms that refer to lymph nodes, excluding adenopathies.
- `Site_Other_Body_Part`: Relevant anatomical terms that are not included in the rest of the anatomical entities.

## Predicted Entities

`Direction`, `Site_Bone`, `Site_Brain`, `Site_Breast`, `Site_Liver`, `Site_Lung`, `Site_Lymph_Node`, `Site_Other_Body_Part`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_oncology_anatomy_granular_langtest_en_5.0.2_3.0_1693756631307.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_oncology_anatomy_granular_langtest_en_5.0.2_3.0_1693756631307.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)                

ner = MedicalNerModel.pretrained(&quot;ner_oncology_anatomy_granular_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverter() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \
    .setOutputCol(&quot;ner_chunk&quot;)

pipeline = Pipeline(stages=[document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter])

data = spark.createDataFrame([[&quot;The patient presented a mass in her left breast, and a possible metastasis in her lungs and in her liver.&quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
    
val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)
    
val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)                
    
val ner = MedicalNerModel.pretrained(&quot;ner_oncology_anatomy_granular_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)
    
val ner_converter = new NerConverter()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

        
val pipeline = new Pipeline().setStages(Array(document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter))    

val data = Seq(&quot;The patient presented a mass in her left breast, and a possible metastasis in her lungs and in her liver.&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+------+-----------+
|chunk |ner_label  |
+------+-----------+
|left  |Direction  |
|breast|Site_Breast|
|lungs |Site_Lung  |
|liver |Site_Liver |
+------+-----------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_oncology_anatomy_granular_langtest|
|Compatibility:|Healthcare NLP 5.0.2+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|14.7 MB|

## References

In-house annotated oncology case reports.

## Benchmarking

```bash
label                   precision  recall  f1-score  support 
B-Direction             0.86       0.94    0.90      870     
B-Site_Bone             0.85       0.82    0.83      247     
B-Site_Lymph_Node       0.86       0.86    0.86      239     
I-Site_Lymph_Node       0.89       0.88    0.88      331     
B-Site_Other_Body_Part  0.78       0.76    0.77      1045    
I-Site_Other_Body_Part  0.66       0.72    0.69      529     
B-Site_Brain            0.86       0.85    0.86      184     
I-Site_Brain            0.80       0.74    0.77      70      
B-Site_Lung             0.82       0.89    0.85      361     
I-Site_Lung             0.76       0.75    0.76      167     
I-Site_Bone             0.80       0.71    0.75      106     
I-Direction             0.74       0.85    0.79      84      
B-Site_Breast           0.90       0.96    0.93      117     
B-Site_Liver            0.81       0.89    0.85      168     
I-Site_Liver            0.50       0.62    0.55      52      
I-Site_Breast           0.93       0.76    0.84      17      
micro-avg               0.80       0.83    0.81      4587    
macro-avg               0.80       0.81    0.80      4587    
weighted-avg            0.80       0.83    0.81      4587    
```</content><author><name>John Snow Labs</name></author><category term="en" /><category term="licensed" /><category term="ner" /><category term="clinical" /><category term="oncology" /><category term="granular" /><category term="langtest" /><summary type="html">Description This model extracts mentions of anatomical entities using granular labels. It is the version of ner_oncology_anatomy_granular model augmented with langtest library. Definitions of Predicted Entities: Direction: Directional and laterality terms, such as “left”, “right”, “bilateral”, “upper” and “lower”. Site_Bone: Anatomical terms that refer to the human skeleton. Site_Brain: Anatomical terms that refer to the central nervous system (including the brain stem and the cerebellum). Site_Breast: Anatomical terms that refer to the breasts. Site_Liver: Anatomical terms that refer to the liver. Site_Lung: Anatomical terms that refer to the lungs. Site_Lymph_Node: Anatomical terms that refer to lymph nodes, excluding adenopathies. Site_Other_Body_Part: Relevant anatomical terms that are not included in the rest of the anatomical entities. Predicted Entities Direction, Site_Bone, Site_Brain, Site_Breast, Site_Liver, Site_Lung, Site_Lymph_Node, Site_Other_Body_Part Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_oncology_anatomy_granular_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverter() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;) pipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter]) data = spark.createDataFrame([[&quot;The patient presented a mass in her left breast, and a possible metastasis in her lungs and in her liver.&quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_oncology_anatomy_granular_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverter() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter)) val data = Seq(&quot;The patient presented a mass in her left breast, and a possible metastasis in her lungs and in her liver.&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +------+-----------+ |chunk |ner_label | +------+-----------+ |left |Direction | |breast|Site_Breast| |lungs |Site_Lung | |liver |Site_Liver | +------+-----------+ Model Information Model Name: ner_oncology_anatomy_granular_langtest Compatibility: Healthcare NLP 5.0.2+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 14.7 MB References In-house annotated oncology case reports. Benchmarking label precision recall f1-score support B-Direction 0.86 0.94 0.90 870 B-Site_Bone 0.85 0.82 0.83 247 B-Site_Lymph_Node 0.86 0.86 0.86 239 I-Site_Lymph_Node 0.89 0.88 0.88 331 B-Site_Other_Body_Part 0.78 0.76 0.77 1045 I-Site_Other_Body_Part 0.66 0.72 0.69 529 B-Site_Brain 0.86 0.85 0.86 184 I-Site_Brain 0.80 0.74 0.77 70 B-Site_Lung 0.82 0.89 0.85 361 I-Site_Lung 0.76 0.75 0.76 167 I-Site_Bone 0.80 0.71 0.75 106 I-Direction 0.74 0.85 0.79 84 B-Site_Breast 0.90 0.96 0.93 117 B-Site_Liver 0.81 0.89 0.85 168 I-Site_Liver 0.50 0.62 0.55 52 I-Site_Breast 0.93 0.76 0.84 17 micro-avg 0.80 0.83 0.81 4587 macro-avg 0.80 0.81 0.80 4587 weighted-avg 0.80 0.83 0.81 4587</summary></entry><entry><title type="html">Extract Demographic Entities from Oncology Texts (langtest)</title><link href="/2023/09/03/ner_oncology_demographics_langtest_en.html" rel="alternate" type="text/html" title="Extract Demographic Entities from Oncology Texts (langtest)" /><published>2023-09-03T00:00:00+00:00</published><updated>2023-09-03T00:00:00+00:00</updated><id>/2023/09/03/ner_oncology_demographics_langtest_en</id><content type="html" xml:base="/2023/09/03/ner_oncology_demographics_langtest_en.html">## Description

This model extracts demographic information from oncology texts, including age, gender, and smoking status. It is the version of [ner_oncology_demographics](https://nlp.johnsnowlabs.com/2022/11/24/ner_oncology_demographics_en.html) model augmented with `langtest` library

Definitions of Predicted Entities:

- `Age`: All mention of ages, past or present, related to the patient or with anybody else.
- `Gender`: Gender-specific nouns and pronouns (including words such as &quot;him&quot; or &quot;she&quot;, and family members such as &quot;father&quot;).
- `Race_Ethnicity`: The race and ethnicity categories include racial and national origin or sociocultural groups.
- `Smoking_Status`: All mentions of smoking related to the patient or to someone else.

## Predicted Entities

`Age`, `Gender`, `Race_Ethnicity`, `Smoking_Status`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_oncology_demographics_langtest_en_5.0.2_3.0_1693752265725.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_oncology_demographics_langtest_en_5.0.2_3.0_1693752265725.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)                

ner = MedicalNerModel.pretrained(&quot;ner_oncology_demographics_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverter() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \
    .setOutputCol(&quot;ner_chunk&quot;)

pipeline = Pipeline(stages=[document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter])

data = spark.createDataFrame([[&quot;The patient is a 40 year old man with history of heavy smoking.&quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
    
val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)
    
val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)                
    
val ner = MedicalNerModel.pretrained(&quot;ner_oncology_demographics_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)
    
val ner_converter = new NerConverter()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

        
val pipeline = new Pipeline().setStages(Array(document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter))    

val data = Seq(&quot;The patient is a 40 year old man with history of heavy smoking.&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+-----------+--------------+
|chunk      |ner_label     |
+-----------+--------------+
|40 year old|Age           |
|man        |Gender        |
|smoking    |Smoking_Status|
+-----------+--------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_oncology_demographics_langtest|
|Compatibility:|Healthcare NLP 5.0.2+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|14.8 MB|

## References

In-house annotated oncology case reports.

## Benchmarking

```bash
label             precision  recall  f1-score  support 
B-Gender          0.99       1.00    0.99      1235    
B-Age             0.97       0.96    0.97      224     
I-Age             0.98       0.99    0.99      799     
B-Smoking_Status  0.93       0.89    0.91      57      
I-Gender          0.00       0.00    0.00      1       
B-Race_Ethnicity  0.87       1.00    0.93      45      
I-Race_Ethnicity  0.71       0.83    0.77      6       
I-Smoking_Status  0.67       0.91    0.77      11      
micro-avg         0.98       0.99    0.98      2378    
macro-avg         0.76       0.82    0.79      2378    
weighted-avg      0.98       0.99    0.98      2378   
```</content><author><name>John Snow Labs</name></author><category term="en" /><category term="ner" /><category term="licensed" /><category term="clinical" /><category term="oncology" /><category term="demographics" /><category term="langtest" /><summary type="html">Description This model extracts demographic information from oncology texts, including age, gender, and smoking status. It is the version of ner_oncology_demographics model augmented with langtest library Definitions of Predicted Entities: Age: All mention of ages, past or present, related to the patient or with anybody else. Gender: Gender-specific nouns and pronouns (including words such as “him” or “she”, and family members such as “father”). Race_Ethnicity: The race and ethnicity categories include racial and national origin or sociocultural groups. Smoking_Status: All mentions of smoking related to the patient or to someone else. Predicted Entities Age, Gender, Race_Ethnicity, Smoking_Status Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_oncology_demographics_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverter() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;) pipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter]) data = spark.createDataFrame([[&quot;The patient is a 40 year old man with history of heavy smoking.&quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_oncology_demographics_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverter() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter)) val data = Seq(&quot;The patient is a 40 year old man with history of heavy smoking.&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +-----------+--------------+ |chunk |ner_label | +-----------+--------------+ |40 year old|Age | |man |Gender | |smoking |Smoking_Status| +-----------+--------------+ Model Information Model Name: ner_oncology_demographics_langtest Compatibility: Healthcare NLP 5.0.2+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 14.8 MB References In-house annotated oncology case reports. Benchmarking label precision recall f1-score support B-Gender 0.99 1.00 0.99 1235 B-Age 0.97 0.96 0.97 224 I-Age 0.98 0.99 0.99 799 B-Smoking_Status 0.93 0.89 0.91 57 I-Gender 0.00 0.00 0.00 1 B-Race_Ethnicity 0.87 1.00 0.93 45 I-Race_Ethnicity 0.71 0.83 0.77 6 I-Smoking_Status 0.67 0.91 0.77 11 micro-avg 0.98 0.99 0.98 2378 macro-avg 0.76 0.82 0.79 2378 weighted-avg 0.98 0.99 0.98 2378</summary></entry><entry><title type="html">Pipeline to Detect Problem, Test and Treatment (Spanish)</title><link href="/2023/09/02/ner_clinical_pipeline_es.html" rel="alternate" type="text/html" title="Pipeline to Detect Problem, Test and Treatment (Spanish)" /><published>2023-09-02T00:00:00+00:00</published><updated>2023-09-02T00:00:00+00:00</updated><id>/2023/09/02/ner_clinical_pipeline_es</id><content type="html" xml:base="/2023/09/02/ner_clinical_pipeline_es.html">## Description

This pretrained pipeline is built on the top of [ner_clinical](https://nlp.johnsnowlabs.com/2023/08/30/ner_clinical_es.html) model.

{:.btn-box}
[Live Demo](https://demo.johnsnowlabs.com/healthcare/NER_CLINICAL_MULTI/){:.button.button-orange}
[Open in Colab](https://colab.research.google.com/github/JohnSnowLabs/spark-nlp-workshop/blob/master/tutorials/streamlit_notebooks/healthcare/NER_CLINICAL_MULTI.ipynb){:.button.button-orange.button-orange-trans.co.button-icon}
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_clinical_pipeline_es_5.0.2_3.0_1693690782153.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_clinical_pipeline_es_5.0.2_3.0_1693690782153.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python

from sparknlp.pretrained import PretrainedPipeline

ner_pipeline = PretrainedPipeline(&quot;ner_clinical_pipeline&quot;, &quot;es&quot;, &quot;clinical/models&quot;)

result = ner_pipeline.annotate(&quot;&quot;&quot;Una mujer de 50 años acudió a la clínica ortopédica quejándose de dolor persistente, inflamación y limitación de la amplitud de movimiento en la rodilla derecha. La paciente refería antecedentes de artrosis y una lesión previa de rodilla. Se realizó un examen clínico y radiografías que revelaron un estrechamiento del espacio articular, formación de osteofitos y signos de degeneración del cartílago. Para confirmar el diagnóstico y evaluar la gravedad, se solicitó una resonancia magnética. La resonancia mostró una gran pérdida de cartílago y cambios óseos compatibles con una artrosis avanzada. Tras considerar el estado y las preferencias del paciente, se discutió un plan de tratamiento que incluía control del dolor, fisioterapia y la posibilidad de una cirugía de sustitución articular.&quot;&quot;&quot;)

```
```scala

import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline

val ner_pipeline = PretrainedPipeline(&quot;ner_clinical_pipeline&quot;, &quot;es&quot;, &quot;clinical/models&quot;)

val result = ner_pipeline.annotate(&quot;&quot;&quot;Una mujer de 50 años acudió a la clínica ortopédica quejándose de dolor persistente, inflamación y limitación de la amplitud de movimiento en la rodilla derecha. La paciente refería antecedentes de artrosis y una lesión previa de rodilla. Se realizó un examen clínico y radiografías que revelaron un estrechamiento del espacio articular, formación de osteofitos y signos de degeneración del cartílago. Para confirmar el diagnóstico y evaluar la gravedad, se solicitó una resonancia magnética. La resonancia mostró una gran pérdida de cartílago y cambios óseos compatibles con una artrosis avanzada. Tras considerar el estado y las preferencias del paciente, se discutió un plan de tratamiento que incluía control del dolor, fisioterapia y la posibilidad de una cirugía de sustitución articular.&quot;&quot;&quot;)

```
&lt;/div&gt;

## Results

```bash
|    | chunks                                                        |   begin |   end | entities   |
|---:|:--------------------------------------------------------------|--------:|------:|:-----------|
|  0 | clínica ortopédica                                            |      33 |    50 | TREATMENT  |
|  1 | dolor persistente                                             |      66 |    82 | PROBLEM    |
|  2 | inflamación                                                   |      85 |    95 | PROBLEM    |
|  3 | limitación de la amplitud de movimiento en la rodilla derecha |      99 |   159 | PROBLEM    |
|  4 | artrosis                                                      |     198 |   205 | PROBLEM    |
|  5 | una lesión previa de rodilla                                  |     209 |   236 | PROBLEM    |
|  6 | examen clínico y radiografías                                 |     253 |   281 | TEST       |
|  7 | estrechamiento del espacio articular                          |     300 |   335 | PROBLEM    |
|  8 | formación de osteofitos                                       |     338 |   360 | PROBLEM    |
|  9 | signos de degeneración del cartílago                          |     364 |   399 | PROBLEM    |
| 10 | una resonancia magnética                                      |     467 |   490 | TEST       |
| 11 | resonancia                                                    |     496 |   505 | TEST       |
| 12 | pérdida de cartílago                                          |     523 |   542 | PROBLEM    |
| 13 | cambios óseos compatibles                                     |     546 |   570 | PROBLEM    |
| 14 | una artrosis avanzada                                         |     576 |   596 | PROBLEM    |
| 15 | tratamiento                                                   |     681 |   691 | TREATMENT  |
| 16 | control                                                       |     705 |   711 | TREATMENT  |
| 17 | dolor                                                         |     717 |   721 | PROBLEM    |
| 18 | fisioterapia                                                  |     724 |   735 | TREATMENT  |
| 19 | cirugía de sustitución articular                              |     761 |   792 | TREATMENT  |
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_clinical_pipeline|
|Type:|pipeline|
|Compatibility:|Healthcare NLP 5.0.2+|
|License:|Licensed|
|Edition:|Official|
|Language:|es|
|Size:|1.3 GB|

## Included Models

- DocumentAssembler
- SentenceDetectorDLModel
- TokenizerModel
- WordEmbeddingsModel
- MedicalNerModel
- NerConverterInternalModel</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="es" /><category term="clinical" /><category term="pipeline" /><category term="ner" /><summary type="html">Description This pretrained pipeline is built on the top of ner_clinical model. Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU from sparknlp.pretrained import PretrainedPipeline ner_pipeline = PretrainedPipeline(&quot;ner_clinical_pipeline&quot;, &quot;es&quot;, &quot;clinical/models&quot;) result = ner_pipeline.annotate(&quot;&quot;&quot;Una mujer de 50 años acudió a la clínica ortopédica quejándose de dolor persistente, inflamación y limitación de la amplitud de movimiento en la rodilla derecha. La paciente refería antecedentes de artrosis y una lesión previa de rodilla. Se realizó un examen clínico y radiografías que revelaron un estrechamiento del espacio articular, formación de osteofitos y signos de degeneración del cartílago. Para confirmar el diagnóstico y evaluar la gravedad, se solicitó una resonancia magnética. La resonancia mostró una gran pérdida de cartílago y cambios óseos compatibles con una artrosis avanzada. Tras considerar el estado y las preferencias del paciente, se discutió un plan de tratamiento que incluía control del dolor, fisioterapia y la posibilidad de una cirugía de sustitución articular.&quot;&quot;&quot;) import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline val ner_pipeline = PretrainedPipeline(&quot;ner_clinical_pipeline&quot;, &quot;es&quot;, &quot;clinical/models&quot;) val result = ner_pipeline.annotate(&quot;&quot;&quot;Una mujer de 50 años acudió a la clínica ortopédica quejándose de dolor persistente, inflamación y limitación de la amplitud de movimiento en la rodilla derecha. La paciente refería antecedentes de artrosis y una lesión previa de rodilla. Se realizó un examen clínico y radiografías que revelaron un estrechamiento del espacio articular, formación de osteofitos y signos de degeneración del cartílago. Para confirmar el diagnóstico y evaluar la gravedad, se solicitó una resonancia magnética. La resonancia mostró una gran pérdida de cartílago y cambios óseos compatibles con una artrosis avanzada. Tras considerar el estado y las preferencias del paciente, se discutió un plan de tratamiento que incluía control del dolor, fisioterapia y la posibilidad de una cirugía de sustitución articular.&quot;&quot;&quot;) Results | | chunks | begin | end | entities | |---:|:--------------------------------------------------------------|--------:|------:|:-----------| | 0 | clínica ortopédica | 33 | 50 | TREATMENT | | 1 | dolor persistente | 66 | 82 | PROBLEM | | 2 | inflamación | 85 | 95 | PROBLEM | | 3 | limitación de la amplitud de movimiento en la rodilla derecha | 99 | 159 | PROBLEM | | 4 | artrosis | 198 | 205 | PROBLEM | | 5 | una lesión previa de rodilla | 209 | 236 | PROBLEM | | 6 | examen clínico y radiografías | 253 | 281 | TEST | | 7 | estrechamiento del espacio articular | 300 | 335 | PROBLEM | | 8 | formación de osteofitos | 338 | 360 | PROBLEM | | 9 | signos de degeneración del cartílago | 364 | 399 | PROBLEM | | 10 | una resonancia magnética | 467 | 490 | TEST | | 11 | resonancia | 496 | 505 | TEST | | 12 | pérdida de cartílago | 523 | 542 | PROBLEM | | 13 | cambios óseos compatibles | 546 | 570 | PROBLEM | | 14 | una artrosis avanzada | 576 | 596 | PROBLEM | | 15 | tratamiento | 681 | 691 | TREATMENT | | 16 | control | 705 | 711 | TREATMENT | | 17 | dolor | 717 | 721 | PROBLEM | | 18 | fisioterapia | 724 | 735 | TREATMENT | | 19 | cirugía de sustitución articular | 761 | 792 | TREATMENT | Model Information Model Name: ner_clinical_pipeline Type: pipeline Compatibility: Healthcare NLP 5.0.2+ License: Licensed Edition: Official Language: es Size: 1.3 GB Included Models DocumentAssembler SentenceDetectorDLModel TokenizerModel WordEmbeddingsModel MedicalNerModel NerConverterInternalModel</summary></entry><entry><title type="html">Pipeline to Detect Problem, Test and Treatment (French)</title><link href="/2023/09/02/ner_clinical_pipeline_fr.html" rel="alternate" type="text/html" title="Pipeline to Detect Problem, Test and Treatment (French)" /><published>2023-09-02T00:00:00+00:00</published><updated>2023-09-02T00:00:00+00:00</updated><id>/2023/09/02/ner_clinical_pipeline_fr</id><content type="html" xml:base="/2023/09/02/ner_clinical_pipeline_fr.html">## Description

This pretrained pipeline is built on the top of [ner_clinical](https://nlp.johnsnowlabs.com/2023/08/30/ner_clinical_fr.html) model.

{:.btn-box}
[Live Demo](https://demo.johnsnowlabs.com/healthcare/NER_CLINICAL_MULTI/){:.button.button-orange}
[Open in Colab](https://colab.research.google.com/github/JohnSnowLabs/spark-nlp-workshop/blob/master/tutorials/streamlit_notebooks/healthcare/NER_CLINICAL_MULTI.ipynb){:.button.button-orange.button-orange-trans.co.button-icon}
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_clinical_pipeline_fr_5.0.2_3.0_1693691971968.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_clinical_pipeline_fr_5.0.2_3.0_1693691971968.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python

from sparknlp.pretrained import PretrainedPipeline

ner_pipeline = PretrainedPipeline(&quot;ner_clinical_pipeline&quot;, &quot;fr&quot;, &quot;clinical/models&quot;)

result = ner_pipeline.annotate(&quot;&quot;&quot;Une femme de 50 ans s'est présentée à la clinique orthopédique en se plaignant d'une douleur persistante, d'un gonflement et d'une limitation de l'amplitude de mouvement de son genou droit. La patiente a déclaré avoir des antécédents d'arthrose et s'être déjà blessée au genou. L'examen clinique et les radiographies effectuées ont révélé un rétrécissement de l'espace articulaire, la formation d'ostéophytes et des signes de dégénérescence du cartilage. Pour confirmer le diagnostic et en évaluer la gravité, une IRM a été demandée. L'IRM a montré une perte importante de cartilage et des modifications osseuses correspondant à une arthrose avancée. Après avoir pris en compte l'état de santé et les préférences du patient, un plan de traitement comprenant la prise en charge de la douleur, la kinésithérapie et la possibilité d'une arthroplastie a été discuté.&quot;&quot;&quot;)

```
```scala

import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline

val ner_pipeline = PretrainedPipeline(&quot;ner_clinical_pipeline&quot;, &quot;fr&quot;, &quot;clinical/models&quot;)

val result = ner_pipeline.annotate(&quot;&quot;&quot;Une femme de 50 ans s'est présentée à la clinique orthopédique en se plaignant d'une douleur persistante, d'un gonflement et d'une limitation de l'amplitude de mouvement de son genou droit. La patiente a déclaré avoir des antécédents d'arthrose et s'être déjà blessée au genou. L'examen clinique et les radiographies effectuées ont révélé un rétrécissement de l'espace articulaire, la formation d'ostéophytes et des signes de dégénérescence du cartilage. Pour confirmer le diagnostic et en évaluer la gravité, une IRM a été demandée. L'IRM a montré une perte importante de cartilage et des modifications osseuses correspondant à une arthrose avancée. Après avoir pris en compte l'état de santé et les préférences du patient, un plan de traitement comprenant la prise en charge de la douleur, la kinésithérapie et la possibilité d'une arthroplastie a été discuté.&quot;&quot;&quot;)

```
&lt;/div&gt;

## Results

```bash
|    | chunks                                 |   begin |   end | entities   |
|---:|:---------------------------------------|--------:|------:|:-----------|
|  0 | douleur persistante                    |      85 |   103 | PROBLEM    |
|  1 | gonflement                             |     111 |   120 | PROBLEM    |
|  2 | mouvement de son genou droit           |     160 |   187 | PROBLEM    |
|  3 | antécédents d'arthrose                 |     222 |   243 | PROBLEM    |
|  4 | blessée au genou                       |     260 |   275 | PROBLEM    |
|  5 | L'examen clinique                      |     278 |   294 | TEST       |
|  6 | les radiographies                      |     299 |   315 | TEST       |
|  7 | rétrécissement de l'espace articulaire |     342 |   379 | PROBLEM    |
|  8 | signes de dégénérescence du cartilage  |     416 |   452 | PROBLEM    |
|  9 | gravité                                |     501 |   507 | PROBLEM    |
| 10 | une IRM                                |     510 |   516 | TEST       |
| 11 | L'IRM                                  |     534 |   538 | TEST       |
| 12 | perte importante de cartilage          |     553 |   581 | PROBLEM    |
| 13 | osseuses correspondant                 |     604 |   625 | PROBLEM    |
| 14 | arthrose avancée                       |     633 |   648 | PROBLEM    |
| 15 | douleur                                |     783 |   789 | PROBLEM    |
| 16 | arthroplastie                          |     834 |   846 | TREATMENT  |
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_clinical_pipeline|
|Type:|pipeline|
|Compatibility:|Healthcare NLP 5.0.2+|
|License:|Licensed|
|Edition:|Official|
|Language:|fr|
|Size:|1.3 GB|

## Included Models

- DocumentAssembler
- SentenceDetectorDLModel
- TokenizerModel
- WordEmbeddingsModel
- MedicalNerModel
- NerConverterInternalModel</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="fr" /><category term="clinical" /><category term="pipeline" /><category term="ner" /><summary type="html">Description This pretrained pipeline is built on the top of ner_clinical model. Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU from sparknlp.pretrained import PretrainedPipeline ner_pipeline = PretrainedPipeline(&quot;ner_clinical_pipeline&quot;, &quot;fr&quot;, &quot;clinical/models&quot;) result = ner_pipeline.annotate(&quot;&quot;&quot;Une femme de 50 ans s'est présentée à la clinique orthopédique en se plaignant d'une douleur persistante, d'un gonflement et d'une limitation de l'amplitude de mouvement de son genou droit. La patiente a déclaré avoir des antécédents d'arthrose et s'être déjà blessée au genou. L'examen clinique et les radiographies effectuées ont révélé un rétrécissement de l'espace articulaire, la formation d'ostéophytes et des signes de dégénérescence du cartilage. Pour confirmer le diagnostic et en évaluer la gravité, une IRM a été demandée. L'IRM a montré une perte importante de cartilage et des modifications osseuses correspondant à une arthrose avancée. Après avoir pris en compte l'état de santé et les préférences du patient, un plan de traitement comprenant la prise en charge de la douleur, la kinésithérapie et la possibilité d'une arthroplastie a été discuté.&quot;&quot;&quot;) import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline val ner_pipeline = PretrainedPipeline(&quot;ner_clinical_pipeline&quot;, &quot;fr&quot;, &quot;clinical/models&quot;) val result = ner_pipeline.annotate(&quot;&quot;&quot;Une femme de 50 ans s'est présentée à la clinique orthopédique en se plaignant d'une douleur persistante, d'un gonflement et d'une limitation de l'amplitude de mouvement de son genou droit. La patiente a déclaré avoir des antécédents d'arthrose et s'être déjà blessée au genou. L'examen clinique et les radiographies effectuées ont révélé un rétrécissement de l'espace articulaire, la formation d'ostéophytes et des signes de dégénérescence du cartilage. Pour confirmer le diagnostic et en évaluer la gravité, une IRM a été demandée. L'IRM a montré une perte importante de cartilage et des modifications osseuses correspondant à une arthrose avancée. Après avoir pris en compte l'état de santé et les préférences du patient, un plan de traitement comprenant la prise en charge de la douleur, la kinésithérapie et la possibilité d'une arthroplastie a été discuté.&quot;&quot;&quot;) Results | | chunks | begin | end | entities | |---:|:---------------------------------------|--------:|------:|:-----------| | 0 | douleur persistante | 85 | 103 | PROBLEM | | 1 | gonflement | 111 | 120 | PROBLEM | | 2 | mouvement de son genou droit | 160 | 187 | PROBLEM | | 3 | antécédents d'arthrose | 222 | 243 | PROBLEM | | 4 | blessée au genou | 260 | 275 | PROBLEM | | 5 | L'examen clinique | 278 | 294 | TEST | | 6 | les radiographies | 299 | 315 | TEST | | 7 | rétrécissement de l'espace articulaire | 342 | 379 | PROBLEM | | 8 | signes de dégénérescence du cartilage | 416 | 452 | PROBLEM | | 9 | gravité | 501 | 507 | PROBLEM | | 10 | une IRM | 510 | 516 | TEST | | 11 | L'IRM | 534 | 538 | TEST | | 12 | perte importante de cartilage | 553 | 581 | PROBLEM | | 13 | osseuses correspondant | 604 | 625 | PROBLEM | | 14 | arthrose avancée | 633 | 648 | PROBLEM | | 15 | douleur | 783 | 789 | PROBLEM | | 16 | arthroplastie | 834 | 846 | TREATMENT | Model Information Model Name: ner_clinical_pipeline Type: pipeline Compatibility: Healthcare NLP 5.0.2+ License: Licensed Edition: Official Language: fr Size: 1.3 GB Included Models DocumentAssembler SentenceDetectorDLModel TokenizerModel WordEmbeddingsModel MedicalNerModel NerConverterInternalModel</summary></entry><entry><title type="html">Pipeline to Detect Problem, Test and Treatment (Italian)</title><link href="/2023/09/02/ner_clinical_pipeline_it.html" rel="alternate" type="text/html" title="Pipeline to Detect Problem, Test and Treatment (Italian)" /><published>2023-09-02T00:00:00+00:00</published><updated>2023-09-02T00:00:00+00:00</updated><id>/2023/09/02/ner_clinical_pipeline_it</id><content type="html" xml:base="/2023/09/02/ner_clinical_pipeline_it.html">## Description

This pretrained pipeline is built on the top of [ner_clinical](https://nlp.johnsnowlabs.com/2023/08/30/ner_clinical_it.html) model.

{:.btn-box}
[Live Demo](https://demo.johnsnowlabs.com/healthcare/NER_CLINICAL_MULTI/){:.button.button-orange}
[Open in Colab](https://colab.research.google.com/github/JohnSnowLabs/spark-nlp-workshop/blob/master/tutorials/streamlit_notebooks/healthcare/NER_CLINICAL_MULTI.ipynb){:.button.button-orange.button-orange-trans.co.button-icon}
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_clinical_pipeline_it_5.0.2_3.0_1693691299270.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_clinical_pipeline_it_5.0.2_3.0_1693691299270.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python

from sparknlp.pretrained import PretrainedPipeline

ner_pipeline = PretrainedPipeline(&quot;ner_clinical_pipeline&quot;, &quot;it&quot;, &quot;clinical/models&quot;)

result = ner_pipeline.annotate(&quot;&quot;&quot;Una donna di 50 anni si è presentata alla clinica ortopedica lamentando dolore persistente, gonfiore e limitata capacità di movimento del ginocchio destro. La paziente ha riferito un'anamnesi di osteoartrite e un precedente infortunio al ginocchio. Sono stati eseguiti un esame clinico e delle radiografie che hanno rivelato un restringimento dello spazio articolare, la formazione di osteofiti e segni di degenerazione della cartilagine. Per confermare la diagnosi e valutarne la gravità, è stata ordinata una risonanza magnetica. La risonanza magnetica ha mostrato un'estesa perdita di cartilagine e alterazioni ossee coerenti con un'osteoartrite avanzata. Dopo aver considerato le condizioni e le preferenze del paziente, è stato discusso un piano di trattamento che prevedeva il controllo del dolore, la fisioterapia e la possibilità di un intervento di sostituzione dell'articolazione.&quot;&quot;&quot;)

```
```scala

import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline

val ner_pipeline = PretrainedPipeline(&quot;ner_clinical_pipeline&quot;, &quot;it&quot;, &quot;clinical/models&quot;)

val result = ner_pipeline.annotate(&quot;&quot;&quot;Una donna di 50 anni si è presentata alla clinica ortopedica lamentando dolore persistente, gonfiore e limitata capacità di movimento del ginocchio destro. La paziente ha riferito un'anamnesi di osteoartrite e un precedente infortunio al ginocchio. Sono stati eseguiti un esame clinico e delle radiografie che hanno rivelato un restringimento dello spazio articolare, la formazione di osteofiti e segni di degenerazione della cartilagine. Per confermare la diagnosi e valutarne la gravità, è stata ordinata una risonanza magnetica. La risonanza magnetica ha mostrato un'estesa perdita di cartilagine e alterazioni ossee coerenti con un'osteoartrite avanzata. Dopo aver considerato le condizioni e le preferenze del paziente, è stato discusso un piano di trattamento che prevedeva il controllo del dolore, la fisioterapia e la possibilità di un intervento di sostituzione dell'articolazione.&quot;&quot;&quot;)

```
&lt;/div&gt;

## Results

```bash
|    | chunks                                              |   begin |   end | entities   |
|---:|:----------------------------------------------------|--------:|------:|:-----------|
|  0 | dolore persistente                                  |      72 |    89 | PROBLEM    |
|  1 | gonfiore                                            |      92 |    99 | PROBLEM    |
|  2 | limitata capacità di movimento del ginocchio destro |     103 |   153 | PROBLEM    |
|  3 | osteoartrite                                        |     195 |   206 | PROBLEM    |
|  4 | infortunio al ginocchio                             |     224 |   246 | PROBLEM    |
|  5 | un esame clinico                                    |     269 |   284 | TEST       |
|  6 | delle radiografie                                   |     288 |   304 | TEST       |
|  7 | un restringimento dello spazio articolare           |     325 |   365 | PROBLEM    |
|  8 | formazione di osteofiti                             |     371 |   393 | PROBLEM    |
|  9 | segni di degenerazione della cartilagine            |     397 |   436 | PROBLEM    |
| 10 | una risonanza magnetica                             |     507 |   529 | TEST       |
| 11 | La risonanza magnetica                              |     532 |   553 | TEST       |
| 12 | un'estesa perdita di cartilagine                    |     567 |   598 | PROBLEM    |
| 13 | alterazioni ossee coerenti                          |     602 |   627 | PROBLEM    |
| 14 | un'osteoartrite avanzata                            |     633 |   656 | PROBLEM    |
| 15 | dolore                                              |     797 |   802 | PROBLEM    |
| 16 | fisioterapia                                        |     808 |   819 | TREATMENT  |
| 17 | un intervento di sostituzione dell'articolazione    |     841 |   888 | TREATMENT  |
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_clinical_pipeline|
|Type:|pipeline|
|Compatibility:|Healthcare NLP 5.0.2+|
|License:|Licensed|
|Edition:|Official|
|Language:|it|
|Size:|1.2 GB|

## Included Models

- DocumentAssembler
- SentenceDetectorDLModel
- TokenizerModel
- WordEmbeddingsModel
- MedicalNerModel
- NerConverterInternalModel</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="it" /><category term="clinical" /><category term="pipeline" /><category term="ner" /><summary type="html">Description This pretrained pipeline is built on the top of ner_clinical model. Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU from sparknlp.pretrained import PretrainedPipeline ner_pipeline = PretrainedPipeline(&quot;ner_clinical_pipeline&quot;, &quot;it&quot;, &quot;clinical/models&quot;) result = ner_pipeline.annotate(&quot;&quot;&quot;Una donna di 50 anni si è presentata alla clinica ortopedica lamentando dolore persistente, gonfiore e limitata capacità di movimento del ginocchio destro. La paziente ha riferito un'anamnesi di osteoartrite e un precedente infortunio al ginocchio. Sono stati eseguiti un esame clinico e delle radiografie che hanno rivelato un restringimento dello spazio articolare, la formazione di osteofiti e segni di degenerazione della cartilagine. Per confermare la diagnosi e valutarne la gravità, è stata ordinata una risonanza magnetica. La risonanza magnetica ha mostrato un'estesa perdita di cartilagine e alterazioni ossee coerenti con un'osteoartrite avanzata. Dopo aver considerato le condizioni e le preferenze del paziente, è stato discusso un piano di trattamento che prevedeva il controllo del dolore, la fisioterapia e la possibilità di un intervento di sostituzione dell'articolazione.&quot;&quot;&quot;) import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline val ner_pipeline = PretrainedPipeline(&quot;ner_clinical_pipeline&quot;, &quot;it&quot;, &quot;clinical/models&quot;) val result = ner_pipeline.annotate(&quot;&quot;&quot;Una donna di 50 anni si è presentata alla clinica ortopedica lamentando dolore persistente, gonfiore e limitata capacità di movimento del ginocchio destro. La paziente ha riferito un'anamnesi di osteoartrite e un precedente infortunio al ginocchio. Sono stati eseguiti un esame clinico e delle radiografie che hanno rivelato un restringimento dello spazio articolare, la formazione di osteofiti e segni di degenerazione della cartilagine. Per confermare la diagnosi e valutarne la gravità, è stata ordinata una risonanza magnetica. La risonanza magnetica ha mostrato un'estesa perdita di cartilagine e alterazioni ossee coerenti con un'osteoartrite avanzata. Dopo aver considerato le condizioni e le preferenze del paziente, è stato discusso un piano di trattamento che prevedeva il controllo del dolore, la fisioterapia e la possibilità di un intervento di sostituzione dell'articolazione.&quot;&quot;&quot;) Results | | chunks | begin | end | entities | |---:|:----------------------------------------------------|--------:|------:|:-----------| | 0 | dolore persistente | 72 | 89 | PROBLEM | | 1 | gonfiore | 92 | 99 | PROBLEM | | 2 | limitata capacità di movimento del ginocchio destro | 103 | 153 | PROBLEM | | 3 | osteoartrite | 195 | 206 | PROBLEM | | 4 | infortunio al ginocchio | 224 | 246 | PROBLEM | | 5 | un esame clinico | 269 | 284 | TEST | | 6 | delle radiografie | 288 | 304 | TEST | | 7 | un restringimento dello spazio articolare | 325 | 365 | PROBLEM | | 8 | formazione di osteofiti | 371 | 393 | PROBLEM | | 9 | segni di degenerazione della cartilagine | 397 | 436 | PROBLEM | | 10 | una risonanza magnetica | 507 | 529 | TEST | | 11 | La risonanza magnetica | 532 | 553 | TEST | | 12 | un'estesa perdita di cartilagine | 567 | 598 | PROBLEM | | 13 | alterazioni ossee coerenti | 602 | 627 | PROBLEM | | 14 | un'osteoartrite avanzata | 633 | 656 | PROBLEM | | 15 | dolore | 797 | 802 | PROBLEM | | 16 | fisioterapia | 808 | 819 | TREATMENT | | 17 | un intervento di sostituzione dell'articolazione | 841 | 888 | TREATMENT | Model Information Model Name: ner_clinical_pipeline Type: pipeline Compatibility: Healthcare NLP 5.0.2+ License: Licensed Edition: Official Language: it Size: 1.2 GB Included Models DocumentAssembler SentenceDetectorDLModel TokenizerModel WordEmbeddingsModel MedicalNerModel NerConverterInternalModel</summary></entry></feed>