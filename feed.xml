<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2024-02-05T16:06:01+00:00</updated><id>/feed.xml</id><title type="html">Spark NLP</title><subtitle>High Performance NLP with Apache Spark
</subtitle><author><name>{&quot;type&quot;=&gt;nil, &quot;name&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;avatar&quot;=&gt;nil, &quot;bio&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;facebook&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;weibo&quot;=&gt;nil, &quot;googleplus&quot;=&gt;nil, &quot;telegram&quot;=&gt;nil, &quot;medium&quot;=&gt;nil, &quot;zhihu&quot;=&gt;nil, &quot;douban&quot;=&gt;nil, &quot;linkedin&quot;=&gt;nil, &quot;github&quot;=&gt;nil, &quot;npm&quot;=&gt;nil}</name></author><entry><title type="html">Explain Clinical Document - Granular</title><link href="/2024/01/26/explain_clinical_doc_granular_en.html" rel="alternate" type="text/html" title="Explain Clinical Document - Granular" /><published>2024-01-26T00:00:00+00:00</published><updated>2024-01-26T00:00:00+00:00</updated><id>/2024/01/26/explain_clinical_doc_granular_en</id><content type="html" xml:base="/2024/01/26/explain_clinical_doc_granular_en.html">## Description

This pipeline is designed to:

- extract clinical entities
- assign assertion status to the extracted entities
- establish relations between the extracted entities

from clinical texts. In this pipeline, [ner_jsl](https://nlp.johnsnowlabs.com/2022/10/19/ner_jsl_en.html) NER model, [assertion_jsl](https://nlp.johnsnowlabs.com/2021/07/24/assertion_jsl_en.html) assertion model, and [re_test_result_date](https://nlp.johnsnowlabs.com/2021/02/24/re_test_result_date_en.html) relation extraction model were used to achieve those tasks. Here are the NER, assertion, and relation extraction labels this pipeline can extract.

- Clinical Entity Labels: `Admission_Discharge`, `Age`, `Alcohol`, `Allergen`, `BMI`, `Birth_Entity`, `Blood_Pressure`, `Cerebrovascular_Disease`, `Clinical_Dept`, `Communicable_Disease`, `Date`, `Death_Entity`, `Diabetes`, `Diet`, `Direction`, `Disease_Syndrome_Disorder`, `Dosage`, `Drug_BrandName`, `Drug_Ingredient`, `Duration`, `EKG_Findings`, `Employment`, `External_body_part_or_region`, `Family_History_Header`, `Fetus_NewBorn`, `Form`, `Frequency`, `Gender`, `HDL`, `Heart_Disease`, `Height`, `Hyperlipidemia`, `Hypertension`, `ImagingFindings`, `Imaging_Technique`, `Injury_or_Poisoning`, `Internal_organ_or_component`, `Kidney_Disease`, `LDL`, `Labour_Delivery`, `Medical_Device`, `Medical_History_Header`, `Modifier`, `O2_Saturation`, `Obesity`, `Oncological`, `Overweight`, `Oxygen_Therapy`, `Pregnancy`, `Procedure`, `Psychological_Condition`, `Pulse`, `Race_Ethnicity`, `Relationship_Status`, `RelativeDate`, `RelativeTime`, `Respiration`, `Route`, `Section_Header`, `Sexually_Active_or_Sexual_Orientation`, `Smoking`, `Social_History_Header`, `Strength`, `Substance`, `Substance_Quantity`, `Symptom`, `Temperature`, `Test`, `Test_Result`, `Time`, `Total_Cholesterol`, `Treatment`, `Triglycerides`, `VS_Finding`, `Vaccine`, `Vaccine_Name`, `Vital_Signs_Header`, `Weight`

- Assertion Status Labels: `Hypothetical`, `Someoneelse`, `Past`, `Absent`, `Family`, `Planned`, `Possible`, `Present`

- Relation Extraction Labels: `is_finding_of`, `is_date_of`, `is_result_of`, `O`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/explain_clinical_doc_granular_en_5.2.1_3.2_1706284354756.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/explain_clinical_doc_granular_en_5.2.1_3.2_1706284354756.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python

from sparknlp.pretrained import PretrainedPipeline

ner_pipeline = PretrainedPipeline(&quot;explain_clinical_doc_granular&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

result = ner_pipeline.fullAnnotate(&quot;&quot;&quot;The patient admitted for gastrointestinal pathology, under working treatment.
History of prior heart murmur with echocardiogram findings as above on March 1998.
According to the latest echocardiogram, basically revealed normal left ventricular function with left atrial enlargement .
Based on the above findings, we will treat her medically with ACE inhibitors and diuretics and see how she fares.&quot;&quot;&quot;)

```
```scala

import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline

val ner_pipeline = PretrainedPipeline(&quot;explain_clinical_doc_granular&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

val result = ner_pipeline.fullAnnotate(&quot;&quot;&quot;The patient admitted for gastrointestinal pathology, under working treatment.
History of prior heart murmur with echocardiogram findings as above on March 1998.
According to the latest echocardiogram, basically revealed normal left ventricular function with left atrial enlargement .
Based on the above findings, we will treat her medically with ACE inhibitors and diuretics and see how she fares.&quot;&quot;&quot;)

```
&lt;/div&gt;

## Results

```bash
# ner

|    | chunks                     |   begin |   end | entities            |
|---:|:---------------------------|--------:|------:|:--------------------|
|  0 | admitted                   |      12 |    19 | Admission_Discharge |
|  1 | gastrointestinal pathology |      25 |    50 | Clinical_Dept       |
|  2 | heart murmur               |      95 |   106 | Heart_Disease       |
|  3 | echocardiogram             |     113 |   126 | Test                |
|  4 | March 1998                 |     149 |   158 | Date                |
|  5 | echocardiogram             |     185 |   198 | Test                |
|  6 | normal                     |     220 |   225 | Test_Result         |
|  7 | left ventricular function  |     227 |   251 | Test                |
|  8 | left atrial enlargement    |     258 |   280 | Heart_Disease       |
|  9 | her                        |     327 |   329 | Gender              |
| 10 | ACE inhibitors             |     346 |   359 | Drug_Ingredient     |
| 11 | diuretics                  |     365 |   373 | Drug_Ingredient     |
| 12 | she                        |     387 |   389 | Gender              |

# assertion

|sentence_id|begin|end|entity                   |label          |assertion_status|
+-----------+-----+---+-------------------------+---------------+----------------+
|1          |96   |107|heart murmur             |Heart_Disease  |Past            |
|1          |114  |127|echocardiogram           |Test           |Past            |
|2          |187  |200|echocardiogram           |Test           |Present         |
|2          |222  |227|normal                   |Test_Result    |Present         |
|2          |229  |253|left ventricular function|Test           |Present         |
|2          |260  |282|left atrial enlargement  |Heart_Disease  |Present         |
|3          |348  |361|ACE inhibitors           |Drug_Ingredient|Planned         |
|3          |367  |375|diuretics                |Drug_Ingredient|Planned         |


#relation

|sentence_id|relations    |relations_entity1|relations_chunk1         |relations_entity2|relations_chunk2         |
+-----------+-------------+-----------------+-------------------------+-----------------+-------------------------+
|1          |is_finding_of|Heart_Disease    |heart murmur             |Test             |echocardiogram           |
|1          |is_date_of   |Heart_Disease    |heart murmur             |Date             |March 1998               |
|1          |is_date_of   |Test             |echocardiogram           |Date             |March 1998               |
|2          |is_finding_of|Test             |echocardiogram           |Heart_Disease    |left atrial enlargement  |
|2          |is_result_of |Test_Result      |normal                   |Test             |left ventricular function|
|2          |is_finding_of|Test             |left ventricular function|Heart_Disease    |left atrial enlargement  |
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|explain_clinical_doc_granular|
|Type:|pipeline|
|Compatibility:|Healthcare NLP 5.2.1+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|1.7 GB|

## Included Models

- DocumentAssembler
- SentenceDetectorDLModel
- TokenizerModel
- WordEmbeddingsModel
- MedicalNerModel
- NerConverterInternalModel
- NerConverterInternalModel
- AssertionDLModel
- PerceptronModel
- DependencyParserModel
- RelationExtractionModel</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="en" /><category term="entity_resolution" /><category term="relation_extraction" /><category term="assertion_status" /><category term="clinical" /><category term="pipeline" /><category term="granular" /><summary type="html">Description This pipeline is designed to: extract clinical entities assign assertion status to the extracted entities establish relations between the extracted entities from clinical texts. In this pipeline, ner_jsl NER model, assertion_jsl assertion model, and re_test_result_date relation extraction model were used to achieve those tasks. Here are the NER, assertion, and relation extraction labels this pipeline can extract. Clinical Entity Labels: Admission_Discharge, Age, Alcohol, Allergen, BMI, Birth_Entity, Blood_Pressure, Cerebrovascular_Disease, Clinical_Dept, Communicable_Disease, Date, Death_Entity, Diabetes, Diet, Direction, Disease_Syndrome_Disorder, Dosage, Drug_BrandName, Drug_Ingredient, Duration, EKG_Findings, Employment, External_body_part_or_region, Family_History_Header, Fetus_NewBorn, Form, Frequency, Gender, HDL, Heart_Disease, Height, Hyperlipidemia, Hypertension, ImagingFindings, Imaging_Technique, Injury_or_Poisoning, Internal_organ_or_component, Kidney_Disease, LDL, Labour_Delivery, Medical_Device, Medical_History_Header, Modifier, O2_Saturation, Obesity, Oncological, Overweight, Oxygen_Therapy, Pregnancy, Procedure, Psychological_Condition, Pulse, Race_Ethnicity, Relationship_Status, RelativeDate, RelativeTime, Respiration, Route, Section_Header, Sexually_Active_or_Sexual_Orientation, Smoking, Social_History_Header, Strength, Substance, Substance_Quantity, Symptom, Temperature, Test, Test_Result, Time, Total_Cholesterol, Treatment, Triglycerides, VS_Finding, Vaccine, Vaccine_Name, Vital_Signs_Header, Weight Assertion Status Labels: Hypothetical, Someoneelse, Past, Absent, Family, Planned, Possible, Present Relation Extraction Labels: is_finding_of, is_date_of, is_result_of, O Live Demo Open in Colab Download Copy S3 URI How to use PythonJSLScalaNLU from sparknlp.pretrained import PretrainedPipeline ner_pipeline = PretrainedPipeline(&quot;explain_clinical_doc_granular&quot;, &quot;en&quot;, &quot;clinical/models&quot;) result = ner_pipeline.fullAnnotate(&quot;&quot;&quot;The patient admitted for gastrointestinal pathology, under working treatment. History of prior heart murmur with echocardiogram findings as above on March 1998. According to the latest echocardiogram, basically revealed normal left ventricular function with left atrial enlargement . Based on the above findings, we will treat her medically with ACE inhibitors and diuretics and see how she fares.&quot;&quot;&quot;) import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline val ner_pipeline = PretrainedPipeline(&quot;explain_clinical_doc_granular&quot;, &quot;en&quot;, &quot;clinical/models&quot;) val result = ner_pipeline.fullAnnotate(&quot;&quot;&quot;The patient admitted for gastrointestinal pathology, under working treatment. History of prior heart murmur with echocardiogram findings as above on March 1998. According to the latest echocardiogram, basically revealed normal left ventricular function with left atrial enlargement . Based on the above findings, we will treat her medically with ACE inhibitors and diuretics and see how she fares.&quot;&quot;&quot;) Results # ner | | chunks | begin | end | entities | |---:|:---------------------------|--------:|------:|:--------------------| | 0 | admitted | 12 | 19 | Admission_Discharge | | 1 | gastrointestinal pathology | 25 | 50 | Clinical_Dept | | 2 | heart murmur | 95 | 106 | Heart_Disease | | 3 | echocardiogram | 113 | 126 | Test | | 4 | March 1998 | 149 | 158 | Date | | 5 | echocardiogram | 185 | 198 | Test | | 6 | normal | 220 | 225 | Test_Result | | 7 | left ventricular function | 227 | 251 | Test | | 8 | left atrial enlargement | 258 | 280 | Heart_Disease | | 9 | her | 327 | 329 | Gender | | 10 | ACE inhibitors | 346 | 359 | Drug_Ingredient | | 11 | diuretics | 365 | 373 | Drug_Ingredient | | 12 | she | 387 | 389 | Gender | # assertion |sentence_id|begin|end|entity |label |assertion_status| +-----------+-----+---+-------------------------+---------------+----------------+ |1 |96 |107|heart murmur |Heart_Disease |Past | |1 |114 |127|echocardiogram |Test |Past | |2 |187 |200|echocardiogram |Test |Present | |2 |222 |227|normal |Test_Result |Present | |2 |229 |253|left ventricular function|Test |Present | |2 |260 |282|left atrial enlargement |Heart_Disease |Present | |3 |348 |361|ACE inhibitors |Drug_Ingredient|Planned | |3 |367 |375|diuretics |Drug_Ingredient|Planned | #relation |sentence_id|relations |relations_entity1|relations_chunk1 |relations_entity2|relations_chunk2 | +-----------+-------------+-----------------+-------------------------+-----------------+-------------------------+ |1 |is_finding_of|Heart_Disease |heart murmur |Test |echocardiogram | |1 |is_date_of |Heart_Disease |heart murmur |Date |March 1998 | |1 |is_date_of |Test |echocardiogram |Date |March 1998 | |2 |is_finding_of|Test |echocardiogram |Heart_Disease |left atrial enlargement | |2 |is_result_of |Test_Result |normal |Test |left ventricular function| |2 |is_finding_of|Test |left ventricular function|Heart_Disease |left atrial enlargement | Model Information Model Name: explain_clinical_doc_granular Type: pipeline Compatibility: Healthcare NLP 5.2.1+ License: Licensed Edition: Official Language: en Size: 1.7 GB Included Models DocumentAssembler SentenceDetectorDLModel TokenizerModel WordEmbeddingsModel MedicalNerModel NerConverterInternalModel NerConverterInternalModel AssertionDLModel PerceptronModel DependencyParserModel RelationExtractionModel</summary></entry><entry><title type="html">Pipeline for Medical Subject Heading (MeSH) Sentence Entity Resolver</title><link href="/2024/01/25/mesh_resolver_pipeline_en.html" rel="alternate" type="text/html" title="Pipeline for Medical Subject Heading (MeSH) Sentence Entity Resolver" /><published>2024-01-25T00:00:00+00:00</published><updated>2024-01-25T00:00:00+00:00</updated><id>/2024/01/25/mesh_resolver_pipeline_en</id><content type="html" xml:base="/2024/01/25/mesh_resolver_pipeline_en.html">## Description

This advanced pipeline extracts clinical entities from clinical texts and utilizes the `sbiobert_base_cased_mli` Sentence Bert Embeddings to map these entities to their corresponding Medical Subject Heading (MeSH) codes.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/mesh_resolver_pipeline_en_5.2.1_3.2_1706188411594.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/mesh_resolver_pipeline_en_5.2.1_3.2_1706188411594.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python

from sparknlp.pretrained import PretrainedPipeline

ner_pipeline = PretrainedPipeline(&quot;mesh_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

result = ner_pipeline.annotate(&quot;&quot;&quot;She was admitted to the hospital with chest pain and found to have bilateral pleural effusion, the right greater than the left. We reviewed the pathology obtained from the pericardectomy in March 2006, which was diagnostic of mesothelioma. At this time, chest tube placement for drainage of the fluid occurred and thoracoscopy with fluid biopsies, which were performed, which revealed malignant mesothelioma.&quot;&quot;&quot;)

```
```scala

import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline

val ner_pipeline = PretrainedPipeline(&quot;mesh_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

val result = ner_pipeline.annotate(&quot;&quot;&quot;She was admitted to the hospital with chest pain and found to have bilateral pleural effusion, the right greater than the left. We reviewed the pathology obtained from the pericardectomy in March 2006, which was diagnostic of mesothelioma. At this time, chest tube placement for drainage of the fluid occurred and thoracoscopy with fluid biopsies, which were performed, which revealed malignant mesothelioma.&quot;&quot;&quot;)

```
&lt;/div&gt;

## Results

```bash
|   |                     chunks | begin | end |  entities |  mesh_code |             description |                                       resolutions |
|--:|---------------------------:|------:|----:|----------:|-----------:|------------------------:|--------------------------------------------------:|
| 0 |                 chest pain |    38 |  47 |   PROBLEM |    D002637 |              Chest Pain | Chest Pain:::Chronic Pain:::Neck Pain:::Should... |
| 1 | bilateral pleural effusion |    67 |  92 |   PROBLEM |    D010996 |        Pleural Effusion | Pleural Effusion:::Pericardial Effusion:::Pulm... |
| 2 |              the pathology |   140 | 152 |      TEST |    D010336 |               Pathology | Pathology:::Pathologic Processes:::Anus Diseas... |
| 3 |         the pericardectomy |   168 | 185 | TREATMENT |    D010492 |         Pericardiectomy | Pericardiectomy:::Pulpectomy:::Pleurodesis:::C... |
| 4 |               mesothelioma |   226 | 237 |   PROBLEM | D000086002 | Mesothelioma, Malignant | Mesothelioma, Malignant:::Malignant mesenchyma... |
| 5 |       chest tube placement |   254 | 273 | TREATMENT |    D015505 |             Chest Tubes | Chest Tubes:::Thoracic Surgical Procedures:::T... |
| 6 |      drainage of the fluid |   279 | 299 |   PROBLEM |    D004322 |                Drainage | Drainage:::Fluid Shifts:::Bonain's liquid:::Li... |
| 7 |               thoracoscopy |   314 | 325 | TREATMENT |    D013906 |            Thoracoscopy | Thoracoscopy:::Thoracoscopes:::Thoracic Cavity... |
| 8 |             fluid biopsies |   332 | 345 |      TEST | D000073890 |           Liquid Biopsy | Liquid Biopsy:::Peritoneal Lavage:::Cyst Fluid... |
| 9 |     malignant mesothelioma |   385 | 406 |   PROBLEM | D000086002 | Mesothelioma, Malignant | Mesothelioma, Malignant:::Malignant mesenchyma... |
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|mesh_resolver_pipeline|
|Type:|pipeline|
|Compatibility:|Healthcare NLP 5.2.1+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|3.1 GB|

## Included Models

- DocumentAssembler
- SentenceDetectorDLModel
- TokenizerModel
- WordEmbeddingsModel
- MedicalNerModel
- NerConverterInternalModel
- Chunk2Doc
- BertSentenceEmbeddings
- SentenceEntityResolverModel</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="en" /><category term="entity_resolution" /><category term="clinical" /><category term="pipeline" /><category term="mesh" /><summary type="html">Description This advanced pipeline extracts clinical entities from clinical texts and utilizes the sbiobert_base_cased_mli Sentence Bert Embeddings to map these entities to their corresponding Medical Subject Heading (MeSH) codes. Live Demo Open in Colab Download Copy S3 URI How to use PythonJSLScalaNLU from sparknlp.pretrained import PretrainedPipeline ner_pipeline = PretrainedPipeline(&quot;mesh_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) result = ner_pipeline.annotate(&quot;&quot;&quot;She was admitted to the hospital with chest pain and found to have bilateral pleural effusion, the right greater than the left. We reviewed the pathology obtained from the pericardectomy in March 2006, which was diagnostic of mesothelioma. At this time, chest tube placement for drainage of the fluid occurred and thoracoscopy with fluid biopsies, which were performed, which revealed malignant mesothelioma.&quot;&quot;&quot;) import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline val ner_pipeline = PretrainedPipeline(&quot;mesh_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) val result = ner_pipeline.annotate(&quot;&quot;&quot;She was admitted to the hospital with chest pain and found to have bilateral pleural effusion, the right greater than the left. We reviewed the pathology obtained from the pericardectomy in March 2006, which was diagnostic of mesothelioma. At this time, chest tube placement for drainage of the fluid occurred and thoracoscopy with fluid biopsies, which were performed, which revealed malignant mesothelioma.&quot;&quot;&quot;) Results | | chunks | begin | end | entities | mesh_code | description | resolutions | |--:|---------------------------:|------:|----:|----------:|-----------:|------------------------:|--------------------------------------------------:| | 0 | chest pain | 38 | 47 | PROBLEM | D002637 | Chest Pain | Chest Pain:::Chronic Pain:::Neck Pain:::Should... | | 1 | bilateral pleural effusion | 67 | 92 | PROBLEM | D010996 | Pleural Effusion | Pleural Effusion:::Pericardial Effusion:::Pulm... | | 2 | the pathology | 140 | 152 | TEST | D010336 | Pathology | Pathology:::Pathologic Processes:::Anus Diseas... | | 3 | the pericardectomy | 168 | 185 | TREATMENT | D010492 | Pericardiectomy | Pericardiectomy:::Pulpectomy:::Pleurodesis:::C... | | 4 | mesothelioma | 226 | 237 | PROBLEM | D000086002 | Mesothelioma, Malignant | Mesothelioma, Malignant:::Malignant mesenchyma... | | 5 | chest tube placement | 254 | 273 | TREATMENT | D015505 | Chest Tubes | Chest Tubes:::Thoracic Surgical Procedures:::T... | | 6 | drainage of the fluid | 279 | 299 | PROBLEM | D004322 | Drainage | Drainage:::Fluid Shifts:::Bonain's liquid:::Li... | | 7 | thoracoscopy | 314 | 325 | TREATMENT | D013906 | Thoracoscopy | Thoracoscopy:::Thoracoscopes:::Thoracic Cavity... | | 8 | fluid biopsies | 332 | 345 | TEST | D000073890 | Liquid Biopsy | Liquid Biopsy:::Peritoneal Lavage:::Cyst Fluid... | | 9 | malignant mesothelioma | 385 | 406 | PROBLEM | D000086002 | Mesothelioma, Malignant | Mesothelioma, Malignant:::Malignant mesenchyma... | Model Information Model Name: mesh_resolver_pipeline Type: pipeline Compatibility: Healthcare NLP 5.2.1+ License: Licensed Edition: Official Language: en Size: 3.1 GB Included Models DocumentAssembler SentenceDetectorDLModel TokenizerModel WordEmbeddingsModel MedicalNerModel NerConverterInternalModel Chunk2Doc BertSentenceEmbeddings SentenceEntityResolverModel</summary></entry><entry><title type="html">Pipeline for National Drug Codes (NDC) Sentence Entity Resolver</title><link href="/2024/01/25/ndc_resolver_pipeline_en.html" rel="alternate" type="text/html" title="Pipeline for National Drug Codes (NDC) Sentence Entity Resolver" /><published>2024-01-25T00:00:00+00:00</published><updated>2024-01-25T00:00:00+00:00</updated><id>/2024/01/25/ndc_resolver_pipeline_en</id><content type="html" xml:base="/2024/01/25/ndc_resolver_pipeline_en.html">## Description

This advanced pipeline extracts medication entities from clinical texts and utilizes the `sbiobert_base_cased_mli` Sentence Bert Embeddings to map these entities to their corresponding National Drug Codes (NDC) codes.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ndc_resolver_pipeline_en_5.2.1_3.2_1706206269600.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ndc_resolver_pipeline_en_5.2.1_3.2_1706206269600.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python

from sparknlp.pretrained import PretrainedPipeline

ner_pipeline = PretrainedPipeline(&quot;ndc_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

result = ner_pipeline.annotate(&quot;&quot;&quot;The patient was given aspirin 81 mg and metformin 500 mg&quot;&quot;&quot;)

```
```scala

import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline

val ner_pipeline = PretrainedPipeline(&quot;ndc_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

val result = ner_pipeline.annotate(&quot;&quot;&quot;The patient was given aspirin 81 mg and metformin 500 mg&quot;&quot;&quot;)

```
&lt;/div&gt;

## Results

```bash
+----------------+-----+---+---------+----------+-------------------+--------------------------------------------------------------------------------+
|           chunk|begin|end|ner_label|       ndc|        description|                                                                      aux_labels|
+----------------+-----+---+---------+----------+-------------------+--------------------------------------------------------------------------------+
|   aspirin 81 mg|   22| 34|     DRUG|41250-0780|      aspirin 81 mg|{'packages': &quot;['1 BOTTLE, PLASTIC in 1 PACKAGE (41250-780-01)  &gt; 120 TABLET, ...|
|metformin 500 mg|   40| 55|     DRUG|62207-0491|metformin er 500 mg|{'packages': &quot;['5000 TABLET in 1 POUCH (62207-491-31)', '25000 TABLET in 1 CA...|
+----------------+-----+---+---------+----------+-------------------+--------------------------------------------------------------------------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ndc_resolver_pipeline|
|Type:|pipeline|
|Compatibility:|Healthcare NLP 5.2.1+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|3.0 GB|

## Included Models

- DocumentAssembler
- SentenceDetectorDLModel
- TokenizerModel
- WordEmbeddingsModel
- MedicalNerModel
- NerConverter
- Chunk2Doc
- BertSentenceEmbeddings
- SentenceEntityResolverModel</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="en" /><category term="entity_resolution" /><category term="clinical" /><category term="pipeline" /><category term="ndc" /><summary type="html">Description This advanced pipeline extracts medication entities from clinical texts and utilizes the sbiobert_base_cased_mli Sentence Bert Embeddings to map these entities to their corresponding National Drug Codes (NDC) codes. Live Demo Open in Colab Download Copy S3 URI How to use PythonJSLScalaNLU from sparknlp.pretrained import PretrainedPipeline ner_pipeline = PretrainedPipeline(&quot;ndc_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) result = ner_pipeline.annotate(&quot;&quot;&quot;The patient was given aspirin 81 mg and metformin 500 mg&quot;&quot;&quot;) import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline val ner_pipeline = PretrainedPipeline(&quot;ndc_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) val result = ner_pipeline.annotate(&quot;&quot;&quot;The patient was given aspirin 81 mg and metformin 500 mg&quot;&quot;&quot;) Results +----------------+-----+---+---------+----------+-------------------+--------------------------------------------------------------------------------+ | chunk|begin|end|ner_label| ndc| description| aux_labels| +----------------+-----+---+---------+----------+-------------------+--------------------------------------------------------------------------------+ | aspirin 81 mg| 22| 34| DRUG|41250-0780| aspirin 81 mg|{'packages': &quot;['1 BOTTLE, PLASTIC in 1 PACKAGE (41250-780-01) &amp;gt; 120 TABLET, ...| |metformin 500 mg| 40| 55| DRUG|62207-0491|metformin er 500 mg|{'packages': &quot;['5000 TABLET in 1 POUCH (62207-491-31)', '25000 TABLET in 1 CA...| +----------------+-----+---+---------+----------+-------------------+--------------------------------------------------------------------------------+ Model Information Model Name: ndc_resolver_pipeline Type: pipeline Compatibility: Healthcare NLP 5.2.1+ License: Licensed Edition: Official Language: en Size: 3.0 GB Included Models DocumentAssembler SentenceDetectorDLModel TokenizerModel WordEmbeddingsModel MedicalNerModel NerConverter Chunk2Doc BertSentenceEmbeddings SentenceEntityResolverModel</summary></entry><entry><title type="html">Pipeline for Medical Subject Heading (MeSH) Sentence Entity Resolver</title><link href="/2024/01/25/mesh_resolver_pipeline_en.html" rel="alternate" type="text/html" title="Pipeline for Medical Subject Heading (MeSH) Sentence Entity Resolver" /><published>2024-01-25T00:00:00+00:00</published><updated>2024-01-25T00:00:00+00:00</updated><id>/2024/01/25/mesh_resolver_pipeline_en</id><content type="html" xml:base="/2024/01/25/mesh_resolver_pipeline_en.html">## Description

This advanced pipeline extracts clinical entities from clinical texts and utilizes the `sbiobert_base_cased_mli` Sentence Bert Embeddings to map these entities to their corresponding Medical Subject Heading (MeSH) codes.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/mesh_resolver_pipeline_en_5.2.1_3.4_1706189203252.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/mesh_resolver_pipeline_en_5.2.1_3.4_1706189203252.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python

from sparknlp.pretrained import PretrainedPipeline

ner_pipeline = PretrainedPipeline(&quot;mesh_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

result = ner_pipeline.annotate(&quot;&quot;&quot;She was admitted to the hospital with chest pain and found to have bilateral pleural effusion, the right greater than the left. We reviewed the pathology obtained from the pericardectomy in March 2006, which was diagnostic of mesothelioma. At this time, chest tube placement for drainage of the fluid occurred and thoracoscopy with fluid biopsies, which were performed, which revealed malignant mesothelioma.&quot;&quot;&quot;)

```
```scala

import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline

val ner_pipeline = PretrainedPipeline(&quot;mesh_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

val result = ner_pipeline.annotate(&quot;&quot;&quot;She was admitted to the hospital with chest pain and found to have bilateral pleural effusion, the right greater than the left. We reviewed the pathology obtained from the pericardectomy in March 2006, which was diagnostic of mesothelioma. At this time, chest tube placement for drainage of the fluid occurred and thoracoscopy with fluid biopsies, which were performed, which revealed malignant mesothelioma.&quot;&quot;&quot;)

```
&lt;/div&gt;

## Results

```bash
|   |                     chunks | begin | end |  entities |  mesh_code |             description |                                       resolutions |
|--:|---------------------------:|------:|----:|----------:|-----------:|------------------------:|--------------------------------------------------:|
| 0 |                 chest pain |    38 |  47 |   PROBLEM |    D002637 |              Chest Pain | Chest Pain:::Chronic Pain:::Neck Pain:::Should... |
| 1 | bilateral pleural effusion |    67 |  92 |   PROBLEM |    D010996 |        Pleural Effusion | Pleural Effusion:::Pericardial Effusion:::Pulm... |
| 2 |              the pathology |   140 | 152 |      TEST |    D010336 |               Pathology | Pathology:::Pathologic Processes:::Anus Diseas... |
| 3 |         the pericardectomy |   168 | 185 | TREATMENT |    D010492 |         Pericardiectomy | Pericardiectomy:::Pulpectomy:::Pleurodesis:::C... |
| 4 |               mesothelioma |   226 | 237 |   PROBLEM | D000086002 | Mesothelioma, Malignant | Mesothelioma, Malignant:::Malignant mesenchyma... |
| 5 |       chest tube placement |   254 | 273 | TREATMENT |    D015505 |             Chest Tubes | Chest Tubes:::Thoracic Surgical Procedures:::T... |
| 6 |      drainage of the fluid |   279 | 299 |   PROBLEM |    D004322 |                Drainage | Drainage:::Fluid Shifts:::Bonain's liquid:::Li... |
| 7 |               thoracoscopy |   314 | 325 | TREATMENT |    D013906 |            Thoracoscopy | Thoracoscopy:::Thoracoscopes:::Thoracic Cavity... |
| 8 |             fluid biopsies |   332 | 345 |      TEST | D000073890 |           Liquid Biopsy | Liquid Biopsy:::Peritoneal Lavage:::Cyst Fluid... |
| 9 |     malignant mesothelioma |   385 | 406 |   PROBLEM | D000086002 | Mesothelioma, Malignant | Mesothelioma, Malignant:::Malignant mesenchyma... |
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|mesh_resolver_pipeline|
|Type:|pipeline|
|Compatibility:|Healthcare NLP 5.2.1+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|3.1 GB|

## Included Models

- DocumentAssembler
- SentenceDetectorDLModel
- TokenizerModel
- WordEmbeddingsModel
- MedicalNerModel
- NerConverterInternalModel
- Chunk2Doc
- BertSentenceEmbeddings
- SentenceEntityResolverModel</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="en" /><category term="entity_resolution" /><category term="clinical" /><category term="pipeline" /><category term="mesh" /><summary type="html">Description This advanced pipeline extracts clinical entities from clinical texts and utilizes the sbiobert_base_cased_mli Sentence Bert Embeddings to map these entities to their corresponding Medical Subject Heading (MeSH) codes. Live Demo Open in Colab Download Copy S3 URI How to use PythonJSLScalaNLU from sparknlp.pretrained import PretrainedPipeline ner_pipeline = PretrainedPipeline(&quot;mesh_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) result = ner_pipeline.annotate(&quot;&quot;&quot;She was admitted to the hospital with chest pain and found to have bilateral pleural effusion, the right greater than the left. We reviewed the pathology obtained from the pericardectomy in March 2006, which was diagnostic of mesothelioma. At this time, chest tube placement for drainage of the fluid occurred and thoracoscopy with fluid biopsies, which were performed, which revealed malignant mesothelioma.&quot;&quot;&quot;) import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline val ner_pipeline = PretrainedPipeline(&quot;mesh_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) val result = ner_pipeline.annotate(&quot;&quot;&quot;She was admitted to the hospital with chest pain and found to have bilateral pleural effusion, the right greater than the left. We reviewed the pathology obtained from the pericardectomy in March 2006, which was diagnostic of mesothelioma. At this time, chest tube placement for drainage of the fluid occurred and thoracoscopy with fluid biopsies, which were performed, which revealed malignant mesothelioma.&quot;&quot;&quot;) Results | | chunks | begin | end | entities | mesh_code | description | resolutions | |--:|---------------------------:|------:|----:|----------:|-----------:|------------------------:|--------------------------------------------------:| | 0 | chest pain | 38 | 47 | PROBLEM | D002637 | Chest Pain | Chest Pain:::Chronic Pain:::Neck Pain:::Should... | | 1 | bilateral pleural effusion | 67 | 92 | PROBLEM | D010996 | Pleural Effusion | Pleural Effusion:::Pericardial Effusion:::Pulm... | | 2 | the pathology | 140 | 152 | TEST | D010336 | Pathology | Pathology:::Pathologic Processes:::Anus Diseas... | | 3 | the pericardectomy | 168 | 185 | TREATMENT | D010492 | Pericardiectomy | Pericardiectomy:::Pulpectomy:::Pleurodesis:::C... | | 4 | mesothelioma | 226 | 237 | PROBLEM | D000086002 | Mesothelioma, Malignant | Mesothelioma, Malignant:::Malignant mesenchyma... | | 5 | chest tube placement | 254 | 273 | TREATMENT | D015505 | Chest Tubes | Chest Tubes:::Thoracic Surgical Procedures:::T... | | 6 | drainage of the fluid | 279 | 299 | PROBLEM | D004322 | Drainage | Drainage:::Fluid Shifts:::Bonain's liquid:::Li... | | 7 | thoracoscopy | 314 | 325 | TREATMENT | D013906 | Thoracoscopy | Thoracoscopy:::Thoracoscopes:::Thoracic Cavity... | | 8 | fluid biopsies | 332 | 345 | TEST | D000073890 | Liquid Biopsy | Liquid Biopsy:::Peritoneal Lavage:::Cyst Fluid... | | 9 | malignant mesothelioma | 385 | 406 | PROBLEM | D000086002 | Mesothelioma, Malignant | Mesothelioma, Malignant:::Malignant mesenchyma... | Model Information Model Name: mesh_resolver_pipeline Type: pipeline Compatibility: Healthcare NLP 5.2.1+ License: Licensed Edition: Official Language: en Size: 3.1 GB Included Models DocumentAssembler SentenceDetectorDLModel TokenizerModel WordEmbeddingsModel MedicalNerModel NerConverterInternalModel Chunk2Doc BertSentenceEmbeddings SentenceEntityResolverModel</summary></entry><entry><title type="html">Pipeline for National Drug Codes (NDC) Sentence Entity Resolver</title><link href="/2024/01/25/ndc_resolver_pipeline_en.html" rel="alternate" type="text/html" title="Pipeline for National Drug Codes (NDC) Sentence Entity Resolver" /><published>2024-01-25T00:00:00+00:00</published><updated>2024-01-25T00:00:00+00:00</updated><id>/2024/01/25/ndc_resolver_pipeline_en</id><content type="html" xml:base="/2024/01/25/ndc_resolver_pipeline_en.html">## Description

This advanced pipeline extracts medication entities from clinical texts and utilizes the `sbiobert_base_cased_mli` Sentence Bert Embeddings to map these entities to their corresponding National Drug Codes (NDC) codes.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ndc_resolver_pipeline_en_5.2.1_3.4_1706207015234.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ndc_resolver_pipeline_en_5.2.1_3.4_1706207015234.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python

from sparknlp.pretrained import PretrainedPipeline

ner_pipeline = PretrainedPipeline(&quot;ndc_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

result = ner_pipeline.annotate(&quot;&quot;&quot;The patient was given aspirin 81 mg and metformin 500 mg&quot;&quot;&quot;)

```
```scala

import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline

val ner_pipeline = PretrainedPipeline(&quot;ndc_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

val result = ner_pipeline.annotate(&quot;&quot;&quot;The patient was given aspirin 81 mg and metformin 500 mg&quot;&quot;&quot;)

```
&lt;/div&gt;

## Results

```bash
+----------------+-----+---+---------+----------+-------------------+--------------------------------------------------------------------------------+
|           chunk|begin|end|ner_label|       ndc|        description|                                                                      aux_labels|
+----------------+-----+---+---------+----------+-------------------+--------------------------------------------------------------------------------+
|   aspirin 81 mg|   22| 34|     DRUG|41250-0780|      aspirin 81 mg|{'packages': &quot;['1 BOTTLE, PLASTIC in 1 PACKAGE (41250-780-01)  &gt; 120 TABLET, ...|
|metformin 500 mg|   40| 55|     DRUG|62207-0491|metformin er 500 mg|{'packages': &quot;['5000 TABLET in 1 POUCH (62207-491-31)', '25000 TABLET in 1 CA...|
+----------------+-----+---+---------+----------+-------------------+--------------------------------------------------------------------------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ndc_resolver_pipeline|
|Type:|pipeline|
|Compatibility:|Healthcare NLP 5.2.1+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|3.0 GB|

## Included Models

- DocumentAssembler
- SentenceDetectorDLModel
- TokenizerModel
- WordEmbeddingsModel
- MedicalNerModel
- NerConverter
- Chunk2Doc
- BertSentenceEmbeddings
- SentenceEntityResolverModel</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="en" /><category term="entity_resolution" /><category term="clinical" /><category term="pipeline" /><category term="ndc" /><summary type="html">Description This advanced pipeline extracts medication entities from clinical texts and utilizes the sbiobert_base_cased_mli Sentence Bert Embeddings to map these entities to their corresponding National Drug Codes (NDC) codes. Live Demo Open in Colab Download Copy S3 URI How to use PythonJSLScalaNLU from sparknlp.pretrained import PretrainedPipeline ner_pipeline = PretrainedPipeline(&quot;ndc_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) result = ner_pipeline.annotate(&quot;&quot;&quot;The patient was given aspirin 81 mg and metformin 500 mg&quot;&quot;&quot;) import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline val ner_pipeline = PretrainedPipeline(&quot;ndc_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) val result = ner_pipeline.annotate(&quot;&quot;&quot;The patient was given aspirin 81 mg and metformin 500 mg&quot;&quot;&quot;) Results +----------------+-----+---+---------+----------+-------------------+--------------------------------------------------------------------------------+ | chunk|begin|end|ner_label| ndc| description| aux_labels| +----------------+-----+---+---------+----------+-------------------+--------------------------------------------------------------------------------+ | aspirin 81 mg| 22| 34| DRUG|41250-0780| aspirin 81 mg|{'packages': &quot;['1 BOTTLE, PLASTIC in 1 PACKAGE (41250-780-01) &amp;gt; 120 TABLET, ...| |metformin 500 mg| 40| 55| DRUG|62207-0491|metformin er 500 mg|{'packages': &quot;['5000 TABLET in 1 POUCH (62207-491-31)', '25000 TABLET in 1 CA...| +----------------+-----+---+---------+----------+-------------------+--------------------------------------------------------------------------------+ Model Information Model Name: ndc_resolver_pipeline Type: pipeline Compatibility: Healthcare NLP 5.2.1+ License: Licensed Edition: Official Language: en Size: 3.0 GB Included Models DocumentAssembler SentenceDetectorDLModel TokenizerModel WordEmbeddingsModel MedicalNerModel NerConverter Chunk2Doc BertSentenceEmbeddings SentenceEntityResolverModel</summary></entry><entry><title type="html">Pipeline for Medical Subject Heading (MeSH) Sentence Entity Resolver</title><link href="/2024/01/25/mesh_resolver_pipeline_en.html" rel="alternate" type="text/html" title="Pipeline for Medical Subject Heading (MeSH) Sentence Entity Resolver" /><published>2024-01-25T00:00:00+00:00</published><updated>2024-01-25T00:00:00+00:00</updated><id>/2024/01/25/mesh_resolver_pipeline_en</id><content type="html" xml:base="/2024/01/25/mesh_resolver_pipeline_en.html">## Description

This advanced pipeline extracts clinical entities from clinical texts and utilizes the `sbiobert_base_cased_mli` Sentence Bert Embeddings to map these entities to their corresponding Medical Subject Heading (MeSH) codes.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/mesh_resolver_pipeline_en_5.2.1_3.0_1706187452795.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/mesh_resolver_pipeline_en_5.2.1_3.0_1706187452795.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python

from sparknlp.pretrained import PretrainedPipeline

ner_pipeline = PretrainedPipeline(&quot;mesh_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

result = ner_pipeline.annotate(&quot;&quot;&quot;She was admitted to the hospital with chest pain and found to have bilateral pleural effusion, the right greater than the left. We reviewed the pathology obtained from the pericardectomy in March 2006, which was diagnostic of mesothelioma. At this time, chest tube placement for drainage of the fluid occurred and thoracoscopy with fluid biopsies, which were performed, which revealed malignant mesothelioma.&quot;&quot;&quot;)

```
```scala

import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline

val ner_pipeline = PretrainedPipeline(&quot;mesh_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

val result = ner_pipeline.annotate(&quot;&quot;&quot;She was admitted to the hospital with chest pain and found to have bilateral pleural effusion, the right greater than the left. We reviewed the pathology obtained from the pericardectomy in March 2006, which was diagnostic of mesothelioma. At this time, chest tube placement for drainage of the fluid occurred and thoracoscopy with fluid biopsies, which were performed, which revealed malignant mesothelioma.&quot;&quot;&quot;)

```
&lt;/div&gt;

## Results

```bash
|   |                     chunks | begin | end |  entities |  mesh_code |             description |                                       resolutions |
|--:|---------------------------:|------:|----:|----------:|-----------:|------------------------:|--------------------------------------------------:|
| 0 |                 chest pain |    38 |  47 |   PROBLEM |    D002637 |              Chest Pain | Chest Pain:::Chronic Pain:::Neck Pain:::Should... |
| 1 | bilateral pleural effusion |    67 |  92 |   PROBLEM |    D010996 |        Pleural Effusion | Pleural Effusion:::Pericardial Effusion:::Pulm... |
| 2 |              the pathology |   140 | 152 |      TEST |    D010336 |               Pathology | Pathology:::Pathologic Processes:::Anus Diseas... |
| 3 |         the pericardectomy |   168 | 185 | TREATMENT |    D010492 |         Pericardiectomy | Pericardiectomy:::Pulpectomy:::Pleurodesis:::C... |
| 4 |               mesothelioma |   226 | 237 |   PROBLEM | D000086002 | Mesothelioma, Malignant | Mesothelioma, Malignant:::Malignant mesenchyma... |
| 5 |       chest tube placement |   254 | 273 | TREATMENT |    D015505 |             Chest Tubes | Chest Tubes:::Thoracic Surgical Procedures:::T... |
| 6 |      drainage of the fluid |   279 | 299 |   PROBLEM |    D004322 |                Drainage | Drainage:::Fluid Shifts:::Bonain's liquid:::Li... |
| 7 |               thoracoscopy |   314 | 325 | TREATMENT |    D013906 |            Thoracoscopy | Thoracoscopy:::Thoracoscopes:::Thoracic Cavity... |
| 8 |             fluid biopsies |   332 | 345 |      TEST | D000073890 |           Liquid Biopsy | Liquid Biopsy:::Peritoneal Lavage:::Cyst Fluid... |
| 9 |     malignant mesothelioma |   385 | 406 |   PROBLEM | D000086002 | Mesothelioma, Malignant | Mesothelioma, Malignant:::Malignant mesenchyma... |
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|mesh_resolver_pipeline|
|Type:|pipeline|
|Compatibility:|Healthcare NLP 5.2.1+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|3.1 GB|

## Included Models

- DocumentAssembler
- SentenceDetectorDLModel
- TokenizerModel
- WordEmbeddingsModel
- MedicalNerModel
- NerConverterInternalModel
- Chunk2Doc
- BertSentenceEmbeddings
- SentenceEntityResolverModel</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="en" /><category term="entity_resolution" /><category term="clinical" /><category term="pipeline" /><category term="mesh" /><summary type="html">Description This advanced pipeline extracts clinical entities from clinical texts and utilizes the sbiobert_base_cased_mli Sentence Bert Embeddings to map these entities to their corresponding Medical Subject Heading (MeSH) codes. Live Demo Open in Colab Download Copy S3 URI How to use PythonJSLScalaNLU from sparknlp.pretrained import PretrainedPipeline ner_pipeline = PretrainedPipeline(&quot;mesh_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) result = ner_pipeline.annotate(&quot;&quot;&quot;She was admitted to the hospital with chest pain and found to have bilateral pleural effusion, the right greater than the left. We reviewed the pathology obtained from the pericardectomy in March 2006, which was diagnostic of mesothelioma. At this time, chest tube placement for drainage of the fluid occurred and thoracoscopy with fluid biopsies, which were performed, which revealed malignant mesothelioma.&quot;&quot;&quot;) import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline val ner_pipeline = PretrainedPipeline(&quot;mesh_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) val result = ner_pipeline.annotate(&quot;&quot;&quot;She was admitted to the hospital with chest pain and found to have bilateral pleural effusion, the right greater than the left. We reviewed the pathology obtained from the pericardectomy in March 2006, which was diagnostic of mesothelioma. At this time, chest tube placement for drainage of the fluid occurred and thoracoscopy with fluid biopsies, which were performed, which revealed malignant mesothelioma.&quot;&quot;&quot;) Results | | chunks | begin | end | entities | mesh_code | description | resolutions | |--:|---------------------------:|------:|----:|----------:|-----------:|------------------------:|--------------------------------------------------:| | 0 | chest pain | 38 | 47 | PROBLEM | D002637 | Chest Pain | Chest Pain:::Chronic Pain:::Neck Pain:::Should... | | 1 | bilateral pleural effusion | 67 | 92 | PROBLEM | D010996 | Pleural Effusion | Pleural Effusion:::Pericardial Effusion:::Pulm... | | 2 | the pathology | 140 | 152 | TEST | D010336 | Pathology | Pathology:::Pathologic Processes:::Anus Diseas... | | 3 | the pericardectomy | 168 | 185 | TREATMENT | D010492 | Pericardiectomy | Pericardiectomy:::Pulpectomy:::Pleurodesis:::C... | | 4 | mesothelioma | 226 | 237 | PROBLEM | D000086002 | Mesothelioma, Malignant | Mesothelioma, Malignant:::Malignant mesenchyma... | | 5 | chest tube placement | 254 | 273 | TREATMENT | D015505 | Chest Tubes | Chest Tubes:::Thoracic Surgical Procedures:::T... | | 6 | drainage of the fluid | 279 | 299 | PROBLEM | D004322 | Drainage | Drainage:::Fluid Shifts:::Bonain's liquid:::Li... | | 7 | thoracoscopy | 314 | 325 | TREATMENT | D013906 | Thoracoscopy | Thoracoscopy:::Thoracoscopes:::Thoracic Cavity... | | 8 | fluid biopsies | 332 | 345 | TEST | D000073890 | Liquid Biopsy | Liquid Biopsy:::Peritoneal Lavage:::Cyst Fluid... | | 9 | malignant mesothelioma | 385 | 406 | PROBLEM | D000086002 | Mesothelioma, Malignant | Mesothelioma, Malignant:::Malignant mesenchyma... | Model Information Model Name: mesh_resolver_pipeline Type: pipeline Compatibility: Healthcare NLP 5.2.1+ License: Licensed Edition: Official Language: en Size: 3.1 GB Included Models DocumentAssembler SentenceDetectorDLModel TokenizerModel WordEmbeddingsModel MedicalNerModel NerConverterInternalModel Chunk2Doc BertSentenceEmbeddings SentenceEntityResolverModel</summary></entry><entry><title type="html">Pipeline for National Drug Codes (NDC) Sentence Entity Resolver</title><link href="/2024/01/25/ndc_resolver_pipeline_en.html" rel="alternate" type="text/html" title="Pipeline for National Drug Codes (NDC) Sentence Entity Resolver" /><published>2024-01-25T00:00:00+00:00</published><updated>2024-01-25T00:00:00+00:00</updated><id>/2024/01/25/ndc_resolver_pipeline_en</id><content type="html" xml:base="/2024/01/25/ndc_resolver_pipeline_en.html">## Description

This advanced pipeline extracts medication entities from clinical texts and utilizes the `sbiobert_base_cased_mli` Sentence Bert Embeddings to map these entities to their corresponding National Drug Codes (NDC) codes.

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ndc_resolver_pipeline_en_5.2.1_3.0_1706205426957.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ndc_resolver_pipeline_en_5.2.1_3.0_1706205426957.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python

from sparknlp.pretrained import PretrainedPipeline

ner_pipeline = PretrainedPipeline(&quot;ndc_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

result = ner_pipeline.annotate(&quot;&quot;&quot;The patient was given aspirin 81 mg and metformin 500 mg&quot;&quot;&quot;)

```
```scala

import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline

val ner_pipeline = PretrainedPipeline(&quot;ndc_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;)

val result = ner_pipeline.annotate(&quot;&quot;&quot;The patient was given aspirin 81 mg and metformin 500 mg&quot;&quot;&quot;)

```
&lt;/div&gt;

## Results

```bash
+----------------+-----+---+---------+----------+-------------------+--------------------------------------------------------------------------------+
|           chunk|begin|end|ner_label|       ndc|        description|                                                                      aux_labels|
+----------------+-----+---+---------+----------+-------------------+--------------------------------------------------------------------------------+
|   aspirin 81 mg|   22| 34|     DRUG|41250-0780|      aspirin 81 mg|{'packages': &quot;['1 BOTTLE, PLASTIC in 1 PACKAGE (41250-780-01)  &gt; 120 TABLET, ...|
|metformin 500 mg|   40| 55|     DRUG|62207-0491|metformin er 500 mg|{'packages': &quot;['5000 TABLET in 1 POUCH (62207-491-31)', '25000 TABLET in 1 CA...|
+----------------+-----+---+---------+----------+-------------------+--------------------------------------------------------------------------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ndc_resolver_pipeline|
|Type:|pipeline|
|Compatibility:|Healthcare NLP 5.2.1+|
|License:|Licensed|
|Edition:|Official|
|Language:|en|
|Size:|3.0 GB|

## Included Models

- DocumentAssembler
- SentenceDetectorDLModel
- TokenizerModel
- WordEmbeddingsModel
- MedicalNerModel
- NerConverter
- Chunk2Doc
- BertSentenceEmbeddings
- SentenceEntityResolverModel</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="en" /><category term="entity_resolution" /><category term="clinical" /><category term="pipeline" /><category term="ndc" /><summary type="html">Description This advanced pipeline extracts medication entities from clinical texts and utilizes the sbiobert_base_cased_mli Sentence Bert Embeddings to map these entities to their corresponding National Drug Codes (NDC) codes. Live Demo Open in Colab Download Copy S3 URI How to use PythonJSLScalaNLU from sparknlp.pretrained import PretrainedPipeline ner_pipeline = PretrainedPipeline(&quot;ndc_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) result = ner_pipeline.annotate(&quot;&quot;&quot;The patient was given aspirin 81 mg and metformin 500 mg&quot;&quot;&quot;) import com.johnsnowlabs.nlp.pretrained.PretrainedPipeline val ner_pipeline = PretrainedPipeline(&quot;ndc_resolver_pipeline&quot;, &quot;en&quot;, &quot;clinical/models&quot;) val result = ner_pipeline.annotate(&quot;&quot;&quot;The patient was given aspirin 81 mg and metformin 500 mg&quot;&quot;&quot;) Results +----------------+-----+---+---------+----------+-------------------+--------------------------------------------------------------------------------+ | chunk|begin|end|ner_label| ndc| description| aux_labels| +----------------+-----+---+---------+----------+-------------------+--------------------------------------------------------------------------------+ | aspirin 81 mg| 22| 34| DRUG|41250-0780| aspirin 81 mg|{'packages': &quot;['1 BOTTLE, PLASTIC in 1 PACKAGE (41250-780-01) &amp;gt; 120 TABLET, ...| |metformin 500 mg| 40| 55| DRUG|62207-0491|metformin er 500 mg|{'packages': &quot;['5000 TABLET in 1 POUCH (62207-491-31)', '25000 TABLET in 1 CA...| +----------------+-----+---+---------+----------+-------------------+--------------------------------------------------------------------------------+ Model Information Model Name: ndc_resolver_pipeline Type: pipeline Compatibility: Healthcare NLP 5.2.1+ License: Licensed Edition: Official Language: en Size: 3.0 GB Included Models DocumentAssembler SentenceDetectorDLModel TokenizerModel WordEmbeddingsModel MedicalNerModel NerConverter Chunk2Doc BertSentenceEmbeddings SentenceEntityResolverModel</summary></entry><entry><title type="html">Extraction of Clinical Abbreviations and Acronyms (LangTest)</title><link href="/2024/01/25/ner_clinical_abbreviation_langtest_en.html" rel="alternate" type="text/html" title="Extraction of Clinical Abbreviations and Acronyms (LangTest)" /><published>2024-01-25T00:00:00+00:00</published><updated>2024-01-25T00:00:00+00:00</updated><id>/2024/01/25/ner_clinical_abbreviation_langtest_en</id><content type="html" xml:base="/2024/01/25/ner_clinical_abbreviation_langtest_en.html">## Description

This model is trained to extract clinical acronyms and acronyms from text. It is the version of [ner_abbreviation_clinical](https://nlp.johnsnowlabs.com/2021/12/30/ner_abbreviation_clinical_en.html) model augmented with `langtest` library.

| **test_type**        | **before fail_count** | **after fail_count** | **before pass_count** | **after pass_count** | **minimum pass_rate** | **before pass_rate** | **after pass_rate** |
|----------------------|-----------------------|----------------------|-----------------------|----------------------|-----------------------|----------------------|---------------------|
| **lowercase**        | 351                   | 78                   | 223                   | 496                  | 90%                   | 39%                  | 86%                 |
| **titlecase**        | 325                   | 73                   | 248                   | 500                  | 85%                   | 43%                  | 87%                 |
| **uppercase**        | 117                   | 47                   | 382                   | 452                  | 90%                   | 77%                  | 91%                 |
| **weighted average** | **793**               | **198**              | **853**               | **1448**             | **88.33%**            | **51.82%**           | **87.97%**          |

## Predicted Entities

`ABBR`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_clinical_abbreviation_langtest_en_5.2.1_3.0_1706208855884.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_clinical_abbreviation_langtest_en_5.2.1_3.0_1706208855884.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer()\
    .setInputCols([&quot;sentence&quot;])\
    .setOutputCol(&quot;token&quot;)\

embeddings = WordEmbeddingsModel.pretrained('embeddings_clinical', 'en', 'clinical/models') \
    .setInputCols(['sentence', 'token']) \
    .setOutputCol('embeddings')

ner_model = MedicalNerModel.pretrained('ner_clinical_abbreviation_langtest', 'en', 'clinical/models') \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverter() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;abbr_ner&quot;]) \
    .setOutputCol(&quot;ner_chunk&quot;)\


ner_pipeline = Pipeline(
        stages = [
        document_assembler,
        sentence_detector,
        tokenizer,
        embeddings,
        ner_model,
        ner_converter
])

text = &quot;&quot;&quot;Gravid with an Estimated Fetal Weight of 6-6/12 Pounds. Lower Extremities: There are no signs of edema in the lower extremities. Laboratory Data: Laboratory tests revealed a normal cbc. Blood Type: The patient's blood type has been identified as AB Positive. Rubella Status: The patient has confirmed immunity to rub. VDRL Test: The vdrl test for syphilis is nonreactive. Hepatitis C Screening (anti-hcv): The screening for Hepatitis C surface antigen returned a negative result. Testing for hiv showed a negative outcome.&quot;&quot;&quot;

data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;)

result = ner_pipeline.fit(data).transform(data)
```
```scala
val document_assembler = DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)

val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(Array(&quot;document&quot;))
    .setOutputCol(&quot;sentence&quot;)

val tokenizer = Tokenizer()
    .setInputCols(Array(&quot;sentence&quot;))
    .setOutputCol(&quot;token&quot;)

val embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) 
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) 
    .setOutputCol(&quot;embeddings&quot;)

val ner_model = MedicalNerModel.pretrained(&quot;ner_clinical_abbreviation_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) 
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) 
    .setOutputCol(&quot;ner&quot;)

val ner_converter = NerConverter() 
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) 
    .setOutputCol(&quot;ner_chunk&quot;)


val ner_pipeline = new Pipeline().setStages(Array(document_assembler, sentence_aetector, tokenizer, embeddings, ner_model, ner_converter))

val data = Seq(&quot;Gravid with an Estimated Fetal Weight of 6-6/12 Pounds. Lower Extremities: There are no signs of edema in the lower extremities. Laboratory Data: Laboratory tests revealed a normal cbc. Blood Type: The patient's blood type has been identified as AB Positive. Rubella Status: The patient has confirmed immunity to rub. VDRL Test: The vdrl test for syphilis is nonreactive. Hepatitis C Screening (anti-hcv): The screening for Hepatitis C surface antigen returned a negative result. Testing for hiv showed a negative outcome.&quot;).toDF(&quot;text&quot;)

val result = ner_pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+--------+---------+
|chunk   |ner_label|
+--------+---------+
|cbc     |ABBR     |
|VDRL    |ABBR     |
|vdrl    |ABBR     |
|anti-hcv|ABBR     |
|hiv     |ABBR     |
+--------+---------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_clinical_abbreviation_langtest|
|Compatibility:|Healthcare NLP 5.2.1+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|14.7 MB|

## Sample text from the training dataset

Trained on the in-house dataset.

## Benchmarking

```bash
label         precision  recall  f1-score  support 
ABBR          0.90       0.94    0.92      683     
micro-avg     0.90       0.94    0.92      683     
macro-avg     0.90       0.94    0.92      683     
weighted-avg  0.90       0.94    0.92      683     
```</content><author><name>John Snow Labs</name></author><category term="en" /><category term="clinical" /><category term="ner" /><category term="licensed" /><category term="abbreviation" /><category term="langtest" /><summary type="html">Description This model is trained to extract clinical acronyms and acronyms from text. It is the version of ner_abbreviation_clinical model augmented with langtest library. test_type before fail_count after fail_count before pass_count after pass_count minimum pass_rate before pass_rate after pass_rate lowercase 351 78 223 496 90% 39% 86% titlecase 325 73 248 500 85% 43% 87% uppercase 117 47 382 452 90% 77% 91% weighted average 793 198 853 1448 88.33% 51.82% 87.97% Predicted Entities ABBR Live Demo Open in Colab Download Copy S3 URI How to use PythonJSLScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer()\ .setInputCols([&quot;sentence&quot;])\ .setOutputCol(&quot;token&quot;)\ embeddings = WordEmbeddingsModel.pretrained('embeddings_clinical', 'en', 'clinical/models') \ .setInputCols(['sentence', 'token']) \ .setOutputCol('embeddings') ner_model = MedicalNerModel.pretrained('ner_clinical_abbreviation_langtest', 'en', 'clinical/models') \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverter() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;abbr_ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;)\ ner_pipeline = Pipeline( stages = [ document_assembler, sentence_detector, tokenizer, embeddings, ner_model, ner_converter ]) text = &quot;&quot;&quot;Gravid with an Estimated Fetal Weight of 6-6/12 Pounds. Lower Extremities: There are no signs of edema in the lower extremities. Laboratory Data: Laboratory tests revealed a normal cbc. Blood Type: The patient's blood type has been identified as AB Positive. Rubella Status: The patient has confirmed immunity to rub. VDRL Test: The vdrl test for syphilis is nonreactive. Hepatitis C Screening (anti-hcv): The screening for Hepatitis C surface antigen returned a negative result. Testing for hiv showed a negative outcome.&quot;&quot;&quot; data = spark.createDataFrame([[text]]).toDF(&quot;text&quot;) result = ner_pipeline.fit(data).transform(data) val document_assembler = DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;sentence&quot;) val tokenizer = Tokenizer() .setInputCols(Array(&quot;sentence&quot;)) .setOutputCol(&quot;token&quot;) val embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner_model = MedicalNerModel.pretrained(&quot;ner_clinical_abbreviation_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = NerConverter() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val ner_pipeline = new Pipeline().setStages(Array(document_assembler, sentence_aetector, tokenizer, embeddings, ner_model, ner_converter)) val data = Seq(&quot;Gravid with an Estimated Fetal Weight of 6-6/12 Pounds. Lower Extremities: There are no signs of edema in the lower extremities. Laboratory Data: Laboratory tests revealed a normal cbc. Blood Type: The patient's blood type has been identified as AB Positive. Rubella Status: The patient has confirmed immunity to rub. VDRL Test: The vdrl test for syphilis is nonreactive. Hepatitis C Screening (anti-hcv): The screening for Hepatitis C surface antigen returned a negative result. Testing for hiv showed a negative outcome.&quot;).toDF(&quot;text&quot;) val result = ner_pipeline.fit(data).transform(data) Results +--------+---------+ |chunk |ner_label| +--------+---------+ |cbc |ABBR | |VDRL |ABBR | |vdrl |ABBR | |anti-hcv|ABBR | |hiv |ABBR | +--------+---------+ Model Information Model Name: ner_clinical_abbreviation_langtest Compatibility: Healthcare NLP 5.2.1+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 14.7 MB Sample text from the training dataset Trained on the in-house dataset. Benchmarking label precision recall f1-score support ABBR 0.90 0.94 0.92 683 micro-avg 0.90 0.94 0.92 683 macro-avg 0.90 0.94 0.92 683 weighted-avg 0.90 0.94 0.92 683</summary></entry><entry><title type="html">Sentence Entity Resolver for Snomed Concepts, Findings version (sbiobert_base_cased_mli embeddings)</title><link href="/2024/01/24/sbiobertresolve_snomed_findings_en.html" rel="alternate" type="text/html" title="Sentence Entity Resolver for Snomed Concepts, Findings version (sbiobert_base_cased_mli embeddings)" /><published>2024-01-24T00:00:00+00:00</published><updated>2024-01-24T00:00:00+00:00</updated><id>/2024/01/24/sbiobertresolve_snomed_findings_en</id><content type="html" xml:base="/2024/01/24/sbiobertresolve_snomed_findings_en.html">## Description

The model maps extracted medical entities to their corresponding Snomed codes (Clinical Findings) using `sbiobert_base_cased_mli` BERT sentence embeddings.

## Predicted Entities

`Snomed Codes and their normalized definitions`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/sbiobertresolve_snomed_findings_en_5.2.1_3.2_1706098966876.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/sbiobertresolve_snomed_findings_en_5.2.1_3.2_1706098966876.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use

`sbiobertresolve_snomed_findings` resolver model must be used with `sbiobert_base_cased_mli` as embeddings and NER models that can extract clinical findings.

&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
  .setInputCol(&quot;text&quot;)\
  .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
  .setInputCols([&quot;document&quot;])\
  .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer()\
  .setInputCols([&quot;sentence&quot;])\
  .setOutputCol(&quot;token&quot;)\

word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
  .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
  .setOutputCol(&quot;embeddings&quot;)

ner_jsl = MedicalNerModel.pretrained(&quot;ner_jsl&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
  .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
  .setOutputCol(&quot;ner_jsl&quot;)

ner_jsl_converter = NerConverterInternal() \
  .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner_jsl&quot;]) \
  .setOutputCol(&quot;ner_jsl_chunk&quot;)\
  .setWhiteList([&quot;Kidney_Disease&quot;, &quot;Cerebrovascular_Disease&quot;, &quot;Heart_Disease&quot;,
                 &quot;Disease_Syndrome_Disorder&quot;, &quot;ImagingFindings&quot;, &quot;Symptom&quot;, &quot;VS_Finding&quot;,
                 &quot;EKG_Findings&quot;, &quot;Communicable_Disease&quot;])\

chunk2doc = Chunk2Doc()\
  .setInputCols(&quot;ner_jsl_chunk&quot;)\
  .setOutputCol(&quot;ner_chunk_doc&quot;)

sbert_embeddings = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\
  .setInputCols([&quot;ner_chunk_doc&quot;])\
  .setOutputCol(&quot;sbert_embeddings&quot;)\
  .setCaseSensitive(False)

snomed_resolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_snomed_findings&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
  .setInputCols([&quot;sbert_embeddings&quot;]) \
  .setOutputCol(&quot;snomed_code&quot;)\

snomed_pipeline = Pipeline(stages = [
    document_assembler,
    sentence_detector,
    tokenizer,
    word_embeddings,
    ner_jsl,
    ner_jsl_converter,
    chunk2doc,
    sbert_embeddings,
    snomed_resolver
])


empty_data = spark.createDataFrame([['']]).toDF(&quot;text&quot;)
 
model = snomed_pipeline.fit(empty_data)
 
text = &quot;&quot;&quot;The patient exhibited recurrent upper respiratory tract infections, subjective fevers, unintentional weight loss, and occasional night sweats. Clinically, they appeared cachectic and pale, with notable hepatosplenomegaly. Laboratory results confirmed pancytopenia.&quot;&quot;&quot;

snomed_lp = LightPipeline(model)
 
light_result = snomed_lp.fullAnnotate(text)
```
```scala
val documentAssembler = new DocumentAssembler()
      .setInputCol(&quot;text&quot;)
      .setOutputCol(&quot;document&quot;)

val sentenceDetector = SentenceDetectorDLModel.pretrained()
      .setInputCols(Array(&quot;document&quot;))
      .setOutputCol(&quot;sentence&quot;)

val tokenizer = new Tokenizer()
      .setInputCols(Array(&quot;sentence&quot;))
      .setOutputCol(&quot;token&quot;)

val word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;,&quot;en&quot;, &quot;clinical/models&quot;)
      .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
      .setOutputCol(&quot;embeddings&quot;)

val ner_jsl = MedicalNerModel.pretrained(&quot;ner_jsl&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
      .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
      .setOutputCol(&quot;ner_jsl&quot;)

val ner_jsl_converter = new NerConverterInternal()
      .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;))
      .setOutputCol(&quot;ner_jsl_chunk&quot;)
      .setWhiteList(Array(&quot;Kidney_Disease&quot;, &quot;Cerebrovascular_Disease&quot;, &quot;Heart_Disease&quot;,
                 &quot;Disease_Syndrome_Disorder&quot;, &quot;ImagingFindings&quot;, &quot;Symptom&quot;, &quot;VS_Finding&quot;,
                 &quot;EKG_Findings&quot;, &quot;Communicable_Disease&quot;))

val chunk2doc = new Chunk2Doc()
      .setInputCols(&quot;ner_jsl_chunk&quot;)
      .setOutputCol(&quot;ner_chunk_doc&quot;)

val sbert_embedder = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
      .setInputCols(&quot;ner_chunk_doc&quot;)
      .setOutputCol(&quot;sbert_embeddings&quot;)

val snomed_resolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_snomed_findings&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
     .setInputCols(Array(&quot;sbert_embeddings&quot;))
     .setOutputCol(&quot;snomed_code&quot;)

val new nlpPipeine().setStages(Array(documentAssembler,
                                    sentenceDetector,
                                    tokenizer,
                                    word_embeddings,
                                    ner_jsl_clinical,
                                    ner_jsl_converter,
                                    chunk2doc,
                                    sbert_embedder,
                                    snomed_resolver))

val text= &quot;&quot;&quot;The patient exhibited recurrent upper respiratory tract infections, subjective fevers, unintentional weight loss, and occasional night sweats. Clinically, they appeared cachectic and pale, with notable hepatosplenomegaly. Laboratory results confirmed pancytopenia.&quot;&quot;&quot;

val df = Seq(text).toDF(text)

val result= nlpPipeline.fit(df).transform(df)
```
&lt;/div&gt;

## Results

```bash
|   |                          ner_chunk | begin | end |                 ner_label | snomed_code |                       description |                                       resolutions |
|--:|-----------------------------------:|------:|----:|--------------------------:|------------:|----------------------------------:|--------------------------------------------------:|
| 0 | upper respiratory tract infections |    32 |  65 | Disease_Syndrome_Disorder |    54150009 | upper respiratory tract infection | upper respiratory tract infection:::upper resp... |
| 1 |                             fevers |    79 |  84 |                VS_Finding |   248425001 |                             fever | fever:::fever:::intermittent fever:::fever sym... |
| 2 |          unintentional weight loss |    87 | 111 |                   Symptom |   448765001 |         unintentional weight loss | unintentional weight loss:::unexplained weight... |
| 3 |                       night sweats |   129 | 140 |                   Symptom |   161859009 |                      night sweats | night sweats:::night sweats:::night sweats:::n... |
| 4 |                          cachectic |   169 | 177 |                   Symptom |   238108007 |                         cachectic | cachectic:::cachexia:::aids with cachexia:::ca... |
| 5 |                               pale |   183 | 186 |                   Symptom |   274643008 |                              pale | pale:::pale color:::pale color:::pale complexi... |
| 6 |                 hepatosplenomegaly |   202 | 219 |                   Symptom |    36760000 |                hepatosplenomegaly | hepatosplenomegaly:::splenomegaly:::congestive... |
| 7 |                       pancytopenia |   251 | 262 |                   Symptom |   127034005 |                      pancytopenia | pancytopenia:::drug induced pancytopenia:::pan... |
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|sbiobertresolve_snomed_findings|
|Compatibility:|Healthcare NLP 5.2.1+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence_embeddings]|
|Output Labels:|[snomed_code]|
|Language:|en|
|Size:|715.9 MB|
|Case sensitive:|false|

## References

This model is trained with the augmented version of NIH September 2023 SNOMED CT United States (US) Edition.</content><author><name>John Snow Labs</name></author><category term="en" /><category term="licensed" /><category term="entity_resolution" /><category term="clinical" /><category term="snomed" /><category term="findings" /><summary type="html">Description The model maps extracted medical entities to their corresponding Snomed codes (Clinical Findings) using sbiobert_base_cased_mli BERT sentence embeddings. Predicted Entities Snomed Codes and their normalized definitions Live Demo Open in Colab Download Copy S3 URI How to use sbiobertresolve_snomed_findings resolver model must be used with sbiobert_base_cased_mli as embeddings and NER models that can extract clinical findings. PythonJSLScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer()\ .setInputCols([&quot;sentence&quot;])\ .setOutputCol(&quot;token&quot;)\ word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) ner_jsl = MedicalNerModel.pretrained(&quot;ner_jsl&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner_jsl&quot;) ner_jsl_converter = NerConverterInternal() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner_jsl&quot;]) \ .setOutputCol(&quot;ner_jsl_chunk&quot;)\ .setWhiteList([&quot;Kidney_Disease&quot;, &quot;Cerebrovascular_Disease&quot;, &quot;Heart_Disease&quot;, &quot;Disease_Syndrome_Disorder&quot;, &quot;ImagingFindings&quot;, &quot;Symptom&quot;, &quot;VS_Finding&quot;, &quot;EKG_Findings&quot;, &quot;Communicable_Disease&quot;])\ chunk2doc = Chunk2Doc()\ .setInputCols(&quot;ner_jsl_chunk&quot;)\ .setOutputCol(&quot;ner_chunk_doc&quot;) sbert_embeddings = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\ .setInputCols([&quot;ner_chunk_doc&quot;])\ .setOutputCol(&quot;sbert_embeddings&quot;)\ .setCaseSensitive(False) snomed_resolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_snomed_findings&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sbert_embeddings&quot;]) \ .setOutputCol(&quot;snomed_code&quot;)\ snomed_pipeline = Pipeline(stages = [ document_assembler, sentence_detector, tokenizer, word_embeddings, ner_jsl, ner_jsl_converter, chunk2doc, sbert_embeddings, snomed_resolver ]) empty_data = spark.createDataFrame([['']]).toDF(&quot;text&quot;) model = snomed_pipeline.fit(empty_data) text = &quot;&quot;&quot;The patient exhibited recurrent upper respiratory tract infections, subjective fevers, unintentional weight loss, and occasional night sweats. Clinically, they appeared cachectic and pale, with notable hepatosplenomegaly. Laboratory results confirmed pancytopenia.&quot;&quot;&quot; snomed_lp = LightPipeline(model) light_result = snomed_lp.fullAnnotate(text) val documentAssembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentenceDetector = SentenceDetectorDLModel.pretrained() .setInputCols(Array(&quot;document&quot;)) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(Array(&quot;sentence&quot;)) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;,&quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner_jsl = MedicalNerModel.pretrained(&quot;ner_jsl&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner_jsl&quot;) val ner_jsl_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;clinical_ner&quot;)) .setOutputCol(&quot;ner_jsl_chunk&quot;) .setWhiteList(Array(&quot;Kidney_Disease&quot;, &quot;Cerebrovascular_Disease&quot;, &quot;Heart_Disease&quot;, &quot;Disease_Syndrome_Disorder&quot;, &quot;ImagingFindings&quot;, &quot;Symptom&quot;, &quot;VS_Finding&quot;, &quot;EKG_Findings&quot;, &quot;Communicable_Disease&quot;)) val chunk2doc = new Chunk2Doc() .setInputCols(&quot;ner_jsl_chunk&quot;) .setOutputCol(&quot;ner_chunk_doc&quot;) val sbert_embedder = BertSentenceEmbeddings.pretrained(&quot;sbiobert_base_cased_mli&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(&quot;ner_chunk_doc&quot;) .setOutputCol(&quot;sbert_embeddings&quot;) val snomed_resolver = SentenceEntityResolverModel.pretrained(&quot;sbiobertresolve_snomed_findings&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sbert_embeddings&quot;)) .setOutputCol(&quot;snomed_code&quot;) val new nlpPipeine().setStages(Array(documentAssembler, sentenceDetector, tokenizer, word_embeddings, ner_jsl_clinical, ner_jsl_converter, chunk2doc, sbert_embedder, snomed_resolver)) val text= &quot;&quot;&quot;The patient exhibited recurrent upper respiratory tract infections, subjective fevers, unintentional weight loss, and occasional night sweats. Clinically, they appeared cachectic and pale, with notable hepatosplenomegaly. Laboratory results confirmed pancytopenia.&quot;&quot;&quot; val df = Seq(text).toDF(text) val result= nlpPipeline.fit(df).transform(df) Results | | ner_chunk | begin | end | ner_label | snomed_code | description | resolutions | |--:|-----------------------------------:|------:|----:|--------------------------:|------------:|----------------------------------:|--------------------------------------------------:| | 0 | upper respiratory tract infections | 32 | 65 | Disease_Syndrome_Disorder | 54150009 | upper respiratory tract infection | upper respiratory tract infection:::upper resp... | | 1 | fevers | 79 | 84 | VS_Finding | 248425001 | fever | fever:::fever:::intermittent fever:::fever sym... | | 2 | unintentional weight loss | 87 | 111 | Symptom | 448765001 | unintentional weight loss | unintentional weight loss:::unexplained weight... | | 3 | night sweats | 129 | 140 | Symptom | 161859009 | night sweats | night sweats:::night sweats:::night sweats:::n... | | 4 | cachectic | 169 | 177 | Symptom | 238108007 | cachectic | cachectic:::cachexia:::aids with cachexia:::ca... | | 5 | pale | 183 | 186 | Symptom | 274643008 | pale | pale:::pale color:::pale color:::pale complexi... | | 6 | hepatosplenomegaly | 202 | 219 | Symptom | 36760000 | hepatosplenomegaly | hepatosplenomegaly:::splenomegaly:::congestive... | | 7 | pancytopenia | 251 | 262 | Symptom | 127034005 | pancytopenia | pancytopenia:::drug induced pancytopenia:::pan... | Model Information Model Name: sbiobertresolve_snomed_findings Compatibility: Healthcare NLP 5.2.1+ License: Licensed Edition: Official Input Labels: [sentence_embeddings] Output Labels: [snomed_code] Language: en Size: 715.9 MB Case sensitive: false References This model is trained with the augmented version of NIH September 2023 SNOMED CT United States (US) Edition.</summary></entry><entry><title type="html">Sentence Embeddings - Biobert cased (MedNLI, onnx)</title><link href="/2024/01/22/sbiobert_base_cased_mli_onnx_en.html" rel="alternate" type="text/html" title="Sentence Embeddings - Biobert cased (MedNLI, onnx)" /><published>2024-01-22T00:00:00+00:00</published><updated>2024-01-22T00:00:00+00:00</updated><id>/2024/01/22/sbiobert_base_cased_mli_onnx_en</id><content type="html" xml:base="/2024/01/22/sbiobert_base_cased_mli_onnx_en.html">## Description

This model is trained to generate contextual sentence embeddings of input sentences. It has been fine-tuned on MedNLI dataset to provide sota performance on STS and SentEval Benchmarks.

## Predicted Entities



{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/sbiobert_base_cased_mli_onnx_en_5.2.1_3.0_1705940372620.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/sbiobert_base_cased_mli_onnx_en_5.2.1_3.0_1705940372620.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python

sbiobert_embeddings = BertSentenceEmbeddings\
  .pretrained(&quot;sbiobert_base_cased_mli_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
  .setInputCols([&quot;ner_chunk_doc&quot;])\
  .setOutputCol(&quot;sbert_embeddings&quot;)

```
```scala

val sbiobert_embeddings = BertSentenceEmbeddings
  .pretrained(&quot;sbiobert_base_cased_mli_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
  .setInputCols(Array(&quot;ner_chunk_doc&quot;))
  .setOutputCol(&quot;sbert_embeddings&quot;)
```
&lt;/div&gt;

## Results

```bash
Gives a 768 dimensional vector representation of the sentence.
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|sbiobert_base_cased_mli_onnx|
|Compatibility:|Healthcare NLP 5.2.1+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[document]|
|Output Labels:|[sentence_embeddings_onnx]|
|Language:|en|
|Size:|403.1 MB|
|Case sensitive:|false|</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="en" /><category term="clinical" /><category term="embeddings" /><category term="onnx" /><category term="sbiobert" /><summary type="html">Description This model is trained to generate contextual sentence embeddings of input sentences. It has been fine-tuned on MedNLI dataset to provide sota performance on STS and SentEval Benchmarks. Predicted Entities Live Demo Open in Colab Download Copy S3 URI How to use PythonJSLScalaNLU sbiobert_embeddings = BertSentenceEmbeddings\ .pretrained(&quot;sbiobert_base_cased_mli_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;ner_chunk_doc&quot;])\ .setOutputCol(&quot;sbert_embeddings&quot;) val sbiobert_embeddings = BertSentenceEmbeddings .pretrained(&quot;sbiobert_base_cased_mli_onnx&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;ner_chunk_doc&quot;)) .setOutputCol(&quot;sbert_embeddings&quot;) Results Gives a 768 dimensional vector representation of the sentence. Model Information Model Name: sbiobert_base_cased_mli_onnx Compatibility: Healthcare NLP 5.2.1+ License: Licensed Edition: Official Input Labels: [document] Output Labels: [sentence_embeddings_onnx] Language: en Size: 403.1 MB Case sensitive: false</summary></entry></feed>