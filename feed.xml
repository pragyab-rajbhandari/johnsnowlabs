<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-10-11T05:04:26+00:00</updated><id>/feed.xml</id><title type="html">Spark NLP</title><subtitle>High Performance NLP with Apache Spark
</subtitle><author><name>{&quot;type&quot;=&gt;nil, &quot;name&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;avatar&quot;=&gt;nil, &quot;bio&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;facebook&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;weibo&quot;=&gt;nil, &quot;googleplus&quot;=&gt;nil, &quot;telegram&quot;=&gt;nil, &quot;medium&quot;=&gt;nil, &quot;zhihu&quot;=&gt;nil, &quot;douban&quot;=&gt;nil, &quot;linkedin&quot;=&gt;nil, &quot;github&quot;=&gt;nil, &quot;npm&quot;=&gt;nil}</name></author><entry><title type="html">Financial Assertion of Sentiment (sm, Small)</title><link href="/2023/10/06/finassertion_absa_sm_en.html" rel="alternate" type="text/html" title="Financial Assertion of Sentiment (sm, Small)" /><published>2023-10-06T00:00:00+00:00</published><updated>2023-10-06T00:00:00+00:00</updated><id>/2023/10/06/finassertion_absa_sm_en</id><content type="html" xml:base="/2023/10/06/finassertion_absa_sm_en.html">## Description

This assertion model classifies financial entities into a sentiment. It is designed to be used together with the associated NER model.

## Predicted Entities

`POSITIVE`, `NEGATIVE`, `NEUTRAL`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/finance/models/finassertion_absa_sm_en_1.0.0_3.0_1696606845902.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/finance/models/finassertion_absa_sm_en_1.0.0_3.0_1696606845902.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
documentAssembler = (
    nlp.DocumentAssembler().setInputCol(&quot;text&quot;).setOutputCol(&quot;document&quot;)
)

# Sentence Detector annotator, processes various sentences per line
sentenceDetector = (
    nlp.SentenceDetector()
    .setInputCols([&quot;document&quot;])
    .setOutputCol(&quot;sentence&quot;)
)

# Tokenizer splits words in a relevant format for NLP
tokenizer = (
    nlp.Tokenizer().setInputCols([&quot;sentence&quot;]).setOutputCol(&quot;token&quot;)
)

bert_embeddings = (
    nlp.BertEmbeddings.pretrained(&quot;bert_embeddings_sec_bert_base&quot;, &quot;en&quot;)
    .setInputCols(&quot;document&quot;, &quot;token&quot;)
    .setOutputCol(&quot;embeddings&quot;)
    .setMaxSentenceLength(512)
)

clinical_ner = (
    finance.NerModel.pretrained(&quot;finner_absa_sm&quot;, &quot;en&quot;, &quot;finance/models&quot;)
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])
    .setOutputCol(&quot;ner&quot;)
)

ner_converter = (
    finance.NerConverterInternal()
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])
    .setOutputCol(&quot;ner_chunk&quot;)
)

assertion_model = (
    finance.AssertionDLModel.pretrained(&quot;finassertion_absa_sm&quot;, &quot;en&quot;, &quot;finance/models&quot;)
    .setInputCols([&quot;sentence&quot;, &quot;ner_chunk&quot;, &quot;embeddings&quot;])
    .setOutputCol(&quot;assertion&quot;)
)

nlpPipeline = nlp.Pipeline(
    stages=[
        documentAssembler,
        sentenceDetector,
        tokenizer,
        bert_embeddings,
        clinical_ner,
        ner_converter,
        assertion_model,
    ]
)


text = &quot;Equity and earnings of affiliates in Latin America increased to $4.8 million in the quarter from $2.2 million in the prior year as the commodity markets in Latin America remain strong through the end of the quarter.&quot;

spark_df = spark.createDataFrame([[text]]).toDF(&quot;text&quot;)

result = model.fit(spark_df ).transform(spark_df)

result.select(
    F.explode(
        F.arrays_zip(&quot;ner_chunk.result&quot;, &quot;ner_chunk.metadata&quot;)
    ).alias(&quot;cols&quot;)
).select(
    F.expr(&quot;cols['0']&quot;).alias(&quot;entity&quot;),
    F.expr(&quot;cols['1']['entity']&quot;).alias(&quot;label&quot;),
).show(
    50, truncate=False
)
```

&lt;/div&gt;

## Results

```bash
+--------+---------+
|entity  |label    |
+--------+---------+
|Equity  |LIABILITY|
|earnings|PROFIT   |
+--------+---------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|finassertion_absa_sm|
|Compatibility:|Finance NLP 1.0.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[document, chunk, embeddings]|
|Output Labels:|[assertion]|
|Language:|en|
|Size:|2.7 MB|

## References

In-house annotations of earning call transcripts.

## Benchmarking

```bash
     label    precision    recall  f1-score   support

    NEGATIVE       0.57      0.42      0.48        74
     NEUTRAL       0.51      0.70      0.59       184
    POSITIVE       0.75      0.64      0.69       324
```</content><author><name>John Snow Labs</name></author><category term="finance" /><category term="assertion" /><category term="en" /><category term="sentiment_analysis" /><category term="licensed" /><summary type="html">Description This assertion model classifies financial entities into a sentiment. It is designed to be used together with the associated NER model. Predicted Entities POSITIVE, NEGATIVE, NEUTRAL Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU documentAssembler = ( nlp.DocumentAssembler().setInputCol(&quot;text&quot;).setOutputCol(&quot;document&quot;) ) # Sentence Detector annotator, processes various sentences per line sentenceDetector = ( nlp.SentenceDetector() .setInputCols([&quot;document&quot;]) .setOutputCol(&quot;sentence&quot;) ) # Tokenizer splits words in a relevant format for NLP tokenizer = ( nlp.Tokenizer().setInputCols([&quot;sentence&quot;]).setOutputCol(&quot;token&quot;) ) bert_embeddings = ( nlp.BertEmbeddings.pretrained(&quot;bert_embeddings_sec_bert_base&quot;, &quot;en&quot;) .setInputCols(&quot;document&quot;, &quot;token&quot;) .setOutputCol(&quot;embeddings&quot;) .setMaxSentenceLength(512) ) clinical_ner = ( finance.NerModel.pretrained(&quot;finner_absa_sm&quot;, &quot;en&quot;, &quot;finance/models&quot;) .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) .setOutputCol(&quot;ner&quot;) ) ner_converter = ( finance.NerConverterInternal() .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) .setOutputCol(&quot;ner_chunk&quot;) ) assertion_model = ( finance.AssertionDLModel.pretrained(&quot;finassertion_absa_sm&quot;, &quot;en&quot;, &quot;finance/models&quot;) .setInputCols([&quot;sentence&quot;, &quot;ner_chunk&quot;, &quot;embeddings&quot;]) .setOutputCol(&quot;assertion&quot;) ) nlpPipeline = nlp.Pipeline( stages=[ documentAssembler, sentenceDetector, tokenizer, bert_embeddings, clinical_ner, ner_converter, assertion_model, ] ) text = &quot;Equity and earnings of affiliates in Latin America increased to $4.8 million in the quarter from $2.2 million in the prior year as the commodity markets in Latin America remain strong through the end of the quarter.&quot; spark_df = spark.createDataFrame([[text]]).toDF(&quot;text&quot;) result = model.fit(spark_df ).transform(spark_df) result.select( F.explode( F.arrays_zip(&quot;ner_chunk.result&quot;, &quot;ner_chunk.metadata&quot;) ).alias(&quot;cols&quot;) ).select( F.expr(&quot;cols['0']&quot;).alias(&quot;entity&quot;), F.expr(&quot;cols['1']['entity']&quot;).alias(&quot;label&quot;), ).show( 50, truncate=False ) Results +--------+---------+ |entity |label | +--------+---------+ |Equity |LIABILITY| |earnings|PROFIT | +--------+---------+ Model Information Model Name: finassertion_absa_sm Compatibility: Finance NLP 1.0.0+ License: Licensed Edition: Official Input Labels: [document, chunk, embeddings] Output Labels: [assertion] Language: en Size: 2.7 MB References In-house annotations of earning call transcripts. Benchmarking label precision recall f1-score support NEGATIVE 0.57 0.42 0.48 74 NEUTRAL 0.51 0.70 0.59 184 POSITIVE 0.75 0.64 0.69 324</summary></entry><entry><title type="html">Finance E5 Embedding Base</title><link href="/2023/10/06/finembedding_e5_base_en.html" rel="alternate" type="text/html" title="Finance E5 Embedding Base" /><published>2023-10-06T00:00:00+00:00</published><updated>2023-10-06T00:00:00+00:00</updated><id>/2023/10/06/finembedding_e5_base_en</id><content type="html" xml:base="/2023/10/06/finembedding_e5_base_en.html">## Description

This model is a financial version of the E5 base model fine-tuned on earning call transcripts and finance question-answering datasets. Reference: Wang, Liang, et al. &quot;Text embeddings by weakly-supervised contrastive pre-training.&quot; arXiv preprint arXiv:2212.03533 (2022).

## Predicted Entities



{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/finance/models/finembedding_e5_base_en_1.0.0_3.0_1696603847700.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/finance/models/finembedding_e5_base_en_1.0.0_3.0_1696603847700.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
document_assembler = (
    nlp.DocumentAssembler().setInputCol(&quot;text&quot;).setOutputCol(&quot;document&quot;)
)

E5_embedding = (
    nlp.E5Embeddings.pretrained(
        &quot;finembedding_e5_base&quot;, &quot;en&quot;, &quot;finance/models&quot;
    )
    .setInputCols([&quot;document&quot;])
    .setOutputCol(&quot;E5&quot;)
)
pipeline = nlp.Pipeline(stages=[document_assembler, E5_embedding])

data = spark.createDataFrame(
    [[&quot;What is the best way to invest in the stock market?&quot;]]
).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
result. Select(&quot;E5.result&quot;).show()
```

&lt;/div&gt;

## Results

```bash
+----------------------------------------------------------------------------------------------------+
|                                                                                          embeddings|
+----------------------------------------------------------------------------------------------------+
|[0.45521045, -0.16874692, -0.06179046, -0.37956607, 1.152633, 0.6849592, -0.9676384, 0.4624033, ...|
+----------------------------------------------------------------------------------------------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|finembedding_e5_base|
|Compatibility:|Finance NLP 1.0.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[document]|
|Output Labels:|[E5]|
|Language:|en|
|Size:|398.5 MB|

## References

For our Finance models, we will use publicly available datasets to fine-tune the model:

- [FiQA](https://public.ukp.informatik.tu-darmstadt.de/thakur/BEIR/datasets/)
- In-house annotated Earning Calls Transcripts</content><author><name>John Snow Labs</name></author><category term="finance" /><category term="en" /><category term="licensed" /><category term="e5" /><category term="sentence_embedding" /><category term="onnx" /><summary type="html">Description This model is a financial version of the E5 base model fine-tuned on earning call transcripts and finance question-answering datasets. Reference: Wang, Liang, et al. “Text embeddings by weakly-supervised contrastive pre-training.” arXiv preprint arXiv:2212.03533 (2022). Predicted Entities Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = ( nlp.DocumentAssembler().setInputCol(&quot;text&quot;).setOutputCol(&quot;document&quot;) ) E5_embedding = ( nlp.E5Embeddings.pretrained( &quot;finembedding_e5_base&quot;, &quot;en&quot;, &quot;finance/models&quot; ) .setInputCols([&quot;document&quot;]) .setOutputCol(&quot;E5&quot;) ) pipeline = nlp.Pipeline(stages=[document_assembler, E5_embedding]) data = spark.createDataFrame( [[&quot;What is the best way to invest in the stock market?&quot;]] ).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) result. Select(&quot;E5.result&quot;).show() Results +----------------------------------------------------------------------------------------------------+ | embeddings| +----------------------------------------------------------------------------------------------------+ |[0.45521045, -0.16874692, -0.06179046, -0.37956607, 1.152633, 0.6849592, -0.9676384, 0.4624033, ...| +----------------------------------------------------------------------------------------------------+ Model Information Model Name: finembedding_e5_base Compatibility: Finance NLP 1.0.0+ License: Licensed Edition: Official Input Labels: [document] Output Labels: [E5] Language: en Size: 398.5 MB References For our Finance models, we will use publicly available datasets to fine-tune the model: FiQA In-house annotated Earning Calls Transcripts</summary></entry><entry><title type="html">Financial NER for Aspect-based Sentiment Analysis (sm, Small)</title><link href="/2023/10/06/finner_absa_sm_en.html" rel="alternate" type="text/html" title="Financial NER for Aspect-based Sentiment Analysis (sm, Small)" /><published>2023-10-06T00:00:00+00:00</published><updated>2023-10-06T00:00:00+00:00</updated><id>/2023/10/06/finner_absa_sm_en</id><content type="html" xml:base="/2023/10/06/finner_absa_sm_en.html">## Description

This NER model identifies entities that can be associated with a financial sentiment. The model is designed to be used with the associated Assertion Status model that classifies the entities into a sentiment category.

## Predicted Entities

`REVENUE`, `EXPENSE`, `PROFIT`, `KPI`, `GAINS`, `ASSET`, `LIABILITY`, `CASHFLOW`, `LOSSES`, `FREE_CASH_FLOW`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/finance/models/finner_absa_sm_en_1.0.0_3.0_1696605316183.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/finance/models/finner_absa_sm_en_1.0.0_3.0_1696605316183.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
document_assembler = nlp.DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = nlp.SentenceDetector() \
    .setInputCols([&quot;document&quot;]) \
    .setOutputCol(&quot;sentence&quot;) \
    .setCustomBounds([&quot;\n\n&quot;])

tokenizer = nlp.Tokenizer()\
    .setInputCols([&quot;sentence&quot;])\
    .setOutputCol(&quot;token&quot;)

embeddings = nlp.BertEmbeddings.pretrained(&quot;bert_embeddings_sec_bert_base&quot;,&quot;en&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
    .setOutputCol(&quot;embeddings&quot;)\
    .setCaseSensitive(True)\
    .setMaxSentenceLength(512)

ner_model = finance.NerModel.pretrained(&quot;finner_absa_sm&quot;, &quot;en&quot;, &quot;finance/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\
    .setOutputCol(&quot;ner&quot;)\

ner_converter = finance.NerConverterInternal()\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\
    .setOutputCol(&quot;ner_chunk&quot;)

pipeline = nlp.Pipeline(stages=[
    document_assembler,
    sentence_detector,
    tokenizer,
    embeddings,
    ner_model,
    ner_converter   
    ])

model = pipeline.fit(spark.createDataFrame([[&quot;&quot;]]).toDF(&quot;text&quot;))


text = &quot;Equity and earnings of affiliates in Latin America increased to $4.8 million in the quarter from $2.2 million in the prior year as the commodity markets in Latin America remain strong through the end of the quarter.&quot;

spark_df = spark.createDataFrame([[text]]).toDF(&quot;text&quot;)

result = model. Transform(spark_df)
result. Select(F.explode(F.arrays_zip('ner_chunk.result', 'ner_chunk.metadata')).alias(&quot;cols&quot;)) \
               .select(F.expr(&quot;cols['0']&quot;).alias(&quot;entity&quot;),
                       F.expr(&quot;cols['1']['entity']&quot;).alias(&quot;label&quot;)).show(50, truncate = False)

```

&lt;/div&gt;

## Results

```bash
+--------+---------+
|entity  |label    |
+--------+---------+
|Equity  |LIABILITY|
|earnings|PROFIT   |
+--------+---------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|finner_absa_sm|
|Compatibility:|Finance NLP 1.0.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|16.3 MB|

## References

In-house annotations of earning call transcripts.

## Benchmarking

```bash
         label    precision    recall  f1-score   support

         B-ASSET     0.6000    0.2400    0.3429        25
      B-CASHFLOW     0.7000    0.5833    0.6364        12
       B-EXPENSE     0.7222    0.6500    0.6842        60
B-FREE_CASH_FLOW     1.0000    1.0000    1.0000         8
         B-GAINS     0.7333    0.5946    0.6567        37
           B-KPI     0.7143    0.5556    0.6250        36
     B-LIABILITY     0.5000    0.2778    0.3571        18
        B-LOSSES     0.7143    0.7143    0.7143         7
        B-PROFIT     0.8462    0.8919    0.8684        37
       B-REVENUE     0.7385    0.8000    0.7680        60
         I-ASSET     0.8000    0.3636    0.5000        11
      I-CASHFLOW     0.9091    0.9091    0.9091        11
       I-EXPENSE     0.7451    0.6230    0.6786        61
I-FREE_CASH_FLOW     1.0000    1.0000    1.0000        17
         I-GAINS     0.8333    0.6667    0.7407        30
           I-KPI     0.8500    0.5000    0.6296        34
     I-LIABILITY     0.5000    0.5000    0.5000         6
        I-LOSSES     0.7143    0.6250    0.6667         8
        I-PROFIT     0.8621    0.9615    0.9091        26
       I-REVENUE     0.7600    0.7308    0.7451        26
               O     0.9839    0.9923    0.9880      8660
```</content><author><name>John Snow Labs</name></author><category term="finance" /><category term="en" /><category term="ner" /><category term="licensed" /><summary type="html">Description This NER model identifies entities that can be associated with a financial sentiment. The model is designed to be used with the associated Assertion Status model that classifies the entities into a sentiment category. Predicted Entities REVENUE, EXPENSE, PROFIT, KPI, GAINS, ASSET, LIABILITY, CASHFLOW, LOSSES, FREE_CASH_FLOW Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = nlp.DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = nlp.SentenceDetector() \ .setInputCols([&quot;document&quot;]) \ .setOutputCol(&quot;sentence&quot;) \ .setCustomBounds([&quot;\n\n&quot;]) tokenizer = nlp.Tokenizer()\ .setInputCols([&quot;sentence&quot;])\ .setOutputCol(&quot;token&quot;) embeddings = nlp.BertEmbeddings.pretrained(&quot;bert_embeddings_sec_bert_base&quot;,&quot;en&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;)\ .setCaseSensitive(True)\ .setMaxSentenceLength(512) ner_model = finance.NerModel.pretrained(&quot;finner_absa_sm&quot;, &quot;en&quot;, &quot;finance/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;])\ .setOutputCol(&quot;ner&quot;)\ ner_converter = finance.NerConverterInternal()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;) pipeline = nlp.Pipeline(stages=[ document_assembler, sentence_detector, tokenizer, embeddings, ner_model, ner_converter ]) model = pipeline.fit(spark.createDataFrame([[&quot;&quot;]]).toDF(&quot;text&quot;)) text = &quot;Equity and earnings of affiliates in Latin America increased to $4.8 million in the quarter from $2.2 million in the prior year as the commodity markets in Latin America remain strong through the end of the quarter.&quot; spark_df = spark.createDataFrame([[text]]).toDF(&quot;text&quot;) result = model. Transform(spark_df) result. Select(F.explode(F.arrays_zip('ner_chunk.result', 'ner_chunk.metadata')).alias(&quot;cols&quot;)) \ .select(F.expr(&quot;cols['0']&quot;).alias(&quot;entity&quot;), F.expr(&quot;cols['1']['entity']&quot;).alias(&quot;label&quot;)).show(50, truncate = False) Results +--------+---------+ |entity |label | +--------+---------+ |Equity |LIABILITY| |earnings|PROFIT | +--------+---------+ Model Information Model Name: finner_absa_sm Compatibility: Finance NLP 1.0.0+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 16.3 MB References In-house annotations of earning call transcripts. Benchmarking label precision recall f1-score support B-ASSET 0.6000 0.2400 0.3429 25 B-CASHFLOW 0.7000 0.5833 0.6364 12 B-EXPENSE 0.7222 0.6500 0.6842 60 B-FREE_CASH_FLOW 1.0000 1.0000 1.0000 8 B-GAINS 0.7333 0.5946 0.6567 37 B-KPI 0.7143 0.5556 0.6250 36 B-LIABILITY 0.5000 0.2778 0.3571 18 B-LOSSES 0.7143 0.7143 0.7143 7 B-PROFIT 0.8462 0.8919 0.8684 37 B-REVENUE 0.7385 0.8000 0.7680 60 I-ASSET 0.8000 0.3636 0.5000 11 I-CASHFLOW 0.9091 0.9091 0.9091 11 I-EXPENSE 0.7451 0.6230 0.6786 61 I-FREE_CASH_FLOW 1.0000 1.0000 1.0000 17 I-GAINS 0.8333 0.6667 0.7407 30 I-KPI 0.8500 0.5000 0.6296 34 I-LIABILITY 0.5000 0.5000 0.5000 6 I-LOSSES 0.7143 0.6250 0.6667 8 I-PROFIT 0.8621 0.9615 0.9091 26 I-REVENUE 0.7600 0.7308 0.7451 26 O 0.9839 0.9923 0.9880 8660</summary></entry><entry><title type="html">Legal Multilabel Classifier on Law Stack Exchange</title><link href="/2023/10/04/legmulticlf_law_stack_exchange_en.html" rel="alternate" type="text/html" title="Legal Multilabel Classifier on Law Stack Exchange" /><published>2023-10-04T00:00:00+00:00</published><updated>2023-10-04T00:00:00+00:00</updated><id>/2023/10/04/legmulticlf_law_stack_exchange_en</id><content type="html" xml:base="/2023/10/04/legmulticlf_law_stack_exchange_en.html">## Description

This is the Multi-Label Text Classification model that can be used to identify 30+ classes to facilitate analysis, discovery, and comparison of legal texts in English related to Law Stack Exchange.

## Predicted Entities

`business`, `california`, `canada`, `civil-law`, `constitutional-law`, `consumer-protection`, `contract-law`, `copyright`, `corporate-law`, `criminal-law`, `employment`, `england-and-wales`, `european-union`, `fraud`, `gdpr`, `germany`, `intellectual-property`, `international`, `internet`, `landlord`, `legal-terms`, `liability`, `licensing`, `police`, `privacy`, `property`, `real-estate`, `rental-property`, `software`, `tax-law`, `terms-of-service`, `trademark`, `traffic`, `united-kingdom`, `united-states`, `us-constitution`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/legal/models/legmulticlf_law_stack_exchange_en_1.0.0_3.0_1696431033425.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/legal/models/legmulticlf_law_stack_exchange_en_1.0.0_3.0_1696431033425.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
```python
document_assembler = nlp.DocumentAssembler() \
    .setInputCol(&quot;text&quot;) \
    .setOutputCol(&quot;document&quot;) \
    .setCleanupMode(&quot;shrink&quot;)

embeddings = nlp.InstructorEmbeddings.pretrained(&quot;instructor_large&quot;, &quot;en&quot;) \
    .setInstruction(&quot;Represent for multilabel classification:&quot;) \
    .setInputCols([&quot;document&quot;]) \
    .setOutputCol(&quot;sentence_embeddings&quot;)

classifierdl = nlp.MultiClassifierDLModel.pretrained('legmulticlf_law_stack_exchange', 'en', 'legal/models') \
    .setInputCols([&quot;sentence_embeddings&quot;])\
    .setOutputCol(&quot;class&quot;)

  
clf_pipeline = nlp.Pipeline(stages=[document_assembler, 
                                    embeddings, 
                                    classifierdl])

df = spark.createDataFrame([[&quot;I've seen this label on coke cans at one point, and I was wondering: is this legally enforceable?If it's not, is it possible for a retailer in any way to disallow the resale of an item purchased?Something like, I don't know, maybe a license you have to agree to in order to be allowed to purchase said item?This comes in the larger context of these new tech releases (GPUs, consoles) and how the producers/retailers could legally prevent scalpers.&quot;]]).toDF(&quot;text&quot;)

model = clf_pipeline.fit(df)
result = model.transform(df)

result.select(&quot;text&quot;, &quot;class.result&quot;).show(truncate=False)
```

&lt;/div&gt;

## Results

```bash
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------------------+
|text                                                                                                                                                                                                                                                                                                                                                                                                                                                           |result                  |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------------------+
|I've seen this label on coke cans at one point, and I was wondering: is this legally enforceable?If it's not, is it possible for a retailer in any way to disallow the resale of an item purchased?Something like, I don't know, maybe a license you have to agree to in order to be allowed to purchase said item?This comes in the larger context of these new tech releases (GPUs, consoles) and how the producers/retailers could legally prevent scalpers.|[contract-law, business]|
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|legmulticlf_law_stack_exchange|
|Compatibility:|Legal NLP 1.0.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence_embeddings]|
|Output Labels:|[class]|
|Language:|en|
|Size:|14.0 MB|

## References

Train dataset available [here](https://huggingface.co/datasets/ymoslem/Law-StackExchange)

## Benchmarking

```bash
label                  precision  recall  f1-score  support 
business               1.00       0.82    0.90      51      
california             1.00       1.00    1.00      74     
canada                 1.00       0.97    0.99      74      
civil-law              0.98       0.94    0.96      52      
constitutional-law     1.00       1.00    1.00      53      
consumer-protection    1.00       0.86    0.92      28      
contract-law           0.98       0.89    0.94      199     
copyright              0.94       0.97    0.95      246     
corporate-law          1.00       0.88    0.94      26      
criminal-law           0.92       0.95    0.94      198     
employment             1.00       1.00    1.00      83      
england-and-wales      0.96       0.99    0.97      93      
european-union         0.91       0.93    0.92      72      
fraud                  1.00       0.97    0.99      39      
gdpr                   1.00       1.00    1.00      87      
germany                1.00       1.00    1.00      44      
intellectual-property  0.82       0.93    0.87      89      
international          0.91       1.00    0.95      71      
internet               0.96       0.96    0.96      83      
landlord               0.97       0.94    0.96      36      
legal-terms            1.00       1.00    1.00      56      
liability              1.00       0.93    0.96      42      
licensing              0.99       0.92    0.95      73      
police                 0.98       1.00    0.99      51      
privacy                1.00       0.83    0.90      69      
property               0.89       0.97    0.93      32      
real-estate            1.00       0.97    0.98      32      
rental-property        1.00       1.00    1.00      41      
software               0.92       0.83    0.87      69      
tax-law                1.00       1.00    1.00      38      
terms-of-service       0.96       0.96    0.96      25      
trademark              1.00       1.00    1.00      45      
traffic                1.00       1.00    1.00      30      
united-kingdom         0.97       0.94    0.96      161     
united-states          0.77       0.87    0.81      644     
us-constitution        1.00       0.95    0.98      43      
micro avg              0.92       0.93    0.93      3149    
macro avg              0.97       0.95    0.96      3149    
weighted avg           0.92       0.93    0.93      3149    
samples avg            0.92       0.94    0.92      3149    
```</content><author><name>John Snow Labs</name></author><category term="licensed" /><category term="legal" /><category term="en" /><category term="classification" /><category term="multilabel" /><category term="tensorflow" /><summary type="html">Description This is the Multi-Label Text Classification model that can be used to identify 30+ classes to facilitate analysis, discovery, and comparison of legal texts in English related to Law Stack Exchange. Predicted Entities business, california, canada, civil-law, constitutional-law, consumer-protection, contract-law, copyright, corporate-law, criminal-law, employment, england-and-wales, european-union, fraud, gdpr, germany, intellectual-property, international, internet, landlord, legal-terms, liability, licensing, police, privacy, property, real-estate, rental-property, software, tax-law, terms-of-service, trademark, traffic, united-kingdom, united-states, us-constitution Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = nlp.DocumentAssembler() \ .setInputCol(&quot;text&quot;) \ .setOutputCol(&quot;document&quot;) \ .setCleanupMode(&quot;shrink&quot;) embeddings = nlp.InstructorEmbeddings.pretrained(&quot;instructor_large&quot;, &quot;en&quot;) \ .setInstruction(&quot;Represent for multilabel classification:&quot;) \ .setInputCols([&quot;document&quot;]) \ .setOutputCol(&quot;sentence_embeddings&quot;) classifierdl = nlp.MultiClassifierDLModel.pretrained('legmulticlf_law_stack_exchange', 'en', 'legal/models') \ .setInputCols([&quot;sentence_embeddings&quot;])\ .setOutputCol(&quot;class&quot;) clf_pipeline = nlp.Pipeline(stages=[document_assembler, embeddings, classifierdl]) df = spark.createDataFrame([[&quot;I've seen this label on coke cans at one point, and I was wondering: is this legally enforceable?If it's not, is it possible for a retailer in any way to disallow the resale of an item purchased?Something like, I don't know, maybe a license you have to agree to in order to be allowed to purchase said item?This comes in the larger context of these new tech releases (GPUs, consoles) and how the producers/retailers could legally prevent scalpers.&quot;]]).toDF(&quot;text&quot;) model = clf_pipeline.fit(df) result = model.transform(df) result.select(&quot;text&quot;, &quot;class.result&quot;).show(truncate=False) Results +---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------------------+ |text |result | +---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------------------+ |I've seen this label on coke cans at one point, and I was wondering: is this legally enforceable?If it's not, is it possible for a retailer in any way to disallow the resale of an item purchased?Something like, I don't know, maybe a license you have to agree to in order to be allowed to purchase said item?This comes in the larger context of these new tech releases (GPUs, consoles) and how the producers/retailers could legally prevent scalpers.|[contract-law, business]| +---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------------------+ Model Information Model Name: legmulticlf_law_stack_exchange Compatibility: Legal NLP 1.0.0+ License: Licensed Edition: Official Input Labels: [sentence_embeddings] Output Labels: [class] Language: en Size: 14.0 MB References Train dataset available here Benchmarking label precision recall f1-score support business 1.00 0.82 0.90 51 california 1.00 1.00 1.00 74 canada 1.00 0.97 0.99 74 civil-law 0.98 0.94 0.96 52 constitutional-law 1.00 1.00 1.00 53 consumer-protection 1.00 0.86 0.92 28 contract-law 0.98 0.89 0.94 199 copyright 0.94 0.97 0.95 246 corporate-law 1.00 0.88 0.94 26 criminal-law 0.92 0.95 0.94 198 employment 1.00 1.00 1.00 83 england-and-wales 0.96 0.99 0.97 93 european-union 0.91 0.93 0.92 72 fraud 1.00 0.97 0.99 39 gdpr 1.00 1.00 1.00 87 germany 1.00 1.00 1.00 44 intellectual-property 0.82 0.93 0.87 89 international 0.91 1.00 0.95 71 internet 0.96 0.96 0.96 83 landlord 0.97 0.94 0.96 36 legal-terms 1.00 1.00 1.00 56 liability 1.00 0.93 0.96 42 licensing 0.99 0.92 0.95 73 police 0.98 1.00 0.99 51 privacy 1.00 0.83 0.90 69 property 0.89 0.97 0.93 32 real-estate 1.00 0.97 0.98 32 rental-property 1.00 1.00 1.00 41 software 0.92 0.83 0.87 69 tax-law 1.00 1.00 1.00 38 terms-of-service 0.96 0.96 0.96 25 trademark 1.00 1.00 1.00 45 traffic 1.00 1.00 1.00 30 united-kingdom 0.97 0.94 0.96 161 united-states 0.77 0.87 0.81 644 us-constitution 1.00 0.95 0.98 43 micro avg 0.92 0.93 0.93 3149 macro avg 0.97 0.95 0.96 3149 weighted avg 0.92 0.93 0.93 3149 samples avg 0.92 0.94 0.92 3149</summary></entry><entry><title type="html">Detect Clinical Conditions (LangTest - ner_eu_clinical_condition)</title><link href="/2023/09/22/ner_eu_clinical_condition_langtest_en.html" rel="alternate" type="text/html" title="Detect Clinical Conditions (LangTest - ner_eu_clinical_condition)" /><published>2023-09-22T00:00:00+00:00</published><updated>2023-09-22T00:00:00+00:00</updated><id>/2023/09/22/ner_eu_clinical_condition_langtest_en</id><content type="html" xml:base="/2023/09/22/ner_eu_clinical_condition_langtest_en.html">## Description

Pretrained named entity recognition (NER) deep learning model for clinical conditions. The SparkNLP deep learning model (MedicalNerModel) is inspired by a former state-of-the-art model for NER: Chiu &amp; Nichols, Named Entity Recognition with Bidirectional LSTM-CNN. The model is the version of [ner_eu_clinical_condition](https://nlp.johnsnowlabs.com/2023/02/06/ner_eu_clinical_condition_en.html) model augmented with `langtest` library.

| **test_type**             | **before fail_count** | **after fail_count** | **before pass_count** | **after pass_count** | **minimum pass_rate** | **before pass_rate** | **after pass_rate** |
|---------------------------|-----------------------|----------------------|-----------------------|----------------------|-----------------------|----------------------|---------------------|
| **add_abbreviation**      | 25                    | 31                   | 348                   | 486                  | 80%                   | 93%                  | 94%                 |
| **add_ocr_typo**          | 61                    | 66                   | 360                   | 501                  | 80%                   | 86%                  | 88%                 |
| **add_typo**              | 41                    | 41                   | 383                   | 528                  | 80%                   | 90%                  | 93%                 |
| **lowercase**             | 6                     | 5                    | 435                   | 583                  | 80%                   | 99%                  | 99%                 |
| **number_to_word**        | 4                     | 7                    | 131                   | 161                  | 80%                   | 97%                  | 96%                 |
| **strip_all_punctuation** | 22                    | 23                   | 421                   | 565                  | 80%                   | 95%                  | 96%                 |
| **strip_punctuation**     | 6                     | 5                    | 437                   | 582                  | 80%                   | 99%                  | 99%                 |
| **swap_entities**         | 60                    | 43                   | 138                   | 225                  | 80%                   | 70%                  | 84%                 |
| **titlecase**             | 106                   | 93                   | 337                   | 493                  | 80%                   | 76%                  | 84%                 |
| **uppercase**             | 193                   | 104                  | 250                   | 484                  | 80%                   | 56%                  | 82%                 |
| **weighted average**      | **524**               | **418**              | **3240**              | **4608**             | **80%**               | **86.08%**           | **91.68%**          |

## Predicted Entities

`clinical_condition`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_eu_clinical_condition_langtest_en_5.1.0_3.0_1695396170806.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_eu_clinical_condition_langtest_en_5.1.0_3.0_1695396170806.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
	
```python
document_assembler = DocumentAssembler()\
	.setInputCol(&quot;text&quot;)\
	.setOutputCol(&quot;document&quot;)
 
sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer()\
	.setInputCols([&quot;sentence&quot;])\
	.setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
	.setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
	.setOutputCol(&quot;embeddings&quot;)

ner = MedicalNerModel.pretrained('ner_eu_clinical_condition_langtest', &quot;en&quot;, &quot;clinical/models&quot;) \
	.setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
	.setOutputCol(&quot;ner&quot;)
 
ner_converter = NerConverterInternal()\
	.setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\
	.setOutputCol(&quot;ner_chunk&quot;)

pipeline = Pipeline(stages=[
	document_assembler,
	sentence_detector,
	tokenizer,
	word_embeddings,
	ner,
	ner_converter])

data = spark.createDataFrame([[&quot;&quot;&quot;Hyperparathyroidism was considered upon the fourth occasion. The history of weakness and generalized joint pains were present. He also had history of epigastric pain diagnosed informally as gastritis. He had previously had open reduction and internal fixation for the initial two fractures under general anesthesia. He sustained mandibular fracture.&quot;&quot;&quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val documenter = new DocumentAssembler() 
    .setInputCol(&quot;text&quot;) 
    .setOutputCol(&quot;document&quot;)

val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)

val tokenizer = new Tokenizer()
  .setInputCols(&quot;sentence&quot;)
  .setOutputCol(&quot;token&quot;)

val word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
	.setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
	.setOutputCol(&quot;embeddings&quot;)

val ner_model = MedicalNerModel.pretrained(&quot;ner_eu_clinical_condition_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)

val ner_converter = new NerConverterInternal()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

val pipeline = new Pipeline().setStages(Array(documenter, sentence_detector, tokenizer, word_embeddings, ner_model, ner_converter))

val data = Seq(Array(&quot;&quot;&quot;Hyperparathyroidism was considered upon the fourth occasion. The history of weakness and generalized joint pains were present. He also had history of epigastric pain diagnosed informally as gastritis. He had previously had open reduction and internal fixation for the initial two fractures under general anesthesia. He sustained mandibular fracture.&quot;&quot;&quot;)).toDS().toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+-------------------+------------------+
|chunk              |ner_label         |
+-------------------+------------------+
|Hyperparathyroidism|clinical_condition|
|weakness           |clinical_condition|
|joint pains        |clinical_condition|
|epigastric pain    |clinical_condition|
|gastritis          |clinical_condition|
|fractures          |clinical_condition|
|anesthesia         |clinical_condition|
|mandibular fracture|clinical_condition|
+-------------------+------------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_eu_clinical_condition_langtest|
|Compatibility:|Healthcare NLP 5.1.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|14.6 MB|

## References

The corpus used for model training is provided by European Clinical Case Corpus (E3C), a project aimed at offering a freely available multilingual corpus of semantically annotated clinical narratives.

## Benchmarking

```bash
label               precision  recall  f1-score  support 
clinical_condition  0.95       0.95    0.95      432     
micro-avg           0.95       0.95    0.95      432     
macro-avg           0.95       0.95    0.95      432     
weighted-avg        0.95       0.95    0.95      432      
```</content><author><name>John Snow Labs</name></author><category term="en" /><category term="ner" /><category term="licensed" /><category term="clinical" /><category term="condition" /><category term="langtest" /><summary type="html">Description Pretrained named entity recognition (NER) deep learning model for clinical conditions. The SparkNLP deep learning model (MedicalNerModel) is inspired by a former state-of-the-art model for NER: Chiu &amp;amp; Nichols, Named Entity Recognition with Bidirectional LSTM-CNN. The model is the version of ner_eu_clinical_condition model augmented with langtest library. test_type before fail_count after fail_count before pass_count after pass_count minimum pass_rate before pass_rate after pass_rate add_abbreviation 25 31 348 486 80% 93% 94% add_ocr_typo 61 66 360 501 80% 86% 88% add_typo 41 41 383 528 80% 90% 93% lowercase 6 5 435 583 80% 99% 99% number_to_word 4 7 131 161 80% 97% 96% strip_all_punctuation 22 23 421 565 80% 95% 96% strip_punctuation 6 5 437 582 80% 99% 99% swap_entities 60 43 138 225 80% 70% 84% titlecase 106 93 337 493 80% 76% 84% uppercase 193 104 250 484 80% 56% 82% weighted average 524 418 3240 4608 80% 86.08% 91.68% Predicted Entities clinical_condition Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer()\ .setInputCols([&quot;sentence&quot;])\ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained('ner_eu_clinical_condition_langtest', &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverterInternal()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;) pipeline = Pipeline(stages=[ document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter]) data = spark.createDataFrame([[&quot;&quot;&quot;Hyperparathyroidism was considered upon the fourth occasion. The history of weakness and generalized joint pains were present. He also had history of epigastric pain diagnosed informally as gastritis. He had previously had open reduction and internal fixation for the initial two fractures under general anesthesia. He sustained mandibular fracture.&quot;&quot;&quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val documenter = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner_model = MedicalNerModel.pretrained(&quot;ner_eu_clinical_condition_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pipeline = new Pipeline().setStages(Array(documenter, sentence_detector, tokenizer, word_embeddings, ner_model, ner_converter)) val data = Seq(Array(&quot;&quot;&quot;Hyperparathyroidism was considered upon the fourth occasion. The history of weakness and generalized joint pains were present. He also had history of epigastric pain diagnosed informally as gastritis. He had previously had open reduction and internal fixation for the initial two fractures under general anesthesia. He sustained mandibular fracture.&quot;&quot;&quot;)).toDS().toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +-------------------+------------------+ |chunk |ner_label | +-------------------+------------------+ |Hyperparathyroidism|clinical_condition| |weakness |clinical_condition| |joint pains |clinical_condition| |epigastric pain |clinical_condition| |gastritis |clinical_condition| |fractures |clinical_condition| |anesthesia |clinical_condition| |mandibular fracture|clinical_condition| +-------------------+------------------+ Model Information Model Name: ner_eu_clinical_condition_langtest Compatibility: Healthcare NLP 5.1.0+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 14.6 MB References The corpus used for model training is provided by European Clinical Case Corpus (E3C), a project aimed at offering a freely available multilingual corpus of semantically annotated clinical narratives. Benchmarking label precision recall f1-score support clinical_condition 0.95 0.95 0.95 432 micro-avg 0.95 0.95 0.95 432 macro-avg 0.95 0.95 0.95 432 weighted-avg 0.95 0.95 0.95 432</summary></entry><entry><title type="html">Extract Biomarkers and their Results (LangTest)</title><link href="/2023/09/22/ner_oncology_biomarker_langtest_en.html" rel="alternate" type="text/html" title="Extract Biomarkers and their Results (LangTest)" /><published>2023-09-22T00:00:00+00:00</published><updated>2023-09-22T00:00:00+00:00</updated><id>/2023/09/22/ner_oncology_biomarker_langtest_en</id><content type="html" xml:base="/2023/09/22/ner_oncology_biomarker_langtest_en.html">## Description

This model extracts mentions of biomarkers and biomarker results from oncology texts. It is the version of [ner_oncology_biomarker](https://nlp.johnsnowlabs.com/2022/11/24/ner_oncology_biomarker_en.html) model augmented with `langtest` library.

Definitions of Predicted Entities:

- `Biomarker`: Biological molecules that indicate the presence or absence of cancer, or the type of cancer (including oncogenes).
- `Biomarker_Result`: Terms or values that are identified as the result of biomarkers.

| **test_type**             | **before fail_count** | **after fail_count** | **before pass_count** | **after pass_count** | **minimum pass_rate** | **before pass_rate** | **after pass_rate** |
|---------------------------|-----------------------|----------------------|-----------------------|----------------------|-----------------------|----------------------|---------------------|
| **add_abbreviation**      | 87                    | 75                   | 1879                  | 1891                 | 92%                   | 96%                  | 96%                 |
| **add_ocr_typo**          | 144                   | 125                  | 2037                  | 2056                 | 92%                   | 93%                  | 94%                 |
| **add_punctuation**       | 1                     | 0                    | 97                    | 98                   | 92%                   | 99%                  | 100%                |
| **add_typo**              | 52                    | 40                   | 2128                  | 2149                 | 92%                   | 98%                  | 98%                 |
| **number_to_word**        | 114                   | 82                   | 867                   | 899                  | 92%                   | 88%                  | 92%                 |
| **strip_all_punctuation** | 97                    | 86                   | 2149                  | 2160                 | 92%                   | 96%                  | 96%                 |
| **titlecase**             | 168                   | 164                  | 2092                  | 2096                 | 92%                   | 93%                  | 93%                 |
| **uppercase**             | 217                   | 97                   | 2049                  | 2169                 | 92%                   | 90%                  | 96%                 |
| **weighted average**      | **880**               | **669**              | **13298**             | **13518**            | **92%**               | **93.79%**           | **95.28%**          |

## Predicted Entities

`Biomarker`, `Biomarker_Result`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_oncology_biomarker_langtest_en_5.1.0_3.0_1695395379174.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_oncology_biomarker_langtest_en_5.1.0_3.0_1695395379174.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)                

ner = MedicalNerModel.pretrained(&quot;ner_oncology_biomarker_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverter() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \
    .setOutputCol(&quot;ner_chunk&quot;)

pipeline = Pipeline(stages=[document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter])

data = spark.createDataFrame([[&quot;The results of immunohistochemical examination showed that she tested negative for CK7, synaptophysin (Syn), chromogranin A (CgA), Muc5AC, human epidermal growth factor receptor-2 (HER2), and Muc6; positive for CK20, Muc1, Muc2, E-cadherin, and p53; the Ki-67 index was about 87% .&quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
    
val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)
    
val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)                
    
val ner = MedicalNerModel.pretrained(&quot;ner_oncology_biomarker_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)
    
val ner_converter = new NerConverter()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

        
val pipeline = new Pipeline().setStages(Array(document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter))    

val data = Seq(&quot;The results of immunohistochemical examination showed that she tested negative for CK7, synaptophysin (Syn), chromogranin A (CgA), Muc5AC, human epidermal growth factor receptor-2 (HER2), and Muc6; positive for CK20, Muc1, Muc2, E-cadherin, and p53; the Ki-67 index was about 87% .&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+----------------------------------------+----------------+
|chunk                                   |ner_label       |
+----------------------------------------+----------------+
|negative                                |Biomarker_Result|
|CK7                                     |Biomarker       |
|synaptophysin                           |Biomarker       |
|Syn                                     |Biomarker       |
|chromogranin A                          |Biomarker       |
|CgA                                     |Biomarker       |
|Muc5AC                                  |Biomarker_Result|
|human epidermal growth factor receptor-2|Biomarker       |
|HER2                                    |Biomarker       |
|Muc6                                    |Biomarker       |
|positive                                |Biomarker_Result|
|CK20                                    |Biomarker       |
|Muc1                                    |Biomarker       |
|Muc2                                    |Biomarker       |
|E-cadherin                              |Biomarker       |
|p53                                     |Biomarker       |
|Ki-67 index                             |Biomarker       |
+----------------------------------------+----------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_oncology_biomarker_langtest|
|Compatibility:|Healthcare NLP 5.1.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|14.8 MB|

## References

In-house annotated oncology case reports.

## Benchmarking

```bash
label             precision  recall  f1-score  support 
Biomarker         0.86       0.85    0.85      615     
Biomarker_Result  0.79       0.72    0.75      346     
micro-avg         0.84       0.80    0.82      961     
macro-avg         0.82       0.78    0.80      961     
weighted-avg      0.83       0.80    0.82      961   
```</content><author><name>John Snow Labs</name></author><category term="en" /><category term="ner" /><category term="clinical" /><category term="licensed" /><category term="oncology" /><category term="biomarker" /><category term="langtest" /><summary type="html">Description This model extracts mentions of biomarkers and biomarker results from oncology texts. It is the version of ner_oncology_biomarker model augmented with langtest library. Definitions of Predicted Entities: Biomarker: Biological molecules that indicate the presence or absence of cancer, or the type of cancer (including oncogenes). Biomarker_Result: Terms or values that are identified as the result of biomarkers. test_type before fail_count after fail_count before pass_count after pass_count minimum pass_rate before pass_rate after pass_rate add_abbreviation 87 75 1879 1891 92% 96% 96% add_ocr_typo 144 125 2037 2056 92% 93% 94% add_punctuation 1 0 97 98 92% 99% 100% add_typo 52 40 2128 2149 92% 98% 98% number_to_word 114 82 867 899 92% 88% 92% strip_all_punctuation 97 86 2149 2160 92% 96% 96% titlecase 168 164 2092 2096 92% 93% 93% uppercase 217 97 2049 2169 92% 90% 96% weighted average 880 669 13298 13518 92% 93.79% 95.28% Predicted Entities Biomarker, Biomarker_Result Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_oncology_biomarker_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverter() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;) pipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter]) data = spark.createDataFrame([[&quot;The results of immunohistochemical examination showed that she tested negative for CK7, synaptophysin (Syn), chromogranin A (CgA), Muc5AC, human epidermal growth factor receptor-2 (HER2), and Muc6; positive for CK20, Muc1, Muc2, E-cadherin, and p53; the Ki-67 index was about 87% .&quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_oncology_biomarker_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverter() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter)) val data = Seq(&quot;The results of immunohistochemical examination showed that she tested negative for CK7, synaptophysin (Syn), chromogranin A (CgA), Muc5AC, human epidermal growth factor receptor-2 (HER2), and Muc6; positive for CK20, Muc1, Muc2, E-cadherin, and p53; the Ki-67 index was about 87% .&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +----------------------------------------+----------------+ |chunk |ner_label | +----------------------------------------+----------------+ |negative |Biomarker_Result| |CK7 |Biomarker | |synaptophysin |Biomarker | |Syn |Biomarker | |chromogranin A |Biomarker | |CgA |Biomarker | |Muc5AC |Biomarker_Result| |human epidermal growth factor receptor-2|Biomarker | |HER2 |Biomarker | |Muc6 |Biomarker | |positive |Biomarker_Result| |CK20 |Biomarker | |Muc1 |Biomarker | |Muc2 |Biomarker | |E-cadherin |Biomarker | |p53 |Biomarker | |Ki-67 index |Biomarker | +----------------------------------------+----------------+ Model Information Model Name: ner_oncology_biomarker_langtest Compatibility: Healthcare NLP 5.1.0+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 14.8 MB References In-house annotated oncology case reports. Benchmarking label precision recall f1-score support Biomarker 0.86 0.85 0.85 615 Biomarker_Result 0.79 0.72 0.75 346 micro-avg 0.84 0.80 0.82 961 macro-avg 0.82 0.78 0.80 961 weighted-avg 0.83 0.80 0.82 961</summary></entry><entry><title type="html">Detect Entities Related to Cancer Diagnosis (LangTest)</title><link href="/2023/09/22/ner_oncology_diagnosis_langtest_en.html" rel="alternate" type="text/html" title="Detect Entities Related to Cancer Diagnosis (LangTest)" /><published>2023-09-22T00:00:00+00:00</published><updated>2023-09-22T00:00:00+00:00</updated><id>/2023/09/22/ner_oncology_diagnosis_langtest_en</id><content type="html" xml:base="/2023/09/22/ner_oncology_diagnosis_langtest_en.html">## Description

This model extracts entities related to cancer diagnosis, such as Metastasis, Histological_Type, or Invasion. It is the version of [ner_oncology_diagnosis](https://nlp.johnsnowlabs.com/2022/11/24/ner_oncology_diagnosis_en.html) model augmented with `langtest` library.

Definitions of Predicted Entities:

- `Adenopathy`: Mentions of pathological findings of the lymph nodes.
- `Cancer_Dx`: Mentions of cancer diagnoses (such as &quot;breast cancer&quot;) or pathological types that are usually used as synonyms for &quot;cancer&quot; (e.g. &quot;carcinoma&quot;). When anatomical references are present, they are included in the Cancer_Dx extraction.
- `Cancer_Score`: Clinical or imaging scores that are specific for cancer settings (e.g. &quot;BI-RADS&quot; or &quot;Allred score&quot;).
- `Grade`: All pathological grading of tumors (e.g. &quot;grade 1&quot;) or degrees of cellular differentiation (e.g. &quot;well-differentiated&quot;)
- `Histological_Type`: Histological variants or cancer subtypes, such as &quot;papillary&quot;, &quot;clear cell&quot; or &quot;medullary&quot;. 
- `Invasion`: Mentions that refer to tumor invasion, such as &quot;invasion&quot; or &quot;involvement&quot;. Metastases or lymph node involvement are excluded from this category.
- `Metastasis`: Terms that indicate a metastatic disease. Anatomical references are not included in these extractions.
- `Pathology_Result`: The findings of a biopsy from the pathology report that is not covered by another entity (e.g. &quot;malignant ductal cells&quot;).
- `Performance_Status`: Mentions of performance status scores, such as ECOG and Karnofsky. The name of the score is extracted together with the result (e.g. &quot;ECOG performance status of 4&quot;).
- `Staging`: Mentions of cancer stage such as &quot;stage 2b&quot; or &quot;T2N1M0&quot;. It also includes words such as &quot;in situ&quot;, &quot;early-stage&quot; or &quot;advanced&quot;.
- `Tumor_Finding`: All nonspecific terms that may be related to tumors, either malignant or benign (for example: &quot;mass&quot;, &quot;tumor&quot;, &quot;lesion&quot;, or &quot;neoplasm&quot;).
- `Tumor_Size`: Size of the tumor, including numerical value and unit of measurement (e.g. &quot;3 cm&quot;).

| **test_type**        | **before fail_count** | **after fail_count** | **before pass_count** | **after pass_count** | **minimum pass_rate** | **before pass_rate** | **after pass_rate** |
|----------------------|-----------------------|----------------------|-----------------------|----------------------|-----------------------|----------------------|---------------------|
| **add_punctuation**  | 4                     | 3                    | 183                   | 184                  | 60%                   | 98%                  | 98%                 |
| **swap_entities**    | 272                   | 276                  | 1241                  | 1252                 | 60%                   | 82%                  | 82%                 |
| **titlecase**        | 910                   | 834                  | 3592                  | 3668                 | 80%                   | 80%                  | 81%                 |
| **uppercase**        | 1768                  | 606                  | 2747                  | 3909                 | 80%                   | 61%                  | 87%                 |
| **weighted average** | **2954**              | **1719**             | **7763**              | **9013**             | **70%**               | **72.44%**           | **83.98%**          |

## Predicted Entities

`Adenopathy`, `Cancer_Dx`, `Cancer_Score`, `Grade`, `Histological_Type`, `Invasion`, `Metastasis`, `Pathology_Result`, `Performance_Status`, `Staging`, `Tumor_Finding`, `Tumor_Size`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_oncology_diagnosis_langtest_en_5.1.0_3.0_1695393811887.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_oncology_diagnosis_langtest_en_5.1.0_3.0_1695393811887.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)                

ner = MedicalNerModel.pretrained(&quot;ner_oncology_diagnosis_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverter() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \
    .setOutputCol(&quot;ner_chunk&quot;)

pipeline = Pipeline(stages=[document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter])

data = spark.createDataFrame([[&quot;Two years ago, the patient presented with a tumor in her left breast and adenopathies. She was diagnosed with invasive ductal carcinoma. Last week she was also found to have a lung metastasis.&quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
    
val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)
    
val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)                
    
val ner = MedicalNerModel.pretrained(&quot;ner_oncology_diagnosis_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)
    
val ner_converter = new NerConverter()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

        
val pipeline = new Pipeline().setStages(Array(document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter))    

val data = Seq(&quot;Two years ago, the patient presented with a tumor in her left breast and adenopathies. She was diagnosed with invasive ductal carcinoma. Last week she was also found to have a lung metastasis.&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+------------+-----------------+
|chunk       |ner_label        |
+------------+-----------------+
|tumor       |Tumor_Finding    |
|adenopathies|Adenopathy       |
|invasive    |Histological_Type|
|ductal      |Histological_Type|
|carcinoma   |Cancer_Dx        |
|metastasis  |Metastasis       |
+------------+-----------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_oncology_diagnosis_langtest|
|Compatibility:|Healthcare NLP 5.1.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|14.8 MB|

## References

In-house annotated oncology case reports.

## Benchmarking

```bash
label               precision  recall  f1-score  support 
Adenopathy          0.65       0.82    0.73      34      
Cancer_Dx           0.85       0.95    0.90      721     
Cancer_Score        0.86       0.64    0.73      28      
Grade               0.57       0.73    0.64      82      
Histological_Type   0.73       0.87    0.79      242     
Invasion            0.79       0.94    0.86      172     
Metastasis          0.82       0.98    0.89      321     
Pathology_Result    0.44       0.70    0.54      348     
Performance_Status  0.33       0.94    0.49      31      
Staging             0.90       0.94    0.92      123     
Tumor_Finding       0.87       0.94    0.90      1018    
Tumor_Size          0.68       0.93    0.78      216     
micro-avg           0.75       0.91    0.82      3336    
macro-avg           0.71       0.87    0.77      3336    
weighted-avg        0.77       0.91    0.83      3336    
```</content><author><name>John Snow Labs</name></author><category term="en" /><category term="ner" /><category term="clinical" /><category term="licensed" /><category term="oncology" /><category term="diagnosis" /><category term="langtest" /><summary type="html">Description This model extracts entities related to cancer diagnosis, such as Metastasis, Histological_Type, or Invasion. It is the version of ner_oncology_diagnosis model augmented with langtest library. Definitions of Predicted Entities: Adenopathy: Mentions of pathological findings of the lymph nodes. Cancer_Dx: Mentions of cancer diagnoses (such as “breast cancer”) or pathological types that are usually used as synonyms for “cancer” (e.g. “carcinoma”). When anatomical references are present, they are included in the Cancer_Dx extraction. Cancer_Score: Clinical or imaging scores that are specific for cancer settings (e.g. “BI-RADS” or “Allred score”). Grade: All pathological grading of tumors (e.g. “grade 1”) or degrees of cellular differentiation (e.g. “well-differentiated”) Histological_Type: Histological variants or cancer subtypes, such as “papillary”, “clear cell” or “medullary”. Invasion: Mentions that refer to tumor invasion, such as “invasion” or “involvement”. Metastases or lymph node involvement are excluded from this category. Metastasis: Terms that indicate a metastatic disease. Anatomical references are not included in these extractions. Pathology_Result: The findings of a biopsy from the pathology report that is not covered by another entity (e.g. “malignant ductal cells”). Performance_Status: Mentions of performance status scores, such as ECOG and Karnofsky. The name of the score is extracted together with the result (e.g. “ECOG performance status of 4”). Staging: Mentions of cancer stage such as “stage 2b” or “T2N1M0”. It also includes words such as “in situ”, “early-stage” or “advanced”. Tumor_Finding: All nonspecific terms that may be related to tumors, either malignant or benign (for example: “mass”, “tumor”, “lesion”, or “neoplasm”). Tumor_Size: Size of the tumor, including numerical value and unit of measurement (e.g. “3 cm”). test_type before fail_count after fail_count before pass_count after pass_count minimum pass_rate before pass_rate after pass_rate add_punctuation 4 3 183 184 60% 98% 98% swap_entities 272 276 1241 1252 60% 82% 82% titlecase 910 834 3592 3668 80% 80% 81% uppercase 1768 606 2747 3909 80% 61% 87% weighted average 2954 1719 7763 9013 70% 72.44% 83.98% Predicted Entities Adenopathy, Cancer_Dx, Cancer_Score, Grade, Histological_Type, Invasion, Metastasis, Pathology_Result, Performance_Status, Staging, Tumor_Finding, Tumor_Size Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_oncology_diagnosis_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverter() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;) pipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter]) data = spark.createDataFrame([[&quot;Two years ago, the patient presented with a tumor in her left breast and adenopathies. She was diagnosed with invasive ductal carcinoma. Last week she was also found to have a lung metastasis.&quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_oncology_diagnosis_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverter() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter)) val data = Seq(&quot;Two years ago, the patient presented with a tumor in her left breast and adenopathies. She was diagnosed with invasive ductal carcinoma. Last week she was also found to have a lung metastasis.&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +------------+-----------------+ |chunk |ner_label | +------------+-----------------+ |tumor |Tumor_Finding | |adenopathies|Adenopathy | |invasive |Histological_Type| |ductal |Histological_Type| |carcinoma |Cancer_Dx | |metastasis |Metastasis | +------------+-----------------+ Model Information Model Name: ner_oncology_diagnosis_langtest Compatibility: Healthcare NLP 5.1.0+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 14.8 MB References In-house annotated oncology case reports. Benchmarking label precision recall f1-score support Adenopathy 0.65 0.82 0.73 34 Cancer_Dx 0.85 0.95 0.90 721 Cancer_Score 0.86 0.64 0.73 28 Grade 0.57 0.73 0.64 82 Histological_Type 0.73 0.87 0.79 242 Invasion 0.79 0.94 0.86 172 Metastasis 0.82 0.98 0.89 321 Pathology_Result 0.44 0.70 0.54 348 Performance_Status 0.33 0.94 0.49 31 Staging 0.90 0.94 0.92 123 Tumor_Finding 0.87 0.94 0.90 1018 Tumor_Size 0.68 0.93 0.78 216 micro-avg 0.75 0.91 0.82 3336 macro-avg 0.71 0.87 0.77 3336 weighted-avg 0.77 0.91 0.83 3336</summary></entry><entry><title type="html">Extract Oncology Tests (LangTest)</title><link href="/2023/09/22/ner_oncology_test_langtest_en.html" rel="alternate" type="text/html" title="Extract Oncology Tests (LangTest)" /><published>2023-09-22T00:00:00+00:00</published><updated>2023-09-22T00:00:00+00:00</updated><id>/2023/09/22/ner_oncology_test_langtest_en</id><content type="html" xml:base="/2023/09/22/ner_oncology_test_langtest_en.html">## Description

This model extracts mentions of tests from oncology texts, including pathology tests and imaging tests. It is the version of [ner_oncology_test](https://nlp.johnsnowlabs.com/2022/11/24/ner_oncology_test_en.html) model augmented with `langtest` library.

Definitions of Predicted Entities:

- `Biomarker`: Biological molecules that indicate the presence or absence of cancer, or the type of cancer. Oncogenes are excluded from this category.
- `Biomarker_Result`: Terms or values that are identified as the result of biomarkers.
- `Imaging_Test`: Imaging tests mentioned in texts, such as &quot;chest CT scan&quot;.
- `Oncogene`: Mentions of genes that are implicated in the etiology of cancer.
- `Pathology_Test`: Mentions of biopsies or tests that use tissue samples.

| **test_type**        | **before fail_count** | **after fail_count** | **before pass_count** | **after pass_count** | **minimum pass_rate** | **before pass_rate** | **after pass_rate** |
|----------------------|-----------------------|----------------------|-----------------------|----------------------|-----------------------|----------------------|---------------------|
| **add_ocr_typo**     | 235                   | 213                  | 1937                  | 1959                 | 80%                   | 89%                  | 90%                 |
| **add_typo**         | 101                   | 103                  | 2058                  | 2057                 | 80%                   | 95%                  | 95%                 |
| **number_to_word**   | 87                    | 82                   | 832                   | 837                  | 80%                   | 91%                  | 91%                 |
| **swap_entities**    | 149                   | 126                  | 492                   | 505                  | 80%                   | 77%                  | 80%                 |
| **titlecase**        | 488                   | 184                  | 1761                  | 2065                 | 80%                   | 78%                  | 92%                 |
| **uppercase**        | 645                   | 185                  | 1612                  | 2072                 | 80%                   | 71%                  | 92%                 |
| **weighted average** | **1470**              | **680**              | **6755**              | **7536**             | **80%**               | **82.13%**           | **91.72%**          |

## Predicted Entities

`Biomarker`, `Biomarker_Result`, `Imaging_Test`, `Oncogene`, `Pathology_Test`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_oncology_test_langtest_en_5.1.0_3.0_1695391226396.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_oncology_test_langtest_en_5.1.0_3.0_1695391226396.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)                

ner = MedicalNerModel.pretrained(&quot;ner_oncology_test_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverter() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \
    .setOutputCol(&quot;ner_chunk&quot;)

pipeline = Pipeline(stages=[document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter])

data = spark.createDataFrame([[&quot;A biopsy was conducted using an ultrasound guided thick needle. His chest computed tomography (CT scan) was negative.&quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
    
val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)
    
val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)                
    
val ner = MedicalNerModel.pretrained(&quot;ner_oncology_test_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)
    
val ner_converter = new NerConverter()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

        
val pipeline = new Pipeline().setStages(Array(document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter))    

val data = Seq(&quot;A biopsy was conducted using an ultrasound guided thick needle. His chest computed tomography (CT scan) was negative.&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+-------------------------+--------------+
|chunk                    |ner_label     |
+-------------------------+--------------+
|biopsy                   |Pathology_Test|
|ultrasound               |Imaging_Test  |
|chest computed tomography|Imaging_Test  |
|CT scan                  |Imaging_Test  |
+-------------------------+--------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_oncology_test_langtest|
|Compatibility:|Healthcare NLP 5.1.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|14.8 MB|

## References

In-house annotated oncology case reports.

## Benchmarking

```bash
label               precision  recall  f1-score  support 
B-Pathology_Test    0.78       0.80    0.79      254     
I-Pathology_Test    0.83       0.75    0.79      263     
B-Imaging_Test      0.85       0.89    0.87      414     
I-Imaging_Test      0.78       0.91    0.84      633     
B-Biomarker_Result  0.82       0.80    0.81      289     
I-Biomarker_Result  0.83       0.82    0.83      374     
B-Biomarker         0.83       0.81    0.82      374     
I-Biomarker         0.85       0.70    0.77      375     
B-Oncogene          0.79       0.86    0.82      100     
I-Oncogene          0.81       0.82    0.81      184     
micro-avg           0.82       0.82    0.82      3260    
macro-avg           0.82       0.81    0.81      3260    
weighted-avg        0.82       0.82    0.82      3260    
```</content><author><name>John Snow Labs</name></author><category term="en" /><category term="ner" /><category term="clinical" /><category term="licensed" /><category term="oncology" /><category term="test" /><category term="langtest" /><summary type="html">Description This model extracts mentions of tests from oncology texts, including pathology tests and imaging tests. It is the version of ner_oncology_test model augmented with langtest library. Definitions of Predicted Entities: Biomarker: Biological molecules that indicate the presence or absence of cancer, or the type of cancer. Oncogenes are excluded from this category. Biomarker_Result: Terms or values that are identified as the result of biomarkers. Imaging_Test: Imaging tests mentioned in texts, such as “chest CT scan”. Oncogene: Mentions of genes that are implicated in the etiology of cancer. Pathology_Test: Mentions of biopsies or tests that use tissue samples. test_type before fail_count after fail_count before pass_count after pass_count minimum pass_rate before pass_rate after pass_rate add_ocr_typo 235 213 1937 1959 80% 89% 90% add_typo 101 103 2058 2057 80% 95% 95% number_to_word 87 82 832 837 80% 91% 91% swap_entities 149 126 492 505 80% 77% 80% titlecase 488 184 1761 2065 80% 78% 92% uppercase 645 185 1612 2072 80% 71% 92% weighted average 1470 680 6755 7536 80% 82.13% 91.72% Predicted Entities Biomarker, Biomarker_Result, Imaging_Test, Oncogene, Pathology_Test Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_oncology_test_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverter() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;) pipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter]) data = spark.createDataFrame([[&quot;A biopsy was conducted using an ultrasound guided thick needle. His chest computed tomography (CT scan) was negative.&quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_oncology_test_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverter() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter)) val data = Seq(&quot;A biopsy was conducted using an ultrasound guided thick needle. His chest computed tomography (CT scan) was negative.&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +-------------------------+--------------+ |chunk |ner_label | +-------------------------+--------------+ |biopsy |Pathology_Test| |ultrasound |Imaging_Test | |chest computed tomography|Imaging_Test | |CT scan |Imaging_Test | +-------------------------+--------------+ Model Information Model Name: ner_oncology_test_langtest Compatibility: Healthcare NLP 5.1.0+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 14.8 MB References In-house annotated oncology case reports. Benchmarking label precision recall f1-score support B-Pathology_Test 0.78 0.80 0.79 254 I-Pathology_Test 0.83 0.75 0.79 263 B-Imaging_Test 0.85 0.89 0.87 414 I-Imaging_Test 0.78 0.91 0.84 633 B-Biomarker_Result 0.82 0.80 0.81 289 I-Biomarker_Result 0.83 0.82 0.83 374 B-Biomarker 0.83 0.81 0.82 374 I-Biomarker 0.85 0.70 0.77 375 B-Oncogene 0.79 0.86 0.82 100 I-Oncogene 0.81 0.82 0.81 184 micro-avg 0.82 0.82 0.82 3260 macro-avg 0.82 0.81 0.81 3260 weighted-avg 0.82 0.82 0.82 3260</summary></entry><entry><title type="html">Detect Entities Related to Cancer Therapies (LangTest)</title><link href="/2023/09/22/ner_oncology_therapy_langtest_en.html" rel="alternate" type="text/html" title="Detect Entities Related to Cancer Therapies (LangTest)" /><published>2023-09-22T00:00:00+00:00</published><updated>2023-09-22T00:00:00+00:00</updated><id>/2023/09/22/ner_oncology_therapy_langtest_en</id><content type="html" xml:base="/2023/09/22/ner_oncology_therapy_langtest_en.html">## Description

This model extracts entities related to oncology therapies using granular labels, including mentions of treatments, posology information, and line of therapy. It is the version of [ner_oncology_therapy](https://nlp.johnsnowlabs.com/2022/11/24/ner_oncology_therapy_en.html) model augmented with `langtest` library.

Definitions of Predicted Entities:

- `Cancer_Surgery`: Terms that indicate surgery as a form of cancer treatment.
- `Chemotherapy`: Mentions of chemotherapy drugs, or unspecific words such as &quot;chemotherapy&quot;.
- `Cycle_Count`: The total number of cycles being administered of an oncological therapy (e.g. &quot;5 cycles&quot;). 
- `Cycle_Day`: References to the day of the cycle of oncological therapy (e.g. &quot;day 5&quot;).
- `Cycle_Number`: The number of the cycle of an oncological therapy that is being applied (e.g. &quot;third cycle&quot;).
- `Dosage`: The quantity prescribed by the physician for an active ingredient.
- `Duration`: Words indicating the duration of a treatment (e.g. &quot;for 2 weeks&quot;).
- `Frequency`: Words indicating the frequency of treatment administration (e.g. &quot;daily&quot; or &quot;bid&quot;).
- `Hormonal_Therapy`: Mentions of hormonal drugs used to treat cancer, or unspecific words such as &quot;hormonal therapy&quot;.
- `Immunotherapy`: Mentions of immunotherapy drugs, or unspecific words such as &quot;immunotherapy&quot;.
- `Line_Of_Therapy`: Explicit references to the line of therapy of an oncological therapy (e.g. &quot;first-line treatment&quot;).
- `Radiotherapy`: Terms that indicate the use of Radiotherapy.
- `Radiation_Dose`: Dose used in radiotherapy.
- `Response_To_Treatment`: Terms related to the clinical progress of the patient related to cancer treatment, including &quot;recurrence&quot;, &quot;bad response&quot; or &quot;improvement&quot;.
- `Route`: Words indicating the type of administration route (such as &quot;PO&quot; or &quot;transdermal&quot;).
- `Targeted_Therapy`: Mentions of targeted therapy drugs, or unspecific words such as &quot;targeted therapy&quot;.
- `Unspecific_Therapy`: Terms that indicate a known cancer therapy but that is not specific to any other therapy entity (e.g. &quot;chemoradiotherapy&quot; or &quot;adjuvant therapy&quot;).

| **test_type**             | **before fail_count** | **after fail_count** | **before pass_count** | **after pass_count** | **minimum pass_rate** | **before pass_rate** | **after pass_rate** |
|---------------------------|-----------------------|----------------------|-----------------------|----------------------|-----------------------|----------------------|---------------------|
| **add_ocr_typo**          | 725                   | 279                  | 617                   | 1063                 | 70%                   | 46%                  | 79%                 |
| **add_typo**              | 248                   | 152                  | 1066                  | 1169                 | 70%                   | 81%                  | 88%                 |
| **lowercase**             | 214                   | 152                  | 1152                  | 1214                 | 70%                   | 84%                  | 89%                 |
| **strip_all_punctuation** | 223                   | 228                  | 1128                  | 1123                 | 70%                   | 83%                  | 83%                 |
| **strip_punctuation**     | 50                    | 37                   | 1270                  | 1283                 | 70%                   | 96%                  | 97%                 |
| **titlecase**             | 764                   | 288                  | 603                   | 1079                 | 70%                   | 44%                  | 79%                 |
| **uppercase**             | 1320                  | 233                  | 48                    | 1135                 | 70%                   | 4%                   | 83%                 |
| **weighted average**      | **2571**              | **938**              | **4201**              | **5834**             | **70%**               | **62.03%**           | **86.15%**          |

## Predicted Entities

`Cancer_Surgery`, `Chemotherapy`, `Cycle_Count`, `Cycle_Day`, `Cycle_Number`, `Dosage`, `Duration`, `Frequency`, `Hormonal_Therapy`, `Immunotherapy`, `Line_Of_Therapy`, `Radiotherapy`, `Radiation_Dose`, `Response_To_Treatment`, `Route`, `Targeted_Therapy`, `Unspecific_Therapy`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_oncology_therapy_langtest_en_5.1.0_3.0_1695389309847.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_oncology_therapy_langtest_en_5.1.0_3.0_1695389309847.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)                

ner = MedicalNerModel.pretrained(&quot;ner_oncology_therapy_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverter() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \
    .setOutputCol(&quot;ner_chunk&quot;)

pipeline = Pipeline(stages=[document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter])

data = spark.createDataFrame([[&quot;The had previously undergone a left mastectomy and an axillary lymph node dissection for a left breast cancer twenty years ago.
The tumor was positive for ER and PR. Postoperatively, radiotherapy was administered to her breast.
The cancer recurred as a right lung metastasis 13 years later. The patient underwent a regimen consisting of adriamycin (60 mg/m2) and cyclophosphamide (600 mg/m2) over six courses, as first line therapy.&quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
    
val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)
    
val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)                
    
val ner = MedicalNerModel.pretrained(&quot;ner_oncology_therapy_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)
    
val ner_converter = new NerConverter()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

        
val pipeline = new Pipeline().setStages(Array(document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter))    

val data = Seq(&quot;The had previously undergone a left mastectomy and an axillary lymph node dissection for a left breast cancer twenty years ago.
The tumor was positive for ER and PR. Postoperatively, radiotherapy was administered to her breast.
The cancer recurred as a right lung metastasis 13 years later. The patient underwent a regimen consisting of adriamycin (60 mg/m2) and cyclophosphamide (600 mg/m2) over six courses, as first line therapy.&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+------------------------------+---------------------+
|chunk                         |ner_label            |
+------------------------------+---------------------+
|mastectomy                    |Cancer_Surgery       |
|axillary lymph node dissection|Cancer_Surgery       |
|PR                            |Response_To_Treatment|
|radiotherapy                  |Radiotherapy         |
|recurred                      |Response_To_Treatment|
|adriamycin                    |Chemotherapy         |
|60 mg/m2                      |Chemotherapy         |
|cyclophosphamide              |Chemotherapy         |
|600 mg/m2                     |Chemotherapy         |
|six courses                   |Cycle_Count          |
|first line                    |Line_Of_Therapy      |
+------------------------------+---------------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_oncology_therapy_langtest|
|Compatibility:|Healthcare NLP 5.1.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|14.7 MB|

## References

In-house annotated oncology case reports.

## Benchmarking

```bash
label                  precision  recall  f1-score  support 
Cancer_Surgery         0.85       0.85    0.85      490     
Chemotherapy           0.92       0.93    0.92      637     
Cycle_Count            0.78       0.85    0.82      128     
Cycle_Day              0.66       0.71    0.68      68      
Cycle_Number           0.75       0.58    0.65      52      
Dosage                 0.91       0.91    0.91      311     
Duration               0.80       0.74    0.77      221     
Frequency              0.86       0.89    0.88      162     
Hormonal_Therapy       0.91       0.90    0.91      92      
Immunotherapy          0.82       0.79    0.81      63      
Line_Of_Therapy        0.78       0.78    0.78      46      
Radiation_Dose         0.88       0.88    0.88      48      
Radiotherapy           0.83       0.88    0.85      154     
Response_To_Treatment  0.71       0.68    0.69      377     
Route                  0.94       0.85    0.89      92      
Targeted_Therapy       0.90       0.89    0.89      166     
Unspecific_Therapy     0.74       0.79    0.77      150     
micro-avg              0.84       0.84    0.84      3257    
macro-avg              0.83       0.82    0.82      3257    
weighted-avg           0.84       0.84    0.84      3257    
```</content><author><name>John Snow Labs</name></author><category term="en" /><category term="ner" /><category term="clinical" /><category term="licensed" /><category term="oncology" /><category term="therapy" /><category term="langtest" /><summary type="html">Description This model extracts entities related to oncology therapies using granular labels, including mentions of treatments, posology information, and line of therapy. It is the version of ner_oncology_therapy model augmented with langtest library. Definitions of Predicted Entities: Cancer_Surgery: Terms that indicate surgery as a form of cancer treatment. Chemotherapy: Mentions of chemotherapy drugs, or unspecific words such as “chemotherapy”. Cycle_Count: The total number of cycles being administered of an oncological therapy (e.g. “5 cycles”). Cycle_Day: References to the day of the cycle of oncological therapy (e.g. “day 5”). Cycle_Number: The number of the cycle of an oncological therapy that is being applied (e.g. “third cycle”). Dosage: The quantity prescribed by the physician for an active ingredient. Duration: Words indicating the duration of a treatment (e.g. “for 2 weeks”). Frequency: Words indicating the frequency of treatment administration (e.g. “daily” or “bid”). Hormonal_Therapy: Mentions of hormonal drugs used to treat cancer, or unspecific words such as “hormonal therapy”. Immunotherapy: Mentions of immunotherapy drugs, or unspecific words such as “immunotherapy”. Line_Of_Therapy: Explicit references to the line of therapy of an oncological therapy (e.g. “first-line treatment”). Radiotherapy: Terms that indicate the use of Radiotherapy. Radiation_Dose: Dose used in radiotherapy. Response_To_Treatment: Terms related to the clinical progress of the patient related to cancer treatment, including “recurrence”, “bad response” or “improvement”. Route: Words indicating the type of administration route (such as “PO” or “transdermal”). Targeted_Therapy: Mentions of targeted therapy drugs, or unspecific words such as “targeted therapy”. Unspecific_Therapy: Terms that indicate a known cancer therapy but that is not specific to any other therapy entity (e.g. “chemoradiotherapy” or “adjuvant therapy”). test_type before fail_count after fail_count before pass_count after pass_count minimum pass_rate before pass_rate after pass_rate add_ocr_typo 725 279 617 1063 70% 46% 79% add_typo 248 152 1066 1169 70% 81% 88% lowercase 214 152 1152 1214 70% 84% 89% strip_all_punctuation 223 228 1128 1123 70% 83% 83% strip_punctuation 50 37 1270 1283 70% 96% 97% titlecase 764 288 603 1079 70% 44% 79% uppercase 1320 233 48 1135 70% 4% 83% weighted average 2571 938 4201 5834 70% 62.03% 86.15% Predicted Entities Cancer_Surgery, Chemotherapy, Cycle_Count, Cycle_Day, Cycle_Number, Dosage, Duration, Frequency, Hormonal_Therapy, Immunotherapy, Line_Of_Therapy, Radiotherapy, Radiation_Dose, Response_To_Treatment, Route, Targeted_Therapy, Unspecific_Therapy Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_oncology_therapy_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverter() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;) pipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter]) data = spark.createDataFrame([[&quot;The had previously undergone a left mastectomy and an axillary lymph node dissection for a left breast cancer twenty years ago. The tumor was positive for ER and PR. Postoperatively, radiotherapy was administered to her breast. The cancer recurred as a right lung metastasis 13 years later. The patient underwent a regimen consisting of adriamycin (60 mg/m2) and cyclophosphamide (600 mg/m2) over six courses, as first line therapy.&quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_oncology_therapy_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverter() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter)) val data = Seq(&quot;The had previously undergone a left mastectomy and an axillary lymph node dissection for a left breast cancer twenty years ago. The tumor was positive for ER and PR. Postoperatively, radiotherapy was administered to her breast. The cancer recurred as a right lung metastasis 13 years later. The patient underwent a regimen consisting of adriamycin (60 mg/m2) and cyclophosphamide (600 mg/m2) over six courses, as first line therapy.&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +------------------------------+---------------------+ |chunk |ner_label | +------------------------------+---------------------+ |mastectomy |Cancer_Surgery | |axillary lymph node dissection|Cancer_Surgery | |PR |Response_To_Treatment| |radiotherapy |Radiotherapy | |recurred |Response_To_Treatment| |adriamycin |Chemotherapy | |60 mg/m2 |Chemotherapy | |cyclophosphamide |Chemotherapy | |600 mg/m2 |Chemotherapy | |six courses |Cycle_Count | |first line |Line_Of_Therapy | +------------------------------+---------------------+ Model Information Model Name: ner_oncology_therapy_langtest Compatibility: Healthcare NLP 5.1.0+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 14.7 MB References In-house annotated oncology case reports. Benchmarking label precision recall f1-score support Cancer_Surgery 0.85 0.85 0.85 490 Chemotherapy 0.92 0.93 0.92 637 Cycle_Count 0.78 0.85 0.82 128 Cycle_Day 0.66 0.71 0.68 68 Cycle_Number 0.75 0.58 0.65 52 Dosage 0.91 0.91 0.91 311 Duration 0.80 0.74 0.77 221 Frequency 0.86 0.89 0.88 162 Hormonal_Therapy 0.91 0.90 0.91 92 Immunotherapy 0.82 0.79 0.81 63 Line_Of_Therapy 0.78 0.78 0.78 46 Radiation_Dose 0.88 0.88 0.88 48 Radiotherapy 0.83 0.88 0.85 154 Response_To_Treatment 0.71 0.68 0.69 377 Route 0.94 0.85 0.89 92 Targeted_Therapy 0.90 0.89 0.89 166 Unspecific_Therapy 0.74 0.79 0.77 150 micro-avg 0.84 0.84 0.84 3257 macro-avg 0.83 0.82 0.82 3257 weighted-avg 0.84 0.84 0.84 3257</summary></entry><entry><title type="html">Extract Entities Related to TNM Staging (LangTest)</title><link href="/2023/09/22/ner_oncology_tnm_langtest_en.html" rel="alternate" type="text/html" title="Extract Entities Related to TNM Staging (LangTest)" /><published>2023-09-22T00:00:00+00:00</published><updated>2023-09-22T00:00:00+00:00</updated><id>/2023/09/22/ner_oncology_tnm_langtest_en</id><content type="html" xml:base="/2023/09/22/ner_oncology_tnm_langtest_en.html">## Description

This model extracts staging information and mentions related to tumors, lymph nodes, and metastases. It is the version of [ner_oncology_tnm](https://nlp.johnsnowlabs.com/2022/11/24/ner_oncology_tnm_en.html) model augmented with `langtest` library.

Definitions of Predicted Entities:

- `Cancer_Dx`: Mentions of cancer diagnoses (such as &quot;breast cancer&quot;) or pathological types that are usually used as synonyms for &quot;cancer&quot; (e.g. &quot;carcinoma&quot;). When anatomical references are present, they are included in the Cancer_Dx extraction.
- `Lymph_Node`: Mentions of lymph nodes and pathological findings of the lymph nodes.
- `Lymph_Node_Modifier`: Words that refer to a lymph node being abnormal (such as &quot;enlargement&quot;).
- `Metastasis`: Terms that indicate a metastatic disease. Anatomical references are not included in these extractions.
- `Staging`: Mentions of cancer stage such as &quot;stage 2b&quot; or &quot;T2N1M0&quot;. It also includes words such as &quot;in situ&quot;, &quot;early-stage&quot; or &quot;advanced&quot;.
- `Tumor`: All nonspecific terms that may be related to tumors, either malignant or benign (for example: &quot;mass&quot;, &quot;tumor&quot;, &quot;lesion&quot;, or &quot;neoplasm&quot;).
- `Tumor_Description`: Information related to tumor characteristics, such as size, presence of invasion, grade, and hystological type.


| **test_type**        | **before fail_count** | **after fail_count** | **before pass_count** | **after pass_count** | **minimum pass_rate** | **before pass_rate** | **after pass_rate** |
|----------------------|-----------------------|----------------------|-----------------------|----------------------|-----------------------|----------------------|---------------------|
| **add_typo**         | 249                   | 209                  | 4089                  | 4146                 | 70%                   | 94%                  | 95%                 |
| **lowercase**        | 273                   | 238                  | 4243                  | 4278                 | 70%                   | 94%                  | 95%                 |
| **swap_entities**    | 362                   | 342                  | 1192                  | 1211                 | 70%                   | 77%                  | 78%                 |
| **titlecase**        | 985                   | 712                  | 3517                  | 3790                 | 70%                   | 78%                  | 84%                 |
| **uppercase**        | 1779                  | 378                  | 2736                  | 4137                 | 70%                   | 61%                  | 92%                 |
| **weighted average** | **3648**              | **1879**             | **15777**             | **17562**            | **70%**               | **81.22%**           | **90.33%**          |

## Predicted Entities

`Cancer_Dx`, `Lymph_Node`, `Lymph_Node_Modifier`, `Metastasis`, `Staging`, `Tumor`, `Tumor_Description`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_oncology_tnm_langtest_en_5.1.0_3.0_1695387402214.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_oncology_tnm_langtest_en_5.1.0_3.0_1695387402214.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)                

ner = MedicalNerModel.pretrained(&quot;ner_oncology_tnm_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverter() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \
    .setOutputCol(&quot;ner_chunk&quot;)

pipeline = Pipeline(stages=[document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter])

data = spark.createDataFrame([[&quot;Chest computed tomography (CT) showed pulmonary lesions in the posterior segment of the right upper lobe, and peripheral lung cancer with multiple pulmonary metastases. Multiple metastases of the thoracic vertebrae, sternum, and ribs were considered, which were similar to previous CT images.&quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
    
val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)
    
val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)                
    
val ner = MedicalNerModel.pretrained(&quot;ner_oncology_tnm_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)
    
val ner_converter = new NerConverter()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

        
val pipeline = new Pipeline().setStages(Array(document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter))    

val data = Seq(&quot;Chest computed tomography (CT) showed pulmonary lesions in the posterior segment of the right upper lobe, and peripheral lung cancer with multiple pulmonary metastases. Multiple metastases of the thoracic vertebrae, sternum, and ribs were considered, which were similar to previous CT images.&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+----------------------+----------+
|chunk                 |ner_label |
+----------------------+----------+
|lesions               |Tumor     |
|peripheral lung cancer|Cancer_Dx |
|metastases            |Metastasis|
|metastases            |Metastasis|
+----------------------+----------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_oncology_tnm_langtest|
|Compatibility:|Healthcare NLP 5.1.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|14.8 MB|

## References

In-house annotated oncology case reports.

## Benchmarking

```bash
label                precision  recall  f1-score  support 
Cancer_Dx            0.88       0.86    0.87      721     
Lymph_Node           0.78       0.77    0.77      271     
Lymph_Node_Modifier  0.79       0.76    0.77      45      
Metastasis           0.92       0.92    0.92      321     
Staging              0.88       0.80    0.84      123     
Tumor                0.90       0.86    0.88      1018    
Tumor_Description    0.70       0.68    0.69      1060    
micro-avg            0.83       0.80    0.81      3559    
macro-avg            0.84       0.81    0.82      3559    
weighted-avg         0.83       0.80    0.81      3559    
```</content><author><name>John Snow Labs</name></author><category term="en" /><category term="ner" /><category term="clinical" /><category term="licensed" /><category term="oncology" /><category term="tnm" /><category term="langtest" /><summary type="html">Description This model extracts staging information and mentions related to tumors, lymph nodes, and metastases. It is the version of ner_oncology_tnm model augmented with langtest library. Definitions of Predicted Entities: Cancer_Dx: Mentions of cancer diagnoses (such as “breast cancer”) or pathological types that are usually used as synonyms for “cancer” (e.g. “carcinoma”). When anatomical references are present, they are included in the Cancer_Dx extraction. Lymph_Node: Mentions of lymph nodes and pathological findings of the lymph nodes. Lymph_Node_Modifier: Words that refer to a lymph node being abnormal (such as “enlargement”). Metastasis: Terms that indicate a metastatic disease. Anatomical references are not included in these extractions. Staging: Mentions of cancer stage such as “stage 2b” or “T2N1M0”. It also includes words such as “in situ”, “early-stage” or “advanced”. Tumor: All nonspecific terms that may be related to tumors, either malignant or benign (for example: “mass”, “tumor”, “lesion”, or “neoplasm”). Tumor_Description: Information related to tumor characteristics, such as size, presence of invasion, grade, and hystological type. test_type before fail_count after fail_count before pass_count after pass_count minimum pass_rate before pass_rate after pass_rate add_typo 249 209 4089 4146 70% 94% 95% lowercase 273 238 4243 4278 70% 94% 95% swap_entities 362 342 1192 1211 70% 77% 78% titlecase 985 712 3517 3790 70% 78% 84% uppercase 1779 378 2736 4137 70% 61% 92% weighted average 3648 1879 15777 17562 70% 81.22% 90.33% Predicted Entities Cancer_Dx, Lymph_Node, Lymph_Node_Modifier, Metastasis, Staging, Tumor, Tumor_Description Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_oncology_tnm_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverter() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;) pipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter]) data = spark.createDataFrame([[&quot;Chest computed tomography (CT) showed pulmonary lesions in the posterior segment of the right upper lobe, and peripheral lung cancer with multiple pulmonary metastases. Multiple metastases of the thoracic vertebrae, sternum, and ribs were considered, which were similar to previous CT images.&quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_oncology_tnm_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverter() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter)) val data = Seq(&quot;Chest computed tomography (CT) showed pulmonary lesions in the posterior segment of the right upper lobe, and peripheral lung cancer with multiple pulmonary metastases. Multiple metastases of the thoracic vertebrae, sternum, and ribs were considered, which were similar to previous CT images.&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +----------------------+----------+ |chunk |ner_label | +----------------------+----------+ |lesions |Tumor | |peripheral lung cancer|Cancer_Dx | |metastases |Metastasis| |metastases |Metastasis| +----------------------+----------+ Model Information Model Name: ner_oncology_tnm_langtest Compatibility: Healthcare NLP 5.1.0+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 14.8 MB References In-house annotated oncology case reports. Benchmarking label precision recall f1-score support Cancer_Dx 0.88 0.86 0.87 721 Lymph_Node 0.78 0.77 0.77 271 Lymph_Node_Modifier 0.79 0.76 0.77 45 Metastasis 0.92 0.92 0.92 321 Staging 0.88 0.80 0.84 123 Tumor 0.90 0.86 0.88 1018 Tumor_Description 0.70 0.68 0.69 1060 micro-avg 0.83 0.80 0.81 3559 macro-avg 0.84 0.81 0.82 3559 weighted-avg 0.83 0.80 0.81 3559</summary></entry></feed>