<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-10-05T16:37:55+00:00</updated><id>/feed.xml</id><title type="html">Spark NLP</title><subtitle>High Performance NLP with Apache Spark
</subtitle><author><name>{&quot;type&quot;=&gt;nil, &quot;name&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;avatar&quot;=&gt;nil, &quot;bio&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;facebook&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;weibo&quot;=&gt;nil, &quot;googleplus&quot;=&gt;nil, &quot;telegram&quot;=&gt;nil, &quot;medium&quot;=&gt;nil, &quot;zhihu&quot;=&gt;nil, &quot;douban&quot;=&gt;nil, &quot;linkedin&quot;=&gt;nil, &quot;github&quot;=&gt;nil, &quot;npm&quot;=&gt;nil}</name></author><entry><title type="html">Detect Clinical Conditions (LangTest - ner_eu_clinical_condition)</title><link href="/2023/09/22/ner_eu_clinical_condition_langtest_en.html" rel="alternate" type="text/html" title="Detect Clinical Conditions (LangTest - ner_eu_clinical_condition)" /><published>2023-09-22T00:00:00+00:00</published><updated>2023-09-22T00:00:00+00:00</updated><id>/2023/09/22/ner_eu_clinical_condition_langtest_en</id><content type="html" xml:base="/2023/09/22/ner_eu_clinical_condition_langtest_en.html">## Description

Pretrained named entity recognition (NER) deep learning model for clinical conditions. The SparkNLP deep learning model (MedicalNerModel) is inspired by a former state-of-the-art model for NER: Chiu &amp; Nichols, Named Entity Recognition with Bidirectional LSTM-CNN. The model is the version of [ner_eu_clinical_condition](https://nlp.johnsnowlabs.com/2023/02/06/ner_eu_clinical_condition_en.html) model augmented with `langtest` library.

| **test_type**             | **before fail_count** | **after fail_count** | **before pass_count** | **after pass_count** | **minimum pass_rate** | **before pass_rate** | **after pass_rate** |
|---------------------------|-----------------------|----------------------|-----------------------|----------------------|-----------------------|----------------------|---------------------|
| **add_abbreviation**      | 25                    | 31                   | 348                   | 486                  | 80%                   | 93%                  | 94%                 |
| **add_ocr_typo**          | 61                    | 66                   | 360                   | 501                  | 80%                   | 86%                  | 88%                 |
| **add_typo**              | 41                    | 41                   | 383                   | 528                  | 80%                   | 90%                  | 93%                 |
| **lowercase**             | 6                     | 5                    | 435                   | 583                  | 80%                   | 99%                  | 99%                 |
| **number_to_word**        | 4                     | 7                    | 131                   | 161                  | 80%                   | 97%                  | 96%                 |
| **strip_all_punctuation** | 22                    | 23                   | 421                   | 565                  | 80%                   | 95%                  | 96%                 |
| **strip_punctuation**     | 6                     | 5                    | 437                   | 582                  | 80%                   | 99%                  | 99%                 |
| **swap_entities**         | 60                    | 43                   | 138                   | 225                  | 80%                   | 70%                  | 84%                 |
| **titlecase**             | 106                   | 93                   | 337                   | 493                  | 80%                   | 76%                  | 84%                 |
| **uppercase**             | 193                   | 104                  | 250                   | 484                  | 80%                   | 56%                  | 82%                 |
| **weighted average**      | **524**               | **418**              | **3240**              | **4608**             | **80%**               | **86.08%**           | **91.68%**          |

## Predicted Entities

`clinical_condition`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_eu_clinical_condition_langtest_en_5.1.0_3.0_1695396170806.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_eu_clinical_condition_langtest_en_5.1.0_3.0_1695396170806.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
	
```python
document_assembler = DocumentAssembler()\
	.setInputCol(&quot;text&quot;)\
	.setOutputCol(&quot;document&quot;)
 
sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer()\
	.setInputCols([&quot;sentence&quot;])\
	.setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
	.setInputCols([&quot;sentence&quot;, &quot;token&quot;])\
	.setOutputCol(&quot;embeddings&quot;)

ner = MedicalNerModel.pretrained('ner_eu_clinical_condition_langtest', &quot;en&quot;, &quot;clinical/models&quot;) \
	.setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
	.setOutputCol(&quot;ner&quot;)
 
ner_converter = NerConverterInternal()\
	.setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\
	.setOutputCol(&quot;ner_chunk&quot;)

pipeline = Pipeline(stages=[
	document_assembler,
	sentence_detector,
	tokenizer,
	word_embeddings,
	ner,
	ner_converter])

data = spark.createDataFrame([[&quot;&quot;&quot;Hyperparathyroidism was considered upon the fourth occasion. The history of weakness and generalized joint pains were present. He also had history of epigastric pain diagnosed informally as gastritis. He had previously had open reduction and internal fixation for the initial two fractures under general anesthesia. He sustained mandibular fracture.&quot;&quot;&quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val documenter = new DocumentAssembler() 
    .setInputCol(&quot;text&quot;) 
    .setOutputCol(&quot;document&quot;)

val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)

val tokenizer = new Tokenizer()
  .setInputCols(&quot;sentence&quot;)
  .setOutputCol(&quot;token&quot;)

val word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
	.setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
	.setOutputCol(&quot;embeddings&quot;)

val ner_model = MedicalNerModel.pretrained(&quot;ner_eu_clinical_condition_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)

val ner_converter = new NerConverterInternal()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

val pipeline = new Pipeline().setStages(Array(documenter, sentence_detector, tokenizer, word_embeddings, ner_model, ner_converter))

val data = Seq(Array(&quot;&quot;&quot;Hyperparathyroidism was considered upon the fourth occasion. The history of weakness and generalized joint pains were present. He also had history of epigastric pain diagnosed informally as gastritis. He had previously had open reduction and internal fixation for the initial two fractures under general anesthesia. He sustained mandibular fracture.&quot;&quot;&quot;)).toDS().toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+-------------------+------------------+
|chunk              |ner_label         |
+-------------------+------------------+
|Hyperparathyroidism|clinical_condition|
|weakness           |clinical_condition|
|joint pains        |clinical_condition|
|epigastric pain    |clinical_condition|
|gastritis          |clinical_condition|
|fractures          |clinical_condition|
|anesthesia         |clinical_condition|
|mandibular fracture|clinical_condition|
+-------------------+------------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_eu_clinical_condition_langtest|
|Compatibility:|Healthcare NLP 5.1.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|14.6 MB|

## References

The corpus used for model training is provided by European Clinical Case Corpus (E3C), a project aimed at offering a freely available multilingual corpus of semantically annotated clinical narratives.

## Benchmarking

```bash
label               precision  recall  f1-score  support 
clinical_condition  0.95       0.95    0.95      432     
micro-avg           0.95       0.95    0.95      432     
macro-avg           0.95       0.95    0.95      432     
weighted-avg        0.95       0.95    0.95      432      
```</content><author><name>John Snow Labs</name></author><category term="en" /><category term="ner" /><category term="licensed" /><category term="clinical" /><category term="condition" /><category term="langtest" /><summary type="html">Description Pretrained named entity recognition (NER) deep learning model for clinical conditions. The SparkNLP deep learning model (MedicalNerModel) is inspired by a former state-of-the-art model for NER: Chiu &amp;amp; Nichols, Named Entity Recognition with Bidirectional LSTM-CNN. The model is the version of ner_eu_clinical_condition model augmented with langtest library. test_type before fail_count after fail_count before pass_count after pass_count minimum pass_rate before pass_rate after pass_rate add_abbreviation 25 31 348 486 80% 93% 94% add_ocr_typo 61 66 360 501 80% 86% 88% add_typo 41 41 383 528 80% 90% 93% lowercase 6 5 435 583 80% 99% 99% number_to_word 4 7 131 161 80% 97% 96% strip_all_punctuation 22 23 421 565 80% 95% 96% strip_punctuation 6 5 437 582 80% 99% 99% swap_entities 60 43 138 225 80% 70% 84% titlecase 106 93 337 493 80% 76% 84% uppercase 193 104 250 484 80% 56% 82% weighted average 524 418 3240 4608 80% 86.08% 91.68% Predicted Entities clinical_condition Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer()\ .setInputCols([&quot;sentence&quot;])\ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;])\ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained('ner_eu_clinical_condition_langtest', &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverterInternal()\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;])\ .setOutputCol(&quot;ner_chunk&quot;) pipeline = Pipeline(stages=[ document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter]) data = spark.createDataFrame([[&quot;&quot;&quot;Hyperparathyroidism was considered upon the fourth occasion. The history of weakness and generalized joint pains were present. He also had history of epigastric pain diagnosed informally as gastritis. He had previously had open reduction and internal fixation for the initial two fractures under general anesthesia. He sustained mandibular fracture.&quot;&quot;&quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val documenter = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel.pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner_model = MedicalNerModel.pretrained(&quot;ner_eu_clinical_condition_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pipeline = new Pipeline().setStages(Array(documenter, sentence_detector, tokenizer, word_embeddings, ner_model, ner_converter)) val data = Seq(Array(&quot;&quot;&quot;Hyperparathyroidism was considered upon the fourth occasion. The history of weakness and generalized joint pains were present. He also had history of epigastric pain diagnosed informally as gastritis. He had previously had open reduction and internal fixation for the initial two fractures under general anesthesia. He sustained mandibular fracture.&quot;&quot;&quot;)).toDS().toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +-------------------+------------------+ |chunk |ner_label | +-------------------+------------------+ |Hyperparathyroidism|clinical_condition| |weakness |clinical_condition| |joint pains |clinical_condition| |epigastric pain |clinical_condition| |gastritis |clinical_condition| |fractures |clinical_condition| |anesthesia |clinical_condition| |mandibular fracture|clinical_condition| +-------------------+------------------+ Model Information Model Name: ner_eu_clinical_condition_langtest Compatibility: Healthcare NLP 5.1.0+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 14.6 MB References The corpus used for model training is provided by European Clinical Case Corpus (E3C), a project aimed at offering a freely available multilingual corpus of semantically annotated clinical narratives. Benchmarking label precision recall f1-score support clinical_condition 0.95 0.95 0.95 432 micro-avg 0.95 0.95 0.95 432 macro-avg 0.95 0.95 0.95 432 weighted-avg 0.95 0.95 0.95 432</summary></entry><entry><title type="html">Extract Biomarkers and their Results (LangTest)</title><link href="/2023/09/22/ner_oncology_biomarker_langtest_en.html" rel="alternate" type="text/html" title="Extract Biomarkers and their Results (LangTest)" /><published>2023-09-22T00:00:00+00:00</published><updated>2023-09-22T00:00:00+00:00</updated><id>/2023/09/22/ner_oncology_biomarker_langtest_en</id><content type="html" xml:base="/2023/09/22/ner_oncology_biomarker_langtest_en.html">## Description

This model extracts mentions of biomarkers and biomarker results from oncology texts. It is the version of [ner_oncology_biomarker](https://nlp.johnsnowlabs.com/2022/11/24/ner_oncology_biomarker_en.html) model augmented with `langtest` library.

Definitions of Predicted Entities:

- `Biomarker`: Biological molecules that indicate the presence or absence of cancer, or the type of cancer (including oncogenes).
- `Biomarker_Result`: Terms or values that are identified as the result of biomarkers.

| **test_type**             | **before fail_count** | **after fail_count** | **before pass_count** | **after pass_count** | **minimum pass_rate** | **before pass_rate** | **after pass_rate** |
|---------------------------|-----------------------|----------------------|-----------------------|----------------------|-----------------------|----------------------|---------------------|
| **add_abbreviation**      | 87                    | 75                   | 1879                  | 1891                 | 92%                   | 96%                  | 96%                 |
| **add_ocr_typo**          | 144                   | 125                  | 2037                  | 2056                 | 92%                   | 93%                  | 94%                 |
| **add_punctuation**       | 1                     | 0                    | 97                    | 98                   | 92%                   | 99%                  | 100%                |
| **add_typo**              | 52                    | 40                   | 2128                  | 2149                 | 92%                   | 98%                  | 98%                 |
| **number_to_word**        | 114                   | 82                   | 867                   | 899                  | 92%                   | 88%                  | 92%                 |
| **strip_all_punctuation** | 97                    | 86                   | 2149                  | 2160                 | 92%                   | 96%                  | 96%                 |
| **titlecase**             | 168                   | 164                  | 2092                  | 2096                 | 92%                   | 93%                  | 93%                 |
| **uppercase**             | 217                   | 97                   | 2049                  | 2169                 | 92%                   | 90%                  | 96%                 |
| **weighted average**      | **880**               | **669**              | **13298**             | **13518**            | **92%**               | **93.79%**           | **95.28%**          |

## Predicted Entities

`Biomarker`, `Biomarker_Result`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_oncology_biomarker_langtest_en_5.1.0_3.0_1695395379174.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_oncology_biomarker_langtest_en_5.1.0_3.0_1695395379174.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)                

ner = MedicalNerModel.pretrained(&quot;ner_oncology_biomarker_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverter() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \
    .setOutputCol(&quot;ner_chunk&quot;)

pipeline = Pipeline(stages=[document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter])

data = spark.createDataFrame([[&quot;The results of immunohistochemical examination showed that she tested negative for CK7, synaptophysin (Syn), chromogranin A (CgA), Muc5AC, human epidermal growth factor receptor-2 (HER2), and Muc6; positive for CK20, Muc1, Muc2, E-cadherin, and p53; the Ki-67 index was about 87% .&quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
    
val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)
    
val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)                
    
val ner = MedicalNerModel.pretrained(&quot;ner_oncology_biomarker_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)
    
val ner_converter = new NerConverter()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

        
val pipeline = new Pipeline().setStages(Array(document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter))    

val data = Seq(&quot;The results of immunohistochemical examination showed that she tested negative for CK7, synaptophysin (Syn), chromogranin A (CgA), Muc5AC, human epidermal growth factor receptor-2 (HER2), and Muc6; positive for CK20, Muc1, Muc2, E-cadherin, and p53; the Ki-67 index was about 87% .&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+----------------------------------------+----------------+
|chunk                                   |ner_label       |
+----------------------------------------+----------------+
|negative                                |Biomarker_Result|
|CK7                                     |Biomarker       |
|synaptophysin                           |Biomarker       |
|Syn                                     |Biomarker       |
|chromogranin A                          |Biomarker       |
|CgA                                     |Biomarker       |
|Muc5AC                                  |Biomarker_Result|
|human epidermal growth factor receptor-2|Biomarker       |
|HER2                                    |Biomarker       |
|Muc6                                    |Biomarker       |
|positive                                |Biomarker_Result|
|CK20                                    |Biomarker       |
|Muc1                                    |Biomarker       |
|Muc2                                    |Biomarker       |
|E-cadherin                              |Biomarker       |
|p53                                     |Biomarker       |
|Ki-67 index                             |Biomarker       |
+----------------------------------------+----------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_oncology_biomarker_langtest|
|Compatibility:|Healthcare NLP 5.1.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|14.8 MB|

## References

In-house annotated oncology case reports.

## Benchmarking

```bash
label             precision  recall  f1-score  support 
Biomarker         0.86       0.85    0.85      615     
Biomarker_Result  0.79       0.72    0.75      346     
micro-avg         0.84       0.80    0.82      961     
macro-avg         0.82       0.78    0.80      961     
weighted-avg      0.83       0.80    0.82      961   
```</content><author><name>John Snow Labs</name></author><category term="en" /><category term="ner" /><category term="clinical" /><category term="licensed" /><category term="oncology" /><category term="biomarker" /><category term="langtest" /><summary type="html">Description This model extracts mentions of biomarkers and biomarker results from oncology texts. It is the version of ner_oncology_biomarker model augmented with langtest library. Definitions of Predicted Entities: Biomarker: Biological molecules that indicate the presence or absence of cancer, or the type of cancer (including oncogenes). Biomarker_Result: Terms or values that are identified as the result of biomarkers. test_type before fail_count after fail_count before pass_count after pass_count minimum pass_rate before pass_rate after pass_rate add_abbreviation 87 75 1879 1891 92% 96% 96% add_ocr_typo 144 125 2037 2056 92% 93% 94% add_punctuation 1 0 97 98 92% 99% 100% add_typo 52 40 2128 2149 92% 98% 98% number_to_word 114 82 867 899 92% 88% 92% strip_all_punctuation 97 86 2149 2160 92% 96% 96% titlecase 168 164 2092 2096 92% 93% 93% uppercase 217 97 2049 2169 92% 90% 96% weighted average 880 669 13298 13518 92% 93.79% 95.28% Predicted Entities Biomarker, Biomarker_Result Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_oncology_biomarker_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverter() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;) pipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter]) data = spark.createDataFrame([[&quot;The results of immunohistochemical examination showed that she tested negative for CK7, synaptophysin (Syn), chromogranin A (CgA), Muc5AC, human epidermal growth factor receptor-2 (HER2), and Muc6; positive for CK20, Muc1, Muc2, E-cadherin, and p53; the Ki-67 index was about 87% .&quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_oncology_biomarker_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverter() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter)) val data = Seq(&quot;The results of immunohistochemical examination showed that she tested negative for CK7, synaptophysin (Syn), chromogranin A (CgA), Muc5AC, human epidermal growth factor receptor-2 (HER2), and Muc6; positive for CK20, Muc1, Muc2, E-cadherin, and p53; the Ki-67 index was about 87% .&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +----------------------------------------+----------------+ |chunk |ner_label | +----------------------------------------+----------------+ |negative |Biomarker_Result| |CK7 |Biomarker | |synaptophysin |Biomarker | |Syn |Biomarker | |chromogranin A |Biomarker | |CgA |Biomarker | |Muc5AC |Biomarker_Result| |human epidermal growth factor receptor-2|Biomarker | |HER2 |Biomarker | |Muc6 |Biomarker | |positive |Biomarker_Result| |CK20 |Biomarker | |Muc1 |Biomarker | |Muc2 |Biomarker | |E-cadherin |Biomarker | |p53 |Biomarker | |Ki-67 index |Biomarker | +----------------------------------------+----------------+ Model Information Model Name: ner_oncology_biomarker_langtest Compatibility: Healthcare NLP 5.1.0+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 14.8 MB References In-house annotated oncology case reports. Benchmarking label precision recall f1-score support Biomarker 0.86 0.85 0.85 615 Biomarker_Result 0.79 0.72 0.75 346 micro-avg 0.84 0.80 0.82 961 macro-avg 0.82 0.78 0.80 961 weighted-avg 0.83 0.80 0.82 961</summary></entry><entry><title type="html">Detect Entities Related to Cancer Diagnosis (LangTest)</title><link href="/2023/09/22/ner_oncology_diagnosis_langtest_en.html" rel="alternate" type="text/html" title="Detect Entities Related to Cancer Diagnosis (LangTest)" /><published>2023-09-22T00:00:00+00:00</published><updated>2023-09-22T00:00:00+00:00</updated><id>/2023/09/22/ner_oncology_diagnosis_langtest_en</id><content type="html" xml:base="/2023/09/22/ner_oncology_diagnosis_langtest_en.html">## Description

This model extracts entities related to cancer diagnosis, such as Metastasis, Histological_Type, or Invasion. It is the version of [ner_oncology_diagnosis](https://nlp.johnsnowlabs.com/2022/11/24/ner_oncology_diagnosis_en.html) model augmented with `langtest` library.

Definitions of Predicted Entities:

- `Adenopathy`: Mentions of pathological findings of the lymph nodes.
- `Cancer_Dx`: Mentions of cancer diagnoses (such as &quot;breast cancer&quot;) or pathological types that are usually used as synonyms for &quot;cancer&quot; (e.g. &quot;carcinoma&quot;). When anatomical references are present, they are included in the Cancer_Dx extraction.
- `Cancer_Score`: Clinical or imaging scores that are specific for cancer settings (e.g. &quot;BI-RADS&quot; or &quot;Allred score&quot;).
- `Grade`: All pathological grading of tumors (e.g. &quot;grade 1&quot;) or degrees of cellular differentiation (e.g. &quot;well-differentiated&quot;)
- `Histological_Type`: Histological variants or cancer subtypes, such as &quot;papillary&quot;, &quot;clear cell&quot; or &quot;medullary&quot;. 
- `Invasion`: Mentions that refer to tumor invasion, such as &quot;invasion&quot; or &quot;involvement&quot;. Metastases or lymph node involvement are excluded from this category.
- `Metastasis`: Terms that indicate a metastatic disease. Anatomical references are not included in these extractions.
- `Pathology_Result`: The findings of a biopsy from the pathology report that is not covered by another entity (e.g. &quot;malignant ductal cells&quot;).
- `Performance_Status`: Mentions of performance status scores, such as ECOG and Karnofsky. The name of the score is extracted together with the result (e.g. &quot;ECOG performance status of 4&quot;).
- `Staging`: Mentions of cancer stage such as &quot;stage 2b&quot; or &quot;T2N1M0&quot;. It also includes words such as &quot;in situ&quot;, &quot;early-stage&quot; or &quot;advanced&quot;.
- `Tumor_Finding`: All nonspecific terms that may be related to tumors, either malignant or benign (for example: &quot;mass&quot;, &quot;tumor&quot;, &quot;lesion&quot;, or &quot;neoplasm&quot;).
- `Tumor_Size`: Size of the tumor, including numerical value and unit of measurement (e.g. &quot;3 cm&quot;).

| **test_type**        | **before fail_count** | **after fail_count** | **before pass_count** | **after pass_count** | **minimum pass_rate** | **before pass_rate** | **after pass_rate** |
|----------------------|-----------------------|----------------------|-----------------------|----------------------|-----------------------|----------------------|---------------------|
| **add_punctuation**  | 4                     | 3                    | 183                   | 184                  | 60%                   | 98%                  | 98%                 |
| **swap_entities**    | 272                   | 276                  | 1241                  | 1252                 | 60%                   | 82%                  | 82%                 |
| **titlecase**        | 910                   | 834                  | 3592                  | 3668                 | 80%                   | 80%                  | 81%                 |
| **uppercase**        | 1768                  | 606                  | 2747                  | 3909                 | 80%                   | 61%                  | 87%                 |
| **weighted average** | **2954**              | **1719**             | **7763**              | **9013**             | **70%**               | **72.44%**           | **83.98%**          |

## Predicted Entities

`Adenopathy`, `Cancer_Dx`, `Cancer_Score`, `Grade`, `Histological_Type`, `Invasion`, `Metastasis`, `Pathology_Result`, `Performance_Status`, `Staging`, `Tumor_Finding`, `Tumor_Size`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_oncology_diagnosis_langtest_en_5.1.0_3.0_1695393811887.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_oncology_diagnosis_langtest_en_5.1.0_3.0_1695393811887.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)                

ner = MedicalNerModel.pretrained(&quot;ner_oncology_diagnosis_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverter() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \
    .setOutputCol(&quot;ner_chunk&quot;)

pipeline = Pipeline(stages=[document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter])

data = spark.createDataFrame([[&quot;Two years ago, the patient presented with a tumor in her left breast and adenopathies. She was diagnosed with invasive ductal carcinoma. Last week she was also found to have a lung metastasis.&quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
    
val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)
    
val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)                
    
val ner = MedicalNerModel.pretrained(&quot;ner_oncology_diagnosis_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)
    
val ner_converter = new NerConverter()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

        
val pipeline = new Pipeline().setStages(Array(document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter))    

val data = Seq(&quot;Two years ago, the patient presented with a tumor in her left breast and adenopathies. She was diagnosed with invasive ductal carcinoma. Last week she was also found to have a lung metastasis.&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+------------+-----------------+
|chunk       |ner_label        |
+------------+-----------------+
|tumor       |Tumor_Finding    |
|adenopathies|Adenopathy       |
|invasive    |Histological_Type|
|ductal      |Histological_Type|
|carcinoma   |Cancer_Dx        |
|metastasis  |Metastasis       |
+------------+-----------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_oncology_diagnosis_langtest|
|Compatibility:|Healthcare NLP 5.1.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|14.8 MB|

## References

In-house annotated oncology case reports.

## Benchmarking

```bash
label               precision  recall  f1-score  support 
Adenopathy          0.65       0.82    0.73      34      
Cancer_Dx           0.85       0.95    0.90      721     
Cancer_Score        0.86       0.64    0.73      28      
Grade               0.57       0.73    0.64      82      
Histological_Type   0.73       0.87    0.79      242     
Invasion            0.79       0.94    0.86      172     
Metastasis          0.82       0.98    0.89      321     
Pathology_Result    0.44       0.70    0.54      348     
Performance_Status  0.33       0.94    0.49      31      
Staging             0.90       0.94    0.92      123     
Tumor_Finding       0.87       0.94    0.90      1018    
Tumor_Size          0.68       0.93    0.78      216     
micro-avg           0.75       0.91    0.82      3336    
macro-avg           0.71       0.87    0.77      3336    
weighted-avg        0.77       0.91    0.83      3336    
```</content><author><name>John Snow Labs</name></author><category term="en" /><category term="ner" /><category term="clinical" /><category term="licensed" /><category term="oncology" /><category term="diagnosis" /><category term="langtest" /><summary type="html">Description This model extracts entities related to cancer diagnosis, such as Metastasis, Histological_Type, or Invasion. It is the version of ner_oncology_diagnosis model augmented with langtest library. Definitions of Predicted Entities: Adenopathy: Mentions of pathological findings of the lymph nodes. Cancer_Dx: Mentions of cancer diagnoses (such as “breast cancer”) or pathological types that are usually used as synonyms for “cancer” (e.g. “carcinoma”). When anatomical references are present, they are included in the Cancer_Dx extraction. Cancer_Score: Clinical or imaging scores that are specific for cancer settings (e.g. “BI-RADS” or “Allred score”). Grade: All pathological grading of tumors (e.g. “grade 1”) or degrees of cellular differentiation (e.g. “well-differentiated”) Histological_Type: Histological variants or cancer subtypes, such as “papillary”, “clear cell” or “medullary”. Invasion: Mentions that refer to tumor invasion, such as “invasion” or “involvement”. Metastases or lymph node involvement are excluded from this category. Metastasis: Terms that indicate a metastatic disease. Anatomical references are not included in these extractions. Pathology_Result: The findings of a biopsy from the pathology report that is not covered by another entity (e.g. “malignant ductal cells”). Performance_Status: Mentions of performance status scores, such as ECOG and Karnofsky. The name of the score is extracted together with the result (e.g. “ECOG performance status of 4”). Staging: Mentions of cancer stage such as “stage 2b” or “T2N1M0”. It also includes words such as “in situ”, “early-stage” or “advanced”. Tumor_Finding: All nonspecific terms that may be related to tumors, either malignant or benign (for example: “mass”, “tumor”, “lesion”, or “neoplasm”). Tumor_Size: Size of the tumor, including numerical value and unit of measurement (e.g. “3 cm”). test_type before fail_count after fail_count before pass_count after pass_count minimum pass_rate before pass_rate after pass_rate add_punctuation 4 3 183 184 60% 98% 98% swap_entities 272 276 1241 1252 60% 82% 82% titlecase 910 834 3592 3668 80% 80% 81% uppercase 1768 606 2747 3909 80% 61% 87% weighted average 2954 1719 7763 9013 70% 72.44% 83.98% Predicted Entities Adenopathy, Cancer_Dx, Cancer_Score, Grade, Histological_Type, Invasion, Metastasis, Pathology_Result, Performance_Status, Staging, Tumor_Finding, Tumor_Size Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_oncology_diagnosis_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverter() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;) pipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter]) data = spark.createDataFrame([[&quot;Two years ago, the patient presented with a tumor in her left breast and adenopathies. She was diagnosed with invasive ductal carcinoma. Last week she was also found to have a lung metastasis.&quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_oncology_diagnosis_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverter() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter)) val data = Seq(&quot;Two years ago, the patient presented with a tumor in her left breast and adenopathies. She was diagnosed with invasive ductal carcinoma. Last week she was also found to have a lung metastasis.&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +------------+-----------------+ |chunk |ner_label | +------------+-----------------+ |tumor |Tumor_Finding | |adenopathies|Adenopathy | |invasive |Histological_Type| |ductal |Histological_Type| |carcinoma |Cancer_Dx | |metastasis |Metastasis | +------------+-----------------+ Model Information Model Name: ner_oncology_diagnosis_langtest Compatibility: Healthcare NLP 5.1.0+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 14.8 MB References In-house annotated oncology case reports. Benchmarking label precision recall f1-score support Adenopathy 0.65 0.82 0.73 34 Cancer_Dx 0.85 0.95 0.90 721 Cancer_Score 0.86 0.64 0.73 28 Grade 0.57 0.73 0.64 82 Histological_Type 0.73 0.87 0.79 242 Invasion 0.79 0.94 0.86 172 Metastasis 0.82 0.98 0.89 321 Pathology_Result 0.44 0.70 0.54 348 Performance_Status 0.33 0.94 0.49 31 Staging 0.90 0.94 0.92 123 Tumor_Finding 0.87 0.94 0.90 1018 Tumor_Size 0.68 0.93 0.78 216 micro-avg 0.75 0.91 0.82 3336 macro-avg 0.71 0.87 0.77 3336 weighted-avg 0.77 0.91 0.83 3336</summary></entry><entry><title type="html">Extract Oncology Tests (LangTest)</title><link href="/2023/09/22/ner_oncology_test_langtest_en.html" rel="alternate" type="text/html" title="Extract Oncology Tests (LangTest)" /><published>2023-09-22T00:00:00+00:00</published><updated>2023-09-22T00:00:00+00:00</updated><id>/2023/09/22/ner_oncology_test_langtest_en</id><content type="html" xml:base="/2023/09/22/ner_oncology_test_langtest_en.html">## Description

This model extracts mentions of tests from oncology texts, including pathology tests and imaging tests. It is the version of [ner_oncology_test](https://nlp.johnsnowlabs.com/2022/11/24/ner_oncology_test_en.html) model augmented with `langtest` library.

Definitions of Predicted Entities:

- `Biomarker`: Biological molecules that indicate the presence or absence of cancer, or the type of cancer. Oncogenes are excluded from this category.
- `Biomarker_Result`: Terms or values that are identified as the result of biomarkers.
- `Imaging_Test`: Imaging tests mentioned in texts, such as &quot;chest CT scan&quot;.
- `Oncogene`: Mentions of genes that are implicated in the etiology of cancer.
- `Pathology_Test`: Mentions of biopsies or tests that use tissue samples.

| **test_type**        | **before fail_count** | **after fail_count** | **before pass_count** | **after pass_count** | **minimum pass_rate** | **before pass_rate** | **after pass_rate** |
|----------------------|-----------------------|----------------------|-----------------------|----------------------|-----------------------|----------------------|---------------------|
| **add_ocr_typo**     | 235                   | 213                  | 1937                  | 1959                 | 80%                   | 89%                  | 90%                 |
| **add_typo**         | 101                   | 103                  | 2058                  | 2057                 | 80%                   | 95%                  | 95%                 |
| **number_to_word**   | 87                    | 82                   | 832                   | 837                  | 80%                   | 91%                  | 91%                 |
| **swap_entities**    | 149                   | 126                  | 492                   | 505                  | 80%                   | 77%                  | 80%                 |
| **titlecase**        | 488                   | 184                  | 1761                  | 2065                 | 80%                   | 78%                  | 92%                 |
| **uppercase**        | 645                   | 185                  | 1612                  | 2072                 | 80%                   | 71%                  | 92%                 |
| **weighted average** | **1470**              | **680**              | **6755**              | **7536**             | **80%**               | **82.13%**           | **91.72%**          |

## Predicted Entities

`Biomarker`, `Biomarker_Result`, `Imaging_Test`, `Oncogene`, `Pathology_Test`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_oncology_test_langtest_en_5.1.0_3.0_1695391226396.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_oncology_test_langtest_en_5.1.0_3.0_1695391226396.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)                

ner = MedicalNerModel.pretrained(&quot;ner_oncology_test_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverter() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \
    .setOutputCol(&quot;ner_chunk&quot;)

pipeline = Pipeline(stages=[document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter])

data = spark.createDataFrame([[&quot;A biopsy was conducted using an ultrasound guided thick needle. His chest computed tomography (CT scan) was negative.&quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
    
val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)
    
val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)                
    
val ner = MedicalNerModel.pretrained(&quot;ner_oncology_test_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)
    
val ner_converter = new NerConverter()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

        
val pipeline = new Pipeline().setStages(Array(document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter))    

val data = Seq(&quot;A biopsy was conducted using an ultrasound guided thick needle. His chest computed tomography (CT scan) was negative.&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+-------------------------+--------------+
|chunk                    |ner_label     |
+-------------------------+--------------+
|biopsy                   |Pathology_Test|
|ultrasound               |Imaging_Test  |
|chest computed tomography|Imaging_Test  |
|CT scan                  |Imaging_Test  |
+-------------------------+--------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_oncology_test_langtest|
|Compatibility:|Healthcare NLP 5.1.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|14.8 MB|

## References

In-house annotated oncology case reports.

## Benchmarking

```bash
label               precision  recall  f1-score  support 
B-Pathology_Test    0.78       0.80    0.79      254     
I-Pathology_Test    0.83       0.75    0.79      263     
B-Imaging_Test      0.85       0.89    0.87      414     
I-Imaging_Test      0.78       0.91    0.84      633     
B-Biomarker_Result  0.82       0.80    0.81      289     
I-Biomarker_Result  0.83       0.82    0.83      374     
B-Biomarker         0.83       0.81    0.82      374     
I-Biomarker         0.85       0.70    0.77      375     
B-Oncogene          0.79       0.86    0.82      100     
I-Oncogene          0.81       0.82    0.81      184     
micro-avg           0.82       0.82    0.82      3260    
macro-avg           0.82       0.81    0.81      3260    
weighted-avg        0.82       0.82    0.82      3260    
```</content><author><name>John Snow Labs</name></author><category term="en" /><category term="ner" /><category term="clinical" /><category term="licensed" /><category term="oncology" /><category term="test" /><category term="langtest" /><summary type="html">Description This model extracts mentions of tests from oncology texts, including pathology tests and imaging tests. It is the version of ner_oncology_test model augmented with langtest library. Definitions of Predicted Entities: Biomarker: Biological molecules that indicate the presence or absence of cancer, or the type of cancer. Oncogenes are excluded from this category. Biomarker_Result: Terms or values that are identified as the result of biomarkers. Imaging_Test: Imaging tests mentioned in texts, such as “chest CT scan”. Oncogene: Mentions of genes that are implicated in the etiology of cancer. Pathology_Test: Mentions of biopsies or tests that use tissue samples. test_type before fail_count after fail_count before pass_count after pass_count minimum pass_rate before pass_rate after pass_rate add_ocr_typo 235 213 1937 1959 80% 89% 90% add_typo 101 103 2058 2057 80% 95% 95% number_to_word 87 82 832 837 80% 91% 91% swap_entities 149 126 492 505 80% 77% 80% titlecase 488 184 1761 2065 80% 78% 92% uppercase 645 185 1612 2072 80% 71% 92% weighted average 1470 680 6755 7536 80% 82.13% 91.72% Predicted Entities Biomarker, Biomarker_Result, Imaging_Test, Oncogene, Pathology_Test Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_oncology_test_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverter() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;) pipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter]) data = spark.createDataFrame([[&quot;A biopsy was conducted using an ultrasound guided thick needle. His chest computed tomography (CT scan) was negative.&quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_oncology_test_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverter() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter)) val data = Seq(&quot;A biopsy was conducted using an ultrasound guided thick needle. His chest computed tomography (CT scan) was negative.&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +-------------------------+--------------+ |chunk |ner_label | +-------------------------+--------------+ |biopsy |Pathology_Test| |ultrasound |Imaging_Test | |chest computed tomography|Imaging_Test | |CT scan |Imaging_Test | +-------------------------+--------------+ Model Information Model Name: ner_oncology_test_langtest Compatibility: Healthcare NLP 5.1.0+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 14.8 MB References In-house annotated oncology case reports. Benchmarking label precision recall f1-score support B-Pathology_Test 0.78 0.80 0.79 254 I-Pathology_Test 0.83 0.75 0.79 263 B-Imaging_Test 0.85 0.89 0.87 414 I-Imaging_Test 0.78 0.91 0.84 633 B-Biomarker_Result 0.82 0.80 0.81 289 I-Biomarker_Result 0.83 0.82 0.83 374 B-Biomarker 0.83 0.81 0.82 374 I-Biomarker 0.85 0.70 0.77 375 B-Oncogene 0.79 0.86 0.82 100 I-Oncogene 0.81 0.82 0.81 184 micro-avg 0.82 0.82 0.82 3260 macro-avg 0.82 0.81 0.81 3260 weighted-avg 0.82 0.82 0.82 3260</summary></entry><entry><title type="html">Detect Entities Related to Cancer Therapies (LangTest)</title><link href="/2023/09/22/ner_oncology_therapy_langtest_en.html" rel="alternate" type="text/html" title="Detect Entities Related to Cancer Therapies (LangTest)" /><published>2023-09-22T00:00:00+00:00</published><updated>2023-09-22T00:00:00+00:00</updated><id>/2023/09/22/ner_oncology_therapy_langtest_en</id><content type="html" xml:base="/2023/09/22/ner_oncology_therapy_langtest_en.html">## Description

This model extracts entities related to oncology therapies using granular labels, including mentions of treatments, posology information, and line of therapy. It is the version of [ner_oncology_therapy](https://nlp.johnsnowlabs.com/2022/11/24/ner_oncology_therapy_en.html) model augmented with `langtest` library.

Definitions of Predicted Entities:

- `Cancer_Surgery`: Terms that indicate surgery as a form of cancer treatment.
- `Chemotherapy`: Mentions of chemotherapy drugs, or unspecific words such as &quot;chemotherapy&quot;.
- `Cycle_Count`: The total number of cycles being administered of an oncological therapy (e.g. &quot;5 cycles&quot;). 
- `Cycle_Day`: References to the day of the cycle of oncological therapy (e.g. &quot;day 5&quot;).
- `Cycle_Number`: The number of the cycle of an oncological therapy that is being applied (e.g. &quot;third cycle&quot;).
- `Dosage`: The quantity prescribed by the physician for an active ingredient.
- `Duration`: Words indicating the duration of a treatment (e.g. &quot;for 2 weeks&quot;).
- `Frequency`: Words indicating the frequency of treatment administration (e.g. &quot;daily&quot; or &quot;bid&quot;).
- `Hormonal_Therapy`: Mentions of hormonal drugs used to treat cancer, or unspecific words such as &quot;hormonal therapy&quot;.
- `Immunotherapy`: Mentions of immunotherapy drugs, or unspecific words such as &quot;immunotherapy&quot;.
- `Line_Of_Therapy`: Explicit references to the line of therapy of an oncological therapy (e.g. &quot;first-line treatment&quot;).
- `Radiotherapy`: Terms that indicate the use of Radiotherapy.
- `Radiation_Dose`: Dose used in radiotherapy.
- `Response_To_Treatment`: Terms related to the clinical progress of the patient related to cancer treatment, including &quot;recurrence&quot;, &quot;bad response&quot; or &quot;improvement&quot;.
- `Route`: Words indicating the type of administration route (such as &quot;PO&quot; or &quot;transdermal&quot;).
- `Targeted_Therapy`: Mentions of targeted therapy drugs, or unspecific words such as &quot;targeted therapy&quot;.
- `Unspecific_Therapy`: Terms that indicate a known cancer therapy but that is not specific to any other therapy entity (e.g. &quot;chemoradiotherapy&quot; or &quot;adjuvant therapy&quot;).

| **test_type**             | **before fail_count** | **after fail_count** | **before pass_count** | **after pass_count** | **minimum pass_rate** | **before pass_rate** | **after pass_rate** |
|---------------------------|-----------------------|----------------------|-----------------------|----------------------|-----------------------|----------------------|---------------------|
| **add_ocr_typo**          | 725                   | 279                  | 617                   | 1063                 | 70%                   | 46%                  | 79%                 |
| **add_typo**              | 248                   | 152                  | 1066                  | 1169                 | 70%                   | 81%                  | 88%                 |
| **lowercase**             | 214                   | 152                  | 1152                  | 1214                 | 70%                   | 84%                  | 89%                 |
| **strip_all_punctuation** | 223                   | 228                  | 1128                  | 1123                 | 70%                   | 83%                  | 83%                 |
| **strip_punctuation**     | 50                    | 37                   | 1270                  | 1283                 | 70%                   | 96%                  | 97%                 |
| **titlecase**             | 764                   | 288                  | 603                   | 1079                 | 70%                   | 44%                  | 79%                 |
| **uppercase**             | 1320                  | 233                  | 48                    | 1135                 | 70%                   | 4%                   | 83%                 |
| **weighted average**      | **2571**              | **938**              | **4201**              | **5834**             | **70%**               | **62.03%**           | **86.15%**          |

## Predicted Entities

`Cancer_Surgery`, `Chemotherapy`, `Cycle_Count`, `Cycle_Day`, `Cycle_Number`, `Dosage`, `Duration`, `Frequency`, `Hormonal_Therapy`, `Immunotherapy`, `Line_Of_Therapy`, `Radiotherapy`, `Radiation_Dose`, `Response_To_Treatment`, `Route`, `Targeted_Therapy`, `Unspecific_Therapy`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_oncology_therapy_langtest_en_5.1.0_3.0_1695389309847.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_oncology_therapy_langtest_en_5.1.0_3.0_1695389309847.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)                

ner = MedicalNerModel.pretrained(&quot;ner_oncology_therapy_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverter() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \
    .setOutputCol(&quot;ner_chunk&quot;)

pipeline = Pipeline(stages=[document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter])

data = spark.createDataFrame([[&quot;The had previously undergone a left mastectomy and an axillary lymph node dissection for a left breast cancer twenty years ago.
The tumor was positive for ER and PR. Postoperatively, radiotherapy was administered to her breast.
The cancer recurred as a right lung metastasis 13 years later. The patient underwent a regimen consisting of adriamycin (60 mg/m2) and cyclophosphamide (600 mg/m2) over six courses, as first line therapy.&quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
    
val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)
    
val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)                
    
val ner = MedicalNerModel.pretrained(&quot;ner_oncology_therapy_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)
    
val ner_converter = new NerConverter()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

        
val pipeline = new Pipeline().setStages(Array(document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter))    

val data = Seq(&quot;The had previously undergone a left mastectomy and an axillary lymph node dissection for a left breast cancer twenty years ago.
The tumor was positive for ER and PR. Postoperatively, radiotherapy was administered to her breast.
The cancer recurred as a right lung metastasis 13 years later. The patient underwent a regimen consisting of adriamycin (60 mg/m2) and cyclophosphamide (600 mg/m2) over six courses, as first line therapy.&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+------------------------------+---------------------+
|chunk                         |ner_label            |
+------------------------------+---------------------+
|mastectomy                    |Cancer_Surgery       |
|axillary lymph node dissection|Cancer_Surgery       |
|PR                            |Response_To_Treatment|
|radiotherapy                  |Radiotherapy         |
|recurred                      |Response_To_Treatment|
|adriamycin                    |Chemotherapy         |
|60 mg/m2                      |Chemotherapy         |
|cyclophosphamide              |Chemotherapy         |
|600 mg/m2                     |Chemotherapy         |
|six courses                   |Cycle_Count          |
|first line                    |Line_Of_Therapy      |
+------------------------------+---------------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_oncology_therapy_langtest|
|Compatibility:|Healthcare NLP 5.1.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|14.7 MB|

## References

In-house annotated oncology case reports.

## Benchmarking

```bash
label                  precision  recall  f1-score  support 
Cancer_Surgery         0.85       0.85    0.85      490     
Chemotherapy           0.92       0.93    0.92      637     
Cycle_Count            0.78       0.85    0.82      128     
Cycle_Day              0.66       0.71    0.68      68      
Cycle_Number           0.75       0.58    0.65      52      
Dosage                 0.91       0.91    0.91      311     
Duration               0.80       0.74    0.77      221     
Frequency              0.86       0.89    0.88      162     
Hormonal_Therapy       0.91       0.90    0.91      92      
Immunotherapy          0.82       0.79    0.81      63      
Line_Of_Therapy        0.78       0.78    0.78      46      
Radiation_Dose         0.88       0.88    0.88      48      
Radiotherapy           0.83       0.88    0.85      154     
Response_To_Treatment  0.71       0.68    0.69      377     
Route                  0.94       0.85    0.89      92      
Targeted_Therapy       0.90       0.89    0.89      166     
Unspecific_Therapy     0.74       0.79    0.77      150     
micro-avg              0.84       0.84    0.84      3257    
macro-avg              0.83       0.82    0.82      3257    
weighted-avg           0.84       0.84    0.84      3257    
```</content><author><name>John Snow Labs</name></author><category term="en" /><category term="ner" /><category term="clinical" /><category term="licensed" /><category term="oncology" /><category term="therapy" /><category term="langtest" /><summary type="html">Description This model extracts entities related to oncology therapies using granular labels, including mentions of treatments, posology information, and line of therapy. It is the version of ner_oncology_therapy model augmented with langtest library. Definitions of Predicted Entities: Cancer_Surgery: Terms that indicate surgery as a form of cancer treatment. Chemotherapy: Mentions of chemotherapy drugs, or unspecific words such as “chemotherapy”. Cycle_Count: The total number of cycles being administered of an oncological therapy (e.g. “5 cycles”). Cycle_Day: References to the day of the cycle of oncological therapy (e.g. “day 5”). Cycle_Number: The number of the cycle of an oncological therapy that is being applied (e.g. “third cycle”). Dosage: The quantity prescribed by the physician for an active ingredient. Duration: Words indicating the duration of a treatment (e.g. “for 2 weeks”). Frequency: Words indicating the frequency of treatment administration (e.g. “daily” or “bid”). Hormonal_Therapy: Mentions of hormonal drugs used to treat cancer, or unspecific words such as “hormonal therapy”. Immunotherapy: Mentions of immunotherapy drugs, or unspecific words such as “immunotherapy”. Line_Of_Therapy: Explicit references to the line of therapy of an oncological therapy (e.g. “first-line treatment”). Radiotherapy: Terms that indicate the use of Radiotherapy. Radiation_Dose: Dose used in radiotherapy. Response_To_Treatment: Terms related to the clinical progress of the patient related to cancer treatment, including “recurrence”, “bad response” or “improvement”. Route: Words indicating the type of administration route (such as “PO” or “transdermal”). Targeted_Therapy: Mentions of targeted therapy drugs, or unspecific words such as “targeted therapy”. Unspecific_Therapy: Terms that indicate a known cancer therapy but that is not specific to any other therapy entity (e.g. “chemoradiotherapy” or “adjuvant therapy”). test_type before fail_count after fail_count before pass_count after pass_count minimum pass_rate before pass_rate after pass_rate add_ocr_typo 725 279 617 1063 70% 46% 79% add_typo 248 152 1066 1169 70% 81% 88% lowercase 214 152 1152 1214 70% 84% 89% strip_all_punctuation 223 228 1128 1123 70% 83% 83% strip_punctuation 50 37 1270 1283 70% 96% 97% titlecase 764 288 603 1079 70% 44% 79% uppercase 1320 233 48 1135 70% 4% 83% weighted average 2571 938 4201 5834 70% 62.03% 86.15% Predicted Entities Cancer_Surgery, Chemotherapy, Cycle_Count, Cycle_Day, Cycle_Number, Dosage, Duration, Frequency, Hormonal_Therapy, Immunotherapy, Line_Of_Therapy, Radiotherapy, Radiation_Dose, Response_To_Treatment, Route, Targeted_Therapy, Unspecific_Therapy Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_oncology_therapy_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverter() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;) pipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter]) data = spark.createDataFrame([[&quot;The had previously undergone a left mastectomy and an axillary lymph node dissection for a left breast cancer twenty years ago. The tumor was positive for ER and PR. Postoperatively, radiotherapy was administered to her breast. The cancer recurred as a right lung metastasis 13 years later. The patient underwent a regimen consisting of adriamycin (60 mg/m2) and cyclophosphamide (600 mg/m2) over six courses, as first line therapy.&quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_oncology_therapy_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverter() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter)) val data = Seq(&quot;The had previously undergone a left mastectomy and an axillary lymph node dissection for a left breast cancer twenty years ago. The tumor was positive for ER and PR. Postoperatively, radiotherapy was administered to her breast. The cancer recurred as a right lung metastasis 13 years later. The patient underwent a regimen consisting of adriamycin (60 mg/m2) and cyclophosphamide (600 mg/m2) over six courses, as first line therapy.&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +------------------------------+---------------------+ |chunk |ner_label | +------------------------------+---------------------+ |mastectomy |Cancer_Surgery | |axillary lymph node dissection|Cancer_Surgery | |PR |Response_To_Treatment| |radiotherapy |Radiotherapy | |recurred |Response_To_Treatment| |adriamycin |Chemotherapy | |60 mg/m2 |Chemotherapy | |cyclophosphamide |Chemotherapy | |600 mg/m2 |Chemotherapy | |six courses |Cycle_Count | |first line |Line_Of_Therapy | +------------------------------+---------------------+ Model Information Model Name: ner_oncology_therapy_langtest Compatibility: Healthcare NLP 5.1.0+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 14.7 MB References In-house annotated oncology case reports. Benchmarking label precision recall f1-score support Cancer_Surgery 0.85 0.85 0.85 490 Chemotherapy 0.92 0.93 0.92 637 Cycle_Count 0.78 0.85 0.82 128 Cycle_Day 0.66 0.71 0.68 68 Cycle_Number 0.75 0.58 0.65 52 Dosage 0.91 0.91 0.91 311 Duration 0.80 0.74 0.77 221 Frequency 0.86 0.89 0.88 162 Hormonal_Therapy 0.91 0.90 0.91 92 Immunotherapy 0.82 0.79 0.81 63 Line_Of_Therapy 0.78 0.78 0.78 46 Radiation_Dose 0.88 0.88 0.88 48 Radiotherapy 0.83 0.88 0.85 154 Response_To_Treatment 0.71 0.68 0.69 377 Route 0.94 0.85 0.89 92 Targeted_Therapy 0.90 0.89 0.89 166 Unspecific_Therapy 0.74 0.79 0.77 150 micro-avg 0.84 0.84 0.84 3257 macro-avg 0.83 0.82 0.82 3257 weighted-avg 0.84 0.84 0.84 3257</summary></entry><entry><title type="html">Extract Entities Related to TNM Staging (LangTest)</title><link href="/2023/09/22/ner_oncology_tnm_langtest_en.html" rel="alternate" type="text/html" title="Extract Entities Related to TNM Staging (LangTest)" /><published>2023-09-22T00:00:00+00:00</published><updated>2023-09-22T00:00:00+00:00</updated><id>/2023/09/22/ner_oncology_tnm_langtest_en</id><content type="html" xml:base="/2023/09/22/ner_oncology_tnm_langtest_en.html">## Description

This model extracts staging information and mentions related to tumors, lymph nodes, and metastases. It is the version of [ner_oncology_tnm](https://nlp.johnsnowlabs.com/2022/11/24/ner_oncology_tnm_en.html) model augmented with `langtest` library.

Definitions of Predicted Entities:

- `Cancer_Dx`: Mentions of cancer diagnoses (such as &quot;breast cancer&quot;) or pathological types that are usually used as synonyms for &quot;cancer&quot; (e.g. &quot;carcinoma&quot;). When anatomical references are present, they are included in the Cancer_Dx extraction.
- `Lymph_Node`: Mentions of lymph nodes and pathological findings of the lymph nodes.
- `Lymph_Node_Modifier`: Words that refer to a lymph node being abnormal (such as &quot;enlargement&quot;).
- `Metastasis`: Terms that indicate a metastatic disease. Anatomical references are not included in these extractions.
- `Staging`: Mentions of cancer stage such as &quot;stage 2b&quot; or &quot;T2N1M0&quot;. It also includes words such as &quot;in situ&quot;, &quot;early-stage&quot; or &quot;advanced&quot;.
- `Tumor`: All nonspecific terms that may be related to tumors, either malignant or benign (for example: &quot;mass&quot;, &quot;tumor&quot;, &quot;lesion&quot;, or &quot;neoplasm&quot;).
- `Tumor_Description`: Information related to tumor characteristics, such as size, presence of invasion, grade, and hystological type.


| **test_type**        | **before fail_count** | **after fail_count** | **before pass_count** | **after pass_count** | **minimum pass_rate** | **before pass_rate** | **after pass_rate** |
|----------------------|-----------------------|----------------------|-----------------------|----------------------|-----------------------|----------------------|---------------------|
| **add_typo**         | 249                   | 209                  | 4089                  | 4146                 | 70%                   | 94%                  | 95%                 |
| **lowercase**        | 273                   | 238                  | 4243                  | 4278                 | 70%                   | 94%                  | 95%                 |
| **swap_entities**    | 362                   | 342                  | 1192                  | 1211                 | 70%                   | 77%                  | 78%                 |
| **titlecase**        | 985                   | 712                  | 3517                  | 3790                 | 70%                   | 78%                  | 84%                 |
| **uppercase**        | 1779                  | 378                  | 2736                  | 4137                 | 70%                   | 61%                  | 92%                 |
| **weighted average** | **3648**              | **1879**             | **15777**             | **17562**            | **70%**               | **81.22%**           | **90.33%**          |

## Predicted Entities

`Cancer_Dx`, `Lymph_Node`, `Lymph_Node_Modifier`, `Metastasis`, `Staging`, `Tumor`, `Tumor_Description`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_oncology_tnm_langtest_en_5.1.0_3.0_1695387402214.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_oncology_tnm_langtest_en_5.1.0_3.0_1695387402214.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)                

ner = MedicalNerModel.pretrained(&quot;ner_oncology_tnm_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverter() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \
    .setOutputCol(&quot;ner_chunk&quot;)

pipeline = Pipeline(stages=[document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter])

data = spark.createDataFrame([[&quot;Chest computed tomography (CT) showed pulmonary lesions in the posterior segment of the right upper lobe, and peripheral lung cancer with multiple pulmonary metastases. Multiple metastases of the thoracic vertebrae, sternum, and ribs were considered, which were similar to previous CT images.&quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
    
val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)
    
val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)                
    
val ner = MedicalNerModel.pretrained(&quot;ner_oncology_tnm_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)
    
val ner_converter = new NerConverter()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

        
val pipeline = new Pipeline().setStages(Array(document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter))    

val data = Seq(&quot;Chest computed tomography (CT) showed pulmonary lesions in the posterior segment of the right upper lobe, and peripheral lung cancer with multiple pulmonary metastases. Multiple metastases of the thoracic vertebrae, sternum, and ribs were considered, which were similar to previous CT images.&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+----------------------+----------+
|chunk                 |ner_label |
+----------------------+----------+
|lesions               |Tumor     |
|peripheral lung cancer|Cancer_Dx |
|metastases            |Metastasis|
|metastases            |Metastasis|
+----------------------+----------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_oncology_tnm_langtest|
|Compatibility:|Healthcare NLP 5.1.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|14.8 MB|

## References

In-house annotated oncology case reports.

## Benchmarking

```bash
label                precision  recall  f1-score  support 
Cancer_Dx            0.88       0.86    0.87      721     
Lymph_Node           0.78       0.77    0.77      271     
Lymph_Node_Modifier  0.79       0.76    0.77      45      
Metastasis           0.92       0.92    0.92      321     
Staging              0.88       0.80    0.84      123     
Tumor                0.90       0.86    0.88      1018    
Tumor_Description    0.70       0.68    0.69      1060    
micro-avg            0.83       0.80    0.81      3559    
macro-avg            0.84       0.81    0.82      3559    
weighted-avg         0.83       0.80    0.81      3559    
```</content><author><name>John Snow Labs</name></author><category term="en" /><category term="ner" /><category term="clinical" /><category term="licensed" /><category term="oncology" /><category term="tnm" /><category term="langtest" /><summary type="html">Description This model extracts staging information and mentions related to tumors, lymph nodes, and metastases. It is the version of ner_oncology_tnm model augmented with langtest library. Definitions of Predicted Entities: Cancer_Dx: Mentions of cancer diagnoses (such as “breast cancer”) or pathological types that are usually used as synonyms for “cancer” (e.g. “carcinoma”). When anatomical references are present, they are included in the Cancer_Dx extraction. Lymph_Node: Mentions of lymph nodes and pathological findings of the lymph nodes. Lymph_Node_Modifier: Words that refer to a lymph node being abnormal (such as “enlargement”). Metastasis: Terms that indicate a metastatic disease. Anatomical references are not included in these extractions. Staging: Mentions of cancer stage such as “stage 2b” or “T2N1M0”. It also includes words such as “in situ”, “early-stage” or “advanced”. Tumor: All nonspecific terms that may be related to tumors, either malignant or benign (for example: “mass”, “tumor”, “lesion”, or “neoplasm”). Tumor_Description: Information related to tumor characteristics, such as size, presence of invasion, grade, and hystological type. test_type before fail_count after fail_count before pass_count after pass_count minimum pass_rate before pass_rate after pass_rate add_typo 249 209 4089 4146 70% 94% 95% lowercase 273 238 4243 4278 70% 94% 95% swap_entities 362 342 1192 1211 70% 77% 78% titlecase 985 712 3517 3790 70% 78% 84% uppercase 1779 378 2736 4137 70% 61% 92% weighted average 3648 1879 15777 17562 70% 81.22% 90.33% Predicted Entities Cancer_Dx, Lymph_Node, Lymph_Node_Modifier, Metastasis, Staging, Tumor, Tumor_Description Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_oncology_tnm_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverter() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;) pipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter]) data = spark.createDataFrame([[&quot;Chest computed tomography (CT) showed pulmonary lesions in the posterior segment of the right upper lobe, and peripheral lung cancer with multiple pulmonary metastases. Multiple metastases of the thoracic vertebrae, sternum, and ribs were considered, which were similar to previous CT images.&quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_oncology_tnm_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverter() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter)) val data = Seq(&quot;Chest computed tomography (CT) showed pulmonary lesions in the posterior segment of the right upper lobe, and peripheral lung cancer with multiple pulmonary metastases. Multiple metastases of the thoracic vertebrae, sternum, and ribs were considered, which were similar to previous CT images.&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +----------------------+----------+ |chunk |ner_label | +----------------------+----------+ |lesions |Tumor | |peripheral lung cancer|Cancer_Dx | |metastases |Metastasis| |metastases |Metastasis| +----------------------+----------+ Model Information Model Name: ner_oncology_tnm_langtest Compatibility: Healthcare NLP 5.1.0+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 14.8 MB References In-house annotated oncology case reports. Benchmarking label precision recall f1-score support Cancer_Dx 0.88 0.86 0.87 721 Lymph_Node 0.78 0.77 0.77 271 Lymph_Node_Modifier 0.79 0.76 0.77 45 Metastasis 0.92 0.92 0.92 321 Staging 0.88 0.80 0.84 123 Tumor 0.90 0.86 0.88 1018 Tumor_Description 0.70 0.68 0.69 1060 micro-avg 0.83 0.80 0.81 3559 macro-avg 0.84 0.81 0.82 3559 weighted-avg 0.83 0.80 0.81 3559</summary></entry><entry><title type="html">Extract Cancer Therapies and Posology Information (LangTest)</title><link href="/2023/09/22/ner_oncology_unspecific_posology_langtest_en.html" rel="alternate" type="text/html" title="Extract Cancer Therapies and Posology Information (LangTest)" /><published>2023-09-22T00:00:00+00:00</published><updated>2023-09-22T00:00:00+00:00</updated><id>/2023/09/22/ner_oncology_unspecific_posology_langtest_en</id><content type="html" xml:base="/2023/09/22/ner_oncology_unspecific_posology_langtest_en.html">## Description

This model extracts mentions of treatments and posology information using unspecific labels (low granularity). It is the version of [ner_oncology_unspecific_posology](https://nlp.johnsnowlabs.com/2022/11/24/ner_oncology_unspecific_posology_en.html) model augmented with `langtest` library.

Definitions of Predicted Entities:

- `Cancer_Therapy`: Mentions of cancer treatments, including chemotherapy, radiotherapy, surgery, and others.
- `Posology_Information`: Terms related to the posology of the treatment, including duration, frequencies, and dosage.

| **test_type**        | **before fail_count** | **after fail_count** | **before pass_count** | **after pass_count** | **minimum pass_rate** | **before pass_rate** | **after pass_rate** |
|----------------------|-----------------------|----------------------|-----------------------|----------------------|-----------------------|----------------------|---------------------|
| **add_ocr_typo**     | 658                   | 228                  | 630                   | 1060                 | 70%                   | 49%                  | 82%                 |
| **add_slangs**       | 20                    | 14                   | 1268                  | 1274                 | 60%                   | 98%                  | 99%                 |
| **add_typo**         | 167                   | 142                  | 1121                  | 1146                 | 60%                   | 87%                  | 89%                 |
| **lowercase**        | 166                   | 116                  | 1122                  | 1172                 | 70%                   | 87%                  | 91%                 |
| **titlecase**        | 600                   | 200                  | 688                   | 1088                 | 70%                   | 53%                  | 84%                 |
| **uppercase**        | 1195                  | 268                  | 93                    | 1020                 | 60%                   | 7%                   | 79%                 |
| **weighted average** | **2806**              | **968**              | **4922**              | **6760**             | **65%**               | **63.69%**           | **87.47%**          |

## Predicted Entities

`Cancer_Therapy`, `Posology_Information`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_oncology_unspecific_posology_langtest_en_5.1.0_3.0_1695384084019.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_oncology_unspecific_posology_langtest_en_5.1.0_3.0_1695384084019.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)                

ner = MedicalNerModel.pretrained(&quot;ner_oncology_unspecific_posology_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverter() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \
    .setOutputCol(&quot;ner_chunk&quot;)

pipeline = Pipeline(stages=[document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter])

data = spark.createDataFrame([[&quot;The patient underwent a regimen consisting of adriamycin (60 mg/m2) and cyclophosphamide (600 mg/m2) over six courses. She is currently receiving his second cycle of chemotherapy and is in good overall condition.&quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
    
val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)
    
val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)                
    
val ner = MedicalNerModel.pretrained(&quot;ner_oncology_unspecific_posology_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)
    
val ner_converter = new NerConverter()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

        
val pipeline = new Pipeline().setStages(Array(document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter))    

val data = Seq(&quot;The patient underwent a regimen consisting of adriamycin (60 mg/m2) and cyclophosphamide (600 mg/m2) over six courses. She is currently receiving his second cycle of chemotherapy and is in good overall condition.&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+----------------+--------------------+
|chunk           |ner_label           |
+----------------+--------------------+
|adriamycin      |Cancer_Therapy      |
|60 mg/m2        |Posology_Information|
|cyclophosphamide|Cancer_Therapy      |
|600 mg/m2       |Posology_Information|
|six courses     |Posology_Information|
|second cycle    |Posology_Information|
|chemotherapy    |Cancer_Therapy      |
+----------------+--------------------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_oncology_unspecific_posology_langtest|
|Compatibility:|Healthcare NLP 5.1.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|14.6 MB|

## References

In-house annotated oncology case reports.

## Benchmarking

```bash
label                 precision  recall  f1-score  support 
Cancer_Therapy        0.90       0.90    0.90      1845    
Posology_Information  0.87       0.86    0.87      1199    
micro-avg             0.89       0.89    0.89      3044    
macro-avg             0.89       0.88    0.88      3044    
weighted-avg          0.89       0.89    0.89      3044 
```</content><author><name>John Snow Labs</name></author><category term="en" /><category term="ner" /><category term="licensed" /><category term="clinical" /><category term="oncology" /><category term="posology" /><category term="langtest" /><summary type="html">Description This model extracts mentions of treatments and posology information using unspecific labels (low granularity). It is the version of ner_oncology_unspecific_posology model augmented with langtest library. Definitions of Predicted Entities: Cancer_Therapy: Mentions of cancer treatments, including chemotherapy, radiotherapy, surgery, and others. Posology_Information: Terms related to the posology of the treatment, including duration, frequencies, and dosage. test_type before fail_count after fail_count before pass_count after pass_count minimum pass_rate before pass_rate after pass_rate add_ocr_typo 658 228 630 1060 70% 49% 82% add_slangs 20 14 1268 1274 60% 98% 99% add_typo 167 142 1121 1146 60% 87% 89% lowercase 166 116 1122 1172 70% 87% 91% titlecase 600 200 688 1088 70% 53% 84% uppercase 1195 268 93 1020 60% 7% 79% weighted average 2806 968 4922 6760 65% 63.69% 87.47% Predicted Entities Cancer_Therapy, Posology_Information Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_oncology_unspecific_posology_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverter() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;) pipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter]) data = spark.createDataFrame([[&quot;The patient underwent a regimen consisting of adriamycin (60 mg/m2) and cyclophosphamide (600 mg/m2) over six courses. She is currently receiving his second cycle of chemotherapy and is in good overall condition.&quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_oncology_unspecific_posology_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverter() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter)) val data = Seq(&quot;The patient underwent a regimen consisting of adriamycin (60 mg/m2) and cyclophosphamide (600 mg/m2) over six courses. She is currently receiving his second cycle of chemotherapy and is in good overall condition.&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +----------------+--------------------+ |chunk |ner_label | +----------------+--------------------+ |adriamycin |Cancer_Therapy | |60 mg/m2 |Posology_Information| |cyclophosphamide|Cancer_Therapy | |600 mg/m2 |Posology_Information| |six courses |Posology_Information| |second cycle |Posology_Information| |chemotherapy |Cancer_Therapy | +----------------+--------------------+ Model Information Model Name: ner_oncology_unspecific_posology_langtest Compatibility: Healthcare NLP 5.1.0+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 14.6 MB References In-house annotated oncology case reports. Benchmarking label precision recall f1-score support Cancer_Therapy 0.90 0.90 0.90 1845 Posology_Information 0.87 0.86 0.87 1199 micro-avg 0.89 0.89 0.89 3044 macro-avg 0.89 0.88 0.88 3044 weighted-avg 0.89 0.89 0.89 3044</summary></entry><entry><title type="html">Extract Clinical Problem Entities (low granularity) from Voice of the Patient Documents (LangTest)</title><link href="/2023/09/22/ner_vop_problem_reduced_langtest_en.html" rel="alternate" type="text/html" title="Extract Clinical Problem Entities (low granularity) from Voice of the Patient Documents (LangTest)" /><published>2023-09-22T00:00:00+00:00</published><updated>2023-09-22T00:00:00+00:00</updated><id>/2023/09/22/ner_vop_problem_reduced_langtest_en</id><content type="html" xml:base="/2023/09/22/ner_vop_problem_reduced_langtest_en.html">## Description

This model extracts clinical problems from the documents transferred from the patient’s own sentences. The taxonomy is reduced (one label for all clinical problems). It is the version of [ner_vop_problem_reduced](https://nlp.johnsnowlabs.com/2023/06/07/ner_vop_problem_reduced_en.html) model augmented with `langtest` library.

| **test_type**             | **before fail_count** | **after fail_count** | **before pass_count** | **after pass_count** | **minimum pass_rate** | **before pass_rate** | **after pass_rate** |
|---------------------------|-----------------------|----------------------|-----------------------|----------------------|-----------------------|----------------------|---------------------|
| **add_abbreviation**      | 855                   | 745                  | 2246                  | 2356                 | 60%                   | 72%                  | 76%                 |
| **add_ocr_typo**          | 1446                  | 900                  | 2023                  | 2569                 | 60%                   | 58%                  | 74%                 |
| **add_punctuation**       | 3                     | 0                    | 44                    | 47                   | 70%                   | 94%                  | 100%                |
| **add_slangs**            | 643                   | 471                  | 1240                  | 1412                 | 70%                   | 66%                  | 75%                 |
| **add_typo**              | 392                   | 353                  | 2964                  | 3016                 | 70%                   | 88%                  | 90%                 |
| **lowercase**             | 139                   | 101                  | 3083                  | 3121                 | 70%                   | 96%                  | 97%                 |
| **number_to_word**        | 42                    | 33                   | 638                   | 647                  | 70%                   | 94%                  | 95%                 |
| **strip_all_punctuation** | 272                   | 242                  | 3228                  | 3258                 | 70%                   | 92%                  | 93%                 |
| **strip_punctuation**     | 79                    | 79                   | 3388                  | 3388                 | 70%                   | 98%                  | 98%                 |
| **swap_entities**         | 692                   | 640                  | 2734                  | 2781                 | 70%                   | 80%                  | 81%                 |
| **titlecase**             | 1257                  | 764                  | 2255                  | 2748                 | 70%                   | 64%                  | 78%                 |
| **uppercase**             | 2510                  | 732                  | 1001                  | 2779                 | 70%                   | 29%                  | 79%                 |
| **weighted average**      | 8330                  | 5060                 | 24844                 | 28122                | 68%                   | 74.89%               | 84.75%              |

## Predicted Entities

`Problem`, `HealthStatus`, `Modifier`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_vop_problem_reduced_langtest_en_5.1.0_3.0_1695367521585.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_vop_problem_reduced_langtest_en_5.1.0_3.0_1695367521585.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)                

ner = MedicalNerModel.pretrained(&quot;ner_vop_problem_reduced_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverterInternal() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \
    .setOutputCol(&quot;ner_chunk&quot;)

pipeline = Pipeline(stages=[document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter])

data = spark.createDataFrame([[&quot;I've been experiencing joint pain and fatigue lately, so I went to the rheumatology department. After some tests, they diagnosed me with rheumatoid arthritis and started me on a treatment plan to manage the symptoms.&quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
    
val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)
    
val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)                
    
val ner = MedicalNerModel.pretrained(&quot;ner_vop_problem_reduced_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)
    
val ner_converter = new NerConverterInternal()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

        
val pipeline = new Pipeline().setStages(Array(document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter))    

val data = Seq(&quot;I've been experiencing joint pain and fatigue lately, so I went to the rheumatology department. After some tests, they diagnosed me with rheumatoid arthritis and started me on a treatment plan to manage the symptoms.&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+--------------------+---------+
|chunk               |ner_label|
+--------------------+---------+
|pain                |Problem  |
|fatigue             |Problem  |
|rheumatoid arthritis|Problem  |
+--------------------+---------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_vop_problem_reduced_langtest|
|Compatibility:|Healthcare NLP 5.1.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|14.5 MB|

## References

In-house annotated health-related text in colloquial language.

## Sample text from the training dataset

Hello,I'm 20 year old girl. I'm diagnosed with hyperthyroid 1 month ago. I was feeling weak, light headed,poor digestion, panic attacks, depression, left chest pain, increased heart rate, rapidly weight loss,  from 4 months. Because of this, I stayed in the hospital and just discharged from hospital. I had many other blood tests, brain mri, ultrasound scan, endoscopy because of some dumb doctors bcs they were not able to diagnose actual problem. Finally I got an appointment with a homeopathy doctor finally he find that i was suffering from hyperthyroid and my TSH was 0.15 T3 and T4 is normal . Also i have b12 deficiency and vitamin D deficiency so I'm taking weekly supplement of vitamin D and 1000 mcg b12 daily. I'm taking homeopathy medicine for 40 days and took 2nd test after 30 days. My TSH is 0.5 now. I feel a little bit relief from weakness and depression but I'm facing with 2 new problem from last week that is breathtaking problem and very rapid heartrate. I just want to know if i should start allopathy medicine or homeopathy is okay? Bcs i heard that thyroid take time to start recover. So please let me know if both of medicines take same time. Because some of my friends advising me to start allopathy and never take a chance as i can develop some serious problems.Sorry for my poor english😐Thank you.

## Benchmarking

```bash
label         precision  recall  f1-score  support 
HealthStatus  0.80       0.89    0.84      125     
Modifier      0.79       0.78    0.79      1069    
Problem       0.89       0.87    0.88      5762    
micro-avg     0.87       0.86    0.87      6956    
macro-avg     0.83       0.85    0.84      6956    
weighted-avg  0.87       0.86    0.87      6956    
```</content><author><name>John Snow Labs</name></author><category term="en" /><category term="licensed" /><category term="ner" /><category term="clinical" /><category term="vop" /><category term="problem" /><category term="langtest" /><summary type="html">Description This model extracts clinical problems from the documents transferred from the patient’s own sentences. The taxonomy is reduced (one label for all clinical problems). It is the version of ner_vop_problem_reduced model augmented with langtest library. test_type before fail_count after fail_count before pass_count after pass_count minimum pass_rate before pass_rate after pass_rate add_abbreviation 855 745 2246 2356 60% 72% 76% add_ocr_typo 1446 900 2023 2569 60% 58% 74% add_punctuation 3 0 44 47 70% 94% 100% add_slangs 643 471 1240 1412 70% 66% 75% add_typo 392 353 2964 3016 70% 88% 90% lowercase 139 101 3083 3121 70% 96% 97% number_to_word 42 33 638 647 70% 94% 95% strip_all_punctuation 272 242 3228 3258 70% 92% 93% strip_punctuation 79 79 3388 3388 70% 98% 98% swap_entities 692 640 2734 2781 70% 80% 81% titlecase 1257 764 2255 2748 70% 64% 78% uppercase 2510 732 1001 2779 70% 29% 79% weighted average 8330 5060 24844 28122 68% 74.89% 84.75% Predicted Entities Problem, HealthStatus, Modifier Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_vop_problem_reduced_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverterInternal() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;) pipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter]) data = spark.createDataFrame([[&quot;I've been experiencing joint pain and fatigue lately, so I went to the rheumatology department. After some tests, they diagnosed me with rheumatoid arthritis and started me on a treatment plan to manage the symptoms.&quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;,&quot;en&quot;,&quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_vop_problem_reduced_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter)) val data = Seq(&quot;I've been experiencing joint pain and fatigue lately, so I went to the rheumatology department. After some tests, they diagnosed me with rheumatoid arthritis and started me on a treatment plan to manage the symptoms.&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +--------------------+---------+ |chunk |ner_label| +--------------------+---------+ |pain |Problem | |fatigue |Problem | |rheumatoid arthritis|Problem | +--------------------+---------+ Model Information Model Name: ner_vop_problem_reduced_langtest Compatibility: Healthcare NLP 5.1.0+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 14.5 MB References In-house annotated health-related text in colloquial language. Sample text from the training dataset Hello,I’m 20 year old girl. I’m diagnosed with hyperthyroid 1 month ago. I was feeling weak, light headed,poor digestion, panic attacks, depression, left chest pain, increased heart rate, rapidly weight loss, from 4 months. Because of this, I stayed in the hospital and just discharged from hospital. I had many other blood tests, brain mri, ultrasound scan, endoscopy because of some dumb doctors bcs they were not able to diagnose actual problem. Finally I got an appointment with a homeopathy doctor finally he find that i was suffering from hyperthyroid and my TSH was 0.15 T3 and T4 is normal . Also i have b12 deficiency and vitamin D deficiency so I’m taking weekly supplement of vitamin D and 1000 mcg b12 daily. I’m taking homeopathy medicine for 40 days and took 2nd test after 30 days. My TSH is 0.5 now. I feel a little bit relief from weakness and depression but I’m facing with 2 new problem from last week that is breathtaking problem and very rapid heartrate. I just want to know if i should start allopathy medicine or homeopathy is okay? Bcs i heard that thyroid take time to start recover. So please let me know if both of medicines take same time. Because some of my friends advising me to start allopathy and never take a chance as i can develop some serious problems.Sorry for my poor english😐Thank you. Benchmarking label precision recall f1-score support HealthStatus 0.80 0.89 0.84 125 Modifier 0.79 0.78 0.79 1069 Problem 0.89 0.87 0.88 5762 micro-avg 0.87 0.86 0.87 6956 macro-avg 0.83 0.85 0.84 6956 weighted-avg 0.87 0.86 0.87 6956</summary></entry><entry><title type="html">Extract Temporal Entities from Voice of the Patient Documents (LangTest)</title><link href="/2023/09/22/ner_vop_temporal_langtest_en.html" rel="alternate" type="text/html" title="Extract Temporal Entities from Voice of the Patient Documents (LangTest)" /><published>2023-09-22T00:00:00+00:00</published><updated>2023-09-22T00:00:00+00:00</updated><id>/2023/09/22/ner_vop_temporal_langtest_en</id><content type="html" xml:base="/2023/09/22/ner_vop_temporal_langtest_en.html">## Description

This model extracts temporal references from the documents transferred from the patient’s own sentences. It is the version of [ner_vop_temporal](https://nlp.johnsnowlabs.com/2023/06/06/ner_vop_temporal_en.html) model augmented with `langtest` library.

| **test_type**        | **before fail_count** | **after fail_count** | **before pass_count** | **after pass_count** | **minimum pass_rate** | **before pass_rate** | **after pass_rate** |
|----------------------|-----------------------|----------------------|-----------------------|----------------------|-----------------------|----------------------|---------------------|
| **add_ocr_typo**     | 1623                  | 928                  | 1065                  | 1760                 | 60%                   | 40%                  | 65%                 |
| **add_typo**         | 202                   | 161                  | 2401                  | 2432                 | 70%                   | 92%                  | 94%                 |
| **lowercase**        | 55                    | 59                   | 2466                  | 2462                 | 70%                   | 98%                  | 98%                 |
| **swap_entities**    | 609                   | 597                  | 1905                  | 1911                 | 70%                   | 76%                  | 76%                 |
| **titlecase**        | 680                   | 480                  | 2037                  | 2237                 | 70%                   | 75%                  | 82%                 |
| **uppercase**        | 1911                  | 337                  | 805                   | 2379                 | 70%                   | 30%                  | 88%                 |
| **weighted average** | **5080**              | **2562**             | **10679**             | **13181**            | **68%**               | **67.76%**           | **83.73%**          |

## Predicted Entities

`DateTime`, `Duration`, `Frequency`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_vop_temporal_langtest_en_5.1.0_3.0_1695369554858.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_vop_temporal_langtest_en_5.1.0_3.0_1695369554858.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)                

ner = MedicalNerModel.pretrained(&quot;ner_vop_temporal_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverterInternal() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \
    .setOutputCol(&quot;ner_chunk&quot;)

pipeline = Pipeline(stages=[document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter])

data = spark.createDataFrame([[&quot;Hi everyone, I'm a 35-year-old woman who was diagnosed with depression last year. I've been taking medication and seeing a therapist for about six months now, and I'm starting to feel a lot better. I have therapy sessions once a week, and I take my medication every day at the same time. I've noticed that my mood tends to be better in the mornings than in the evenings. Has anyone else had a similar experience? Any tips for managing depression long-term?&quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
    
val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)
    
val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)                
    
val ner = MedicalNerModel.pretrained(&quot;ner_vop_temporal_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)
    
val ner_converter = new NerConverterInternal()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

        
val pipeline = new Pipeline().setStages(Array(document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter))    

val data = Seq(&quot;Hi everyone, I'm a 35-year-old woman who was diagnosed with depression last year. I've been taking medication and seeing a therapist for about six months now, and I'm starting to feel a lot better. I have therapy sessions once a week, and I take my medication every day at the same time. I've noticed that my mood tends to be better in the mornings than in the evenings. Has anyone else had a similar experience? Any tips for managing depression long-term?&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+---------------+---------+
|chunk          |ner_label|
+---------------+---------+
|last year      |DateTime |
|six months     |Duration |
|now            |DateTime |
|once a week    |Frequency|
|every day      |Frequency|
|in the mornings|DateTime |
|in the evenings|DateTime |
+---------------+---------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_vop_temporal_langtest|
|Compatibility:|Healthcare NLP 5.1.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|14.5 MB|

## References

In-house annotated health-related text in colloquial language.

## Sample text from the training dataset

Hello,I'm 20 year old girl. I'm diagnosed with hyperthyroid 1 month ago. I was feeling weak, light headed,poor digestion, panic attacks, depression, left chest pain, increased heart rate, rapidly weight loss,  from 4 months. Because of this, I stayed in the hospital and just discharged from hospital. I had many other blood tests, brain mri, ultrasound scan, endoscopy because of some dumb doctors bcs they were not able to diagnose actual problem. Finally I got an appointment with a homeopathy doctor finally he find that i was suffering from hyperthyroid and my TSH was 0.15 T3 and T4 is normal . Also i have b12 deficiency and vitamin D deficiency so I'm taking weekly supplement of vitamin D and 1000 mcg b12 daily. I'm taking homeopathy medicine for 40 days and took 2nd test after 30 days. My TSH is 0.5 now. I feel a little bit relief from weakness and depression but I'm facing with 2 new problem from last week that is breathtaking problem and very rapid heartrate. I just want to know if i should start allopathy medicine or homeopathy is okay? Bcs i heard that thyroid take time to start recover. So please let me know if both of medicines take same time. Because some of my friends advising me to start allopathy and never take a chance as i can develop some serious problems.Sorry for my poor english😐Thank you.

## Benchmarking

```bash
label         precision  recall  f1-score  support 
DateTime      0.84       0.85    0.84      2131    
Duration      0.80       0.81    0.81      1058    
Frequency     0.84       0.86    0.85      672     
micro-avg     0.83       0.84    0.83      3861    
macro-avg     0.83       0.84    0.83      3861    
weighted-avg  0.83       0.84    0.83      3861
```</content><author><name>John Snow Labs</name></author><category term="en" /><category term="ner" /><category term="clinical" /><category term="licensed" /><category term="vop" /><category term="temporal" /><category term="langtest" /><summary type="html">Description This model extracts temporal references from the documents transferred from the patient’s own sentences. It is the version of ner_vop_temporal model augmented with langtest library. test_type before fail_count after fail_count before pass_count after pass_count minimum pass_rate before pass_rate after pass_rate add_ocr_typo 1623 928 1065 1760 60% 40% 65% add_typo 202 161 2401 2432 70% 92% 94% lowercase 55 59 2466 2462 70% 98% 98% swap_entities 609 597 1905 1911 70% 76% 76% titlecase 680 480 2037 2237 70% 75% 82% uppercase 1911 337 805 2379 70% 30% 88% weighted average 5080 2562 10679 13181 68% 67.76% 83.73% Predicted Entities DateTime, Duration, Frequency Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_vop_temporal_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverterInternal() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;) pipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter]) data = spark.createDataFrame([[&quot;Hi everyone, I'm a 35-year-old woman who was diagnosed with depression last year. I've been taking medication and seeing a therapist for about six months now, and I'm starting to feel a lot better. I have therapy sessions once a week, and I take my medication every day at the same time. I've noticed that my mood tends to be better in the mornings than in the evenings. Has anyone else had a similar experience? Any tips for managing depression long-term?&quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_vop_temporal_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter)) val data = Seq(&quot;Hi everyone, I'm a 35-year-old woman who was diagnosed with depression last year. I've been taking medication and seeing a therapist for about six months now, and I'm starting to feel a lot better. I have therapy sessions once a week, and I take my medication every day at the same time. I've noticed that my mood tends to be better in the mornings than in the evenings. Has anyone else had a similar experience? Any tips for managing depression long-term?&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +---------------+---------+ |chunk |ner_label| +---------------+---------+ |last year |DateTime | |six months |Duration | |now |DateTime | |once a week |Frequency| |every day |Frequency| |in the mornings|DateTime | |in the evenings|DateTime | +---------------+---------+ Model Information Model Name: ner_vop_temporal_langtest Compatibility: Healthcare NLP 5.1.0+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 14.5 MB References In-house annotated health-related text in colloquial language. Sample text from the training dataset Hello,I’m 20 year old girl. I’m diagnosed with hyperthyroid 1 month ago. I was feeling weak, light headed,poor digestion, panic attacks, depression, left chest pain, increased heart rate, rapidly weight loss, from 4 months. Because of this, I stayed in the hospital and just discharged from hospital. I had many other blood tests, brain mri, ultrasound scan, endoscopy because of some dumb doctors bcs they were not able to diagnose actual problem. Finally I got an appointment with a homeopathy doctor finally he find that i was suffering from hyperthyroid and my TSH was 0.15 T3 and T4 is normal . Also i have b12 deficiency and vitamin D deficiency so I’m taking weekly supplement of vitamin D and 1000 mcg b12 daily. I’m taking homeopathy medicine for 40 days and took 2nd test after 30 days. My TSH is 0.5 now. I feel a little bit relief from weakness and depression but I’m facing with 2 new problem from last week that is breathtaking problem and very rapid heartrate. I just want to know if i should start allopathy medicine or homeopathy is okay? Bcs i heard that thyroid take time to start recover. So please let me know if both of medicines take same time. Because some of my friends advising me to start allopathy and never take a chance as i can develop some serious problems.Sorry for my poor english😐Thank you. Benchmarking label precision recall f1-score support DateTime 0.84 0.85 0.84 2131 Duration 0.80 0.81 0.81 1058 Frequency 0.84 0.86 0.85 672 micro-avg 0.83 0.84 0.83 3861 macro-avg 0.83 0.84 0.83 3861 weighted-avg 0.83 0.84 0.83 3861</summary></entry><entry><title type="html">Extract Test Entities from Voice of the Patient Documents (LangTest</title><link href="/2023/09/22/ner_vop_test_langtest_en.html" rel="alternate" type="text/html" title="Extract Test Entities from Voice of the Patient Documents (LangTest" /><published>2023-09-22T00:00:00+00:00</published><updated>2023-09-22T00:00:00+00:00</updated><id>/2023/09/22/ner_vop_test_langtest_en</id><content type="html" xml:base="/2023/09/22/ner_vop_test_langtest_en.html">## Description

This model extracts test mentions from the documents transferred from the patient’s own sentences. It is the version of [ner_vop_test](https://nlp.johnsnowlabs.com/2023/06/06/ner_vop_test_en.html) model augmented with `langtest` library.

| **test_type**        | **before fail_count** | **after fail_count** | **before pass_count** | **after pass_count** | **minimum pass_rate** | **before pass_rate** | **after pass_rate** |
|----------------------|-----------------------|----------------------|-----------------------|----------------------|-----------------------|----------------------|---------------------|
| **add_abbreviation** | 149                   | 124                  | 305                   | 330                  | 70%                   | 67%                  | 73%                 |
| **add_ocr_typo**     | 280                   | 117                  | 217                   | 380                  | 70%                   | 44%                  | 76%                 |
| **add_punctuation**  | 0                     | 0                    | 4                     | 4                    | 70%                   | 100%                 | 100%                |
| **add_typo**         | 61                    | 51                   | 426                   | 430                  | 70%                   | 87%                  | 89%                 |
| **lowercase**        | 53                    | 50                   | 427                   | 430                  | 70%                   | 89%                  | 90%                 |
| **titlecase**        | 169                   | 83                   | 337                   | 423                  | 70%                   | 67%                  | 84%                 |
| **uppercase**        | 417                   | 106                  | 89                    | 400                  | 70%                   | 18%                  | 79%                 |
| **weighted average** | **1129**              | **531**              | **1805**              | **2397**             | **70%**               | **61.52%**           | **81.86%**          |

## Predicted Entities

`VitalTest`, `Test`, `Measurements`, `TestResult`

{:.btn-box}
&lt;button class=&quot;button button-orange&quot; disabled&gt;Live Demo&lt;/button&gt;
&lt;button class=&quot;button button-orange&quot; disabled&gt;Open in Colab&lt;/button&gt;
[Download](https://s3.amazonaws.com/auxdata.johnsnowlabs.com/clinical/models/ner_vop_test_langtest_en_5.1.0_3.0_1695371748577.zip){:.button.button-orange.button-orange-trans.arr.button-icon.hidden}
[Copy S3 URI](s3://auxdata.johnsnowlabs.com/clinical/models/ner_vop_test_langtest_en_5.1.0_3.0_1695371748577.zip){:.button.button-orange.button-orange-trans.button-icon.button-copy-s3}

## How to use



&lt;div class=&quot;tabs-box&quot; markdown=&quot;1&quot;&gt;
{% include programmingLanguageSelectScalaPythonNLU.html %}
  
```python
document_assembler = DocumentAssembler()\
    .setInputCol(&quot;text&quot;)\
    .setOutputCol(&quot;document&quot;)

sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;document&quot;])\
    .setOutputCol(&quot;sentence&quot;)

tokenizer = Tokenizer() \
    .setInputCols([&quot;sentence&quot;]) \
    .setOutputCol(&quot;token&quot;)

word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \
    .setOutputCol(&quot;embeddings&quot;)                

ner = MedicalNerModel.pretrained(&quot;ner_vop_test_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \
    .setOutputCol(&quot;ner&quot;)

ner_converter = NerConverterInternal() \
    .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \
    .setOutputCol(&quot;ner_chunk&quot;)

pipeline = Pipeline(stages=[document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter])

data = spark.createDataFrame([[&quot;I went to the endocrinology department to get my thyroid levels checked. They ordered a blood test and found out that I have hypothyroidism, so now I'm on medication to manage it.&quot;]]).toDF(&quot;text&quot;)

result = pipeline.fit(data).transform(data)
```
```scala
val document_assembler = new DocumentAssembler()
    .setInputCol(&quot;text&quot;)
    .setOutputCol(&quot;document&quot;)
    
val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(&quot;document&quot;)
    .setOutputCol(&quot;sentence&quot;)
    
val tokenizer = new Tokenizer()
    .setInputCols(&quot;sentence&quot;)
    .setOutputCol(&quot;token&quot;)
    
val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;))
    .setOutputCol(&quot;embeddings&quot;)                
    
val ner = MedicalNerModel.pretrained(&quot;ner_vop_test_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;)
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;))
    .setOutputCol(&quot;ner&quot;)
    
val ner_converter = new NerConverterInternal()
    .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;))
    .setOutputCol(&quot;ner_chunk&quot;)

        
val pipeline = new Pipeline().setStages(Array(document_assembler,
                            sentence_detector,
                            tokenizer,
                            word_embeddings,
                            ner,
                            ner_converter))    

val data = Seq(&quot;I went to the endocrinology department to get my thyroid levels checked. They ordered a blood test and found out that I have hypothyroidism, so now I'm on medication to manage it.&quot;).toDS.toDF(&quot;text&quot;)

val result = pipeline.fit(data).transform(data)
```
&lt;/div&gt;

## Results

```bash
+--------------+---------+
|chunk         |ner_label|
+--------------+---------+
|thyroid levels|Test     |
|blood test    |Test     |
+--------------+---------+
```

{:.model-param}
## Model Information

{:.table-model}
|---|---|
|Model Name:|ner_vop_test_langtest|
|Compatibility:|Healthcare NLP 5.1.0+|
|License:|Licensed|
|Edition:|Official|
|Input Labels:|[sentence, token, embeddings]|
|Output Labels:|[ner]|
|Language:|en|
|Size:|14.5 MB|

## References

In-house annotated health-related text in colloquial language.

## Sample text from the training dataset

Hello,I'm 20 year old girl. I'm diagnosed with hyperthyroid 1 month ago. I was feeling weak, light headed,poor digestion, panic attacks, depression, left chest pain, increased heart rate, rapidly weight loss,  from 4 months. Because of this, I stayed in the hospital and just discharged from hospital. I had many other blood tests, brain mri, ultrasound scan, endoscopy because of some dumb doctors bcs they were not able to diagnose actual problem. Finally I got an appointment with a homeopathy doctor finally he find that i was suffering from hyperthyroid and my TSH was 0.15 T3 and T4 is normal . Also i have b12 deficiency and vitamin D deficiency so I'm taking weekly supplement of vitamin D and 1000 mcg b12 daily. I'm taking homeopathy medicine for 40 days and took 2nd test after 30 days. My TSH is 0.5 now. I feel a little bit relief from weakness and depression but I'm facing with 2 new problem from last week that is breathtaking problem and very rapid heartrate. I just want to know if i should start allopathy medicine or homeopathy is okay? Bcs i heard that thyroid take time to start recover. So please let me know if both of medicines take same time. Because some of my friends advising me to start allopathy and never take a chance as i can develop some serious problems.Sorry for my poor english😐Thank you.

## Benchmarking

```bash
label         precision  recall  f1-score  support 
Measurements  0.74       0.74    0.74      81      
Test          0.86       0.85    0.85      607     
TestResult    0.76       0.81    0.78      343     
VitalTest     0.92       0.97    0.95      89      
micro-avg     0.82       0.84    0.83      1120    
macro-avg     0.82       0.84    0.83      1120    
weighted-avg  0.82       0.84    0.83      1120    
```</content><author><name>John Snow Labs</name></author><category term="en" /><category term="clinical" /><category term="ner" /><category term="licensed" /><category term="vop" /><category term="test" /><category term="langtest" /><summary type="html">Description This model extracts test mentions from the documents transferred from the patient’s own sentences. It is the version of ner_vop_test model augmented with langtest library. test_type before fail_count after fail_count before pass_count after pass_count minimum pass_rate before pass_rate after pass_rate add_abbreviation 149 124 305 330 70% 67% 73% add_ocr_typo 280 117 217 380 70% 44% 76% add_punctuation 0 0 4 4 70% 100% 100% add_typo 61 51 426 430 70% 87% 89% lowercase 53 50 427 430 70% 89% 90% titlecase 169 83 337 423 70% 67% 84% uppercase 417 106 89 400 70% 18% 79% weighted average 1129 531 1805 2397 70% 61.52% 81.86% Predicted Entities VitalTest, Test, Measurements, TestResult Live Demo Open in Colab Download Copy S3 URI How to use PythonScalaNLU document_assembler = DocumentAssembler()\ .setInputCol(&quot;text&quot;)\ .setOutputCol(&quot;document&quot;) sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;document&quot;])\ .setOutputCol(&quot;sentence&quot;) tokenizer = Tokenizer() \ .setInputCols([&quot;sentence&quot;]) \ .setOutputCol(&quot;token&quot;) word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;)\ .setInputCols([&quot;sentence&quot;, &quot;token&quot;]) \ .setOutputCol(&quot;embeddings&quot;) ner = MedicalNerModel.pretrained(&quot;ner_vop_test_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;]) \ .setOutputCol(&quot;ner&quot;) ner_converter = NerConverterInternal() \ .setInputCols([&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;]) \ .setOutputCol(&quot;ner_chunk&quot;) pipeline = Pipeline(stages=[document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter]) data = spark.createDataFrame([[&quot;I went to the endocrinology department to get my thyroid levels checked. They ordered a blood test and found out that I have hypothyroidism, so now I'm on medication to manage it.&quot;]]).toDF(&quot;text&quot;) result = pipeline.fit(data).transform(data) val document_assembler = new DocumentAssembler() .setInputCol(&quot;text&quot;) .setOutputCol(&quot;document&quot;) val sentence_detector = SentenceDetectorDLModel.pretrained(&quot;sentence_detector_dl_healthcare&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(&quot;document&quot;) .setOutputCol(&quot;sentence&quot;) val tokenizer = new Tokenizer() .setInputCols(&quot;sentence&quot;) .setOutputCol(&quot;token&quot;) val word_embeddings = WordEmbeddingsModel().pretrained(&quot;embeddings_clinical&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;)) .setOutputCol(&quot;embeddings&quot;) val ner = MedicalNerModel.pretrained(&quot;ner_vop_test_langtest&quot;, &quot;en&quot;, &quot;clinical/models&quot;) .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;embeddings&quot;)) .setOutputCol(&quot;ner&quot;) val ner_converter = new NerConverterInternal() .setInputCols(Array(&quot;sentence&quot;, &quot;token&quot;, &quot;ner&quot;)) .setOutputCol(&quot;ner_chunk&quot;) val pipeline = new Pipeline().setStages(Array(document_assembler, sentence_detector, tokenizer, word_embeddings, ner, ner_converter)) val data = Seq(&quot;I went to the endocrinology department to get my thyroid levels checked. They ordered a blood test and found out that I have hypothyroidism, so now I'm on medication to manage it.&quot;).toDS.toDF(&quot;text&quot;) val result = pipeline.fit(data).transform(data) Results +--------------+---------+ |chunk |ner_label| +--------------+---------+ |thyroid levels|Test | |blood test |Test | +--------------+---------+ Model Information Model Name: ner_vop_test_langtest Compatibility: Healthcare NLP 5.1.0+ License: Licensed Edition: Official Input Labels: [sentence, token, embeddings] Output Labels: [ner] Language: en Size: 14.5 MB References In-house annotated health-related text in colloquial language. Sample text from the training dataset Hello,I’m 20 year old girl. I’m diagnosed with hyperthyroid 1 month ago. I was feeling weak, light headed,poor digestion, panic attacks, depression, left chest pain, increased heart rate, rapidly weight loss, from 4 months. Because of this, I stayed in the hospital and just discharged from hospital. I had many other blood tests, brain mri, ultrasound scan, endoscopy because of some dumb doctors bcs they were not able to diagnose actual problem. Finally I got an appointment with a homeopathy doctor finally he find that i was suffering from hyperthyroid and my TSH was 0.15 T3 and T4 is normal . Also i have b12 deficiency and vitamin D deficiency so I’m taking weekly supplement of vitamin D and 1000 mcg b12 daily. I’m taking homeopathy medicine for 40 days and took 2nd test after 30 days. My TSH is 0.5 now. I feel a little bit relief from weakness and depression but I’m facing with 2 new problem from last week that is breathtaking problem and very rapid heartrate. I just want to know if i should start allopathy medicine or homeopathy is okay? Bcs i heard that thyroid take time to start recover. So please let me know if both of medicines take same time. Because some of my friends advising me to start allopathy and never take a chance as i can develop some serious problems.Sorry for my poor english😐Thank you. Benchmarking label precision recall f1-score support Measurements 0.74 0.74 0.74 81 Test 0.86 0.85 0.85 607 TestResult 0.76 0.81 0.78 343 VitalTest 0.92 0.97 0.95 89 micro-avg 0.82 0.84 0.83 1120 macro-avg 0.82 0.84 0.83 1120 weighted-avg 0.82 0.84 0.83 1120</summary></entry></feed>